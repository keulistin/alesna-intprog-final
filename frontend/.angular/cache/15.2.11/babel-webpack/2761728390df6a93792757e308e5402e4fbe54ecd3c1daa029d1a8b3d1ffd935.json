{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { HttpResponse, HTTP_INTERCEPTORS, HttpErrorResponse // Import HttpErrorResponse\n} from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor() {\n      // Initial data\n      this.users = [{\n        id: 1,\n        email: 'admin@example.com',\n        password: 'admin',\n        role: 'Admin',\n        employeeId: 1\n      }, {\n        id: 2,\n        email: 'user@example.com',\n        password: 'user',\n        role: 'User',\n        employeeId: 2\n      }];\n      this.employees = [{\n        id: 1,\n        employeeId: 'EMP001',\n        userId: 1,\n        position: 'Developer',\n        departmentId: 1,\n        hireDate: '2025-01-01',\n        status: 'Active'\n      }, {\n        id: 2,\n        employeeId: 'EMP002',\n        userId: 2,\n        position: 'Designer',\n        departmentId: 2,\n        hireDate: '2025-02-01',\n        status: 'Active'\n      }];\n      this.departments = [{\n        id: 1,\n        name: 'Engineering',\n        description: 'Software development team',\n        employeeCount: 1\n      }, {\n        id: 2,\n        name: 'Marketing',\n        description: 'Marketing team',\n        employeeCount: 1\n      }];\n      this.workflows = [{\n        id: 1,\n        employeeId: 1,\n        type: 'Onboarding',\n        details: {\n          task: 'Setup workstation'\n        },\n        status: 'Pending'\n      }];\n      this.appRequests = [{\n        id: 1,\n        employeeId: 2,\n        type: 'Equipment',\n        requestItems: [{\n          name: 'Laptop',\n          quantity: 1\n        }],\n        status: 'Pending'\n      }];\n      // ID Generators for new entities\n      this.nextUserId = this.users.length > 0 ? Math.max(...this.users.map(u => u.id)) + 1 : 1;\n      this.nextEmployeeId = this.employees.length > 0 ? Math.max(...this.employees.map(e => e.id)) + 1 : 1;\n      this.nextDepartmentId = this.departments.length > 0 ? Math.max(...this.departments.map(d => d.id)) + 1 : 1;\n      this.nextWorkflowId = this.workflows.length > 0 ? Math.max(...this.workflows.map(w => w.id)) + 1 : 1;\n      this.nextAppRequestId = this.appRequests.length > 0 ? Math.max(...this.appRequests.map(r => r.id)) + 1 : 1;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      // Wrap in delayed observable to simulate server api call\n      return of(null).pipe(mergeMap(() => this.handleRoute(url, method, headers, body, next))) // Pass next for unhandled\n      .pipe(materialize()) // Convert notifications to objects\n      .pipe(delay(500)) // Simulate network latency\n      .pipe(dematerialize()); // Convert back to notifications\n    }\n\n    handleRoute(url, method, headers, body, next) {\n      // Accounts Routes\n      if (url.endsWith('/accounts/authenticate') && method === 'POST') {\n        const {\n          email,\n          password\n        } = body;\n        const user = this.users.find(u => u.email === email && u.password === password);\n        if (!user) {\n          return throwError(() => new HttpErrorResponse({\n            error: {\n              message: 'Invalid credentials'\n            },\n            status: 400\n          }));\n        }\n        // Return user details and a fake JWT token that includes user ID\n        const userToReturn = Object.assign({}, user);\n        delete userToReturn.password; // Never return password\n        userToReturn.token = `fake-jwt-token-id-${user.id}`; // User-specific token\n        return of(new HttpResponse({\n          status: 200,\n          body: userToReturn\n        }));\n      }\n      // Changed to /users for clarity or stick to /accounts if you prefer\n      if (url.endsWith('/users') && method === 'GET') {\n        return this.authorize(headers, 'Admin', () => {\n          const usersToReturn = this.users.map(u => {\n            const {\n                password\n              } = u,\n              userWithoutPassword = __rest(u, [\"password\"]);\n            return userWithoutPassword;\n          });\n          return of(new HttpResponse({\n            status: 200,\n            body: usersToReturn\n          }));\n        });\n      }\n      // Employees Routes\n      if (url.endsWith('/employees') && method === 'GET') {\n        return this.authorize(headers, null, () => of(new HttpResponse({\n          status: 200,\n          body: this.employees\n        })));\n      }\n      if (url.endsWith('/employees') && method === 'POST') {\n        return this.authorize(headers, 'Admin', () => {\n          const newEmployee = Object.assign({\n            id: this.nextEmployeeId++\n          }, body);\n          this.employees.push(newEmployee);\n          // Update department employee count\n          const department = this.departments.find(d => d.id === newEmployee.departmentId);\n          if (department) {\n            department.employeeCount++;\n          }\n          return of(new HttpResponse({\n            status: 201,\n            body: newEmployee\n          }));\n        });\n      }\n      const employeeByIdMatch = url.match(/\\/employees\\/(\\d+)$/);\n      if (employeeByIdMatch && method === 'GET') {\n        const id = parseInt(employeeByIdMatch[1]);\n        return this.authorize(headers, null, () => {\n          const employee = this.employees.find(e => e.id === id);\n          return employee ? of(new HttpResponse({\n            status: 200,\n            body: employee\n          })) : throwError(() => new HttpErrorResponse({\n            status: 404,\n            error: {\n              message: 'Employee not found'\n            }\n          }));\n        });\n      }\n      if (employeeByIdMatch && method === 'PUT') {\n        const id = parseInt(employeeByIdMatch[1]);\n        return this.authorize(headers, 'Admin', () => {\n          const employeeIndex = this.employees.findIndex(e => e.id === id);\n          if (employeeIndex === -1) {\n            return throwError(() => new HttpErrorResponse({\n              status: 404,\n              error: {\n                message: 'Employee not found'\n              }\n            }));\n          }\n          const oldEmployeeData = this.employees[employeeIndex];\n          const updatedEmployee = Object.assign(Object.assign(Object.assign({}, oldEmployeeData), body), {\n            id\n          }); // Ensure ID is not overwritten\n          // Check if departmentId changed for employeeCount update\n          if (oldEmployeeData.departmentId !== updatedEmployee.departmentId) {\n            const oldDept = this.departments.find(d => d.id === oldEmployeeData.departmentId);\n            if (oldDept) oldDept.employeeCount--;\n            const newDept = this.departments.find(d => d.id === updatedEmployee.departmentId);\n            if (newDept) newDept.employeeCount++;\n          }\n          this.employees[employeeIndex] = updatedEmployee;\n          return of(new HttpResponse({\n            status: 200,\n            body: this.employees[employeeIndex]\n          }));\n        });\n      }\n      if (employeeByIdMatch && method === 'DELETE') {\n        const id = parseInt(employeeByIdMatch[1]);\n        return this.authorize(headers, 'Admin', () => {\n          const employeeIndex = this.employees.findIndex(e => e.id === id);\n          if (employeeIndex === -1) {\n            return throwError(() => new HttpErrorResponse({\n              status: 404,\n              error: {\n                message: 'Employee not found'\n              }\n            }));\n          }\n          const deletedEmployee = this.employees[employeeIndex];\n          this.employees.splice(employeeIndex, 1);\n          // Update department employee count\n          const department = this.departments.find(d => d.id === deletedEmployee.departmentId);\n          if (department) {\n            department.employeeCount--;\n          }\n          return of(new HttpResponse({\n            status: 200,\n            body: {\n              message: 'Employee deleted'\n            }\n          }));\n        });\n      }\n      const employeeTransferMatch = url.match(/\\/employees\\/(\\d+)\\/transfer$/);\n      if (employeeTransferMatch && method === 'POST') {\n        const id = parseInt(employeeTransferMatch[1]); // Get ID from first capture group\n        return this.authorize(headers, 'Admin', () => {\n          const employee = this.employees.find(e => e.id === id);\n          if (!employee) {\n            return throwError(() => new HttpErrorResponse({\n              status: 404,\n              error: {\n                message: 'Employee not found'\n              }\n            }));\n          }\n          const oldDepartmentId = employee.departmentId;\n          const newDepartmentId = body.departmentId;\n          if (oldDepartmentId !== newDepartmentId) {\n            const oldDept = this.departments.find(d => d.id === oldDepartmentId);\n            if (oldDept) oldDept.employeeCount--;\n            const newDept = this.departments.find(d => d.id === newDepartmentId);\n            if (newDept) newDept.employeeCount++;else {\n              return throwError(() => new HttpErrorResponse({\n                status: 400,\n                error: {\n                  message: 'Target department not found'\n                }\n              }));\n            }\n          }\n          employee.departmentId = newDepartmentId;\n          this.workflows.push({\n            id: this.nextWorkflowId++,\n            employeeId: id,\n            type: 'Transfer',\n            details: body,\n            status: 'Pending'\n          });\n          return of(new HttpResponse({\n            status: 200,\n            body: {\n              message: 'Employee transferred successfully',\n              employee\n            }\n          }));\n        });\n      }\n      // Departments Routes\n      if (url.endsWith('/departments') && method === 'GET') {\n        return this.authorize(headers, null, () => of(new HttpResponse({\n          status: 200,\n          body: this.departments\n        })));\n      }\n      if (url.endsWith('/departments') && method === 'POST') {\n        return this.authorize(headers, 'Admin', () => {\n          const newDepartment = Object.assign(Object.assign({\n            id: this.nextDepartmentId++\n          }, body), {\n            employeeCount: 0 // New departments start with 0 employees\n          });\n\n          this.departments.push(newDepartment);\n          return of(new HttpResponse({\n            status: 201,\n            body: newDepartment\n          }));\n        });\n      }\n      const departmentByIdMatch = url.match(/\\/departments\\/(\\d+)$/);\n      if (departmentByIdMatch && method === 'PUT') {\n        const id = parseInt(departmentByIdMatch[1]);\n        return this.authorize(headers, 'Admin', () => {\n          const deptIndex = this.departments.findIndex(d => d.id === id);\n          if (deptIndex === -1) {\n            return throwError(() => new HttpErrorResponse({\n              status: 404,\n              error: {\n                message: 'Department not found'\n              }\n            }));\n          }\n          this.departments[deptIndex] = Object.assign(Object.assign(Object.assign({}, this.departments[deptIndex]), body), {\n            // apply updates\n            id // ensure id is not changed\n          });\n\n          return of(new HttpResponse({\n            status: 200,\n            body: this.departments[deptIndex]\n          }));\n        });\n      }\n      if (departmentByIdMatch && method === 'DELETE') {\n        const id = parseInt(departmentByIdMatch[1]);\n        return this.authorize(headers, 'Admin', () => {\n          const department = this.departments.find(d => d.id === id);\n          if (!department) {\n            return throwError(() => new HttpErrorResponse({\n              status: 404,\n              error: {\n                message: 'Department not found'\n              }\n            }));\n          }\n          if (department.employeeCount > 0) {\n            return throwError(() => new HttpErrorResponse({\n              status: 400,\n              error: {\n                message: 'Cannot delete department with active employees.'\n              }\n            }));\n          }\n          this.departments = this.departments.filter(d => d.id !== id);\n          return of(new HttpResponse({\n            status: 200,\n            body: {\n              message: 'Department deleted'\n            }\n          }));\n        });\n      }\n      // Workflows Routes\n      const workflowByEmployeeIdMatch = url.match(/\\/workflows\\/employee\\/(\\d+)$/);\n      if (workflowByEmployeeIdMatch && method === 'GET') {\n        const employeeId = parseInt(workflowByEmployeeIdMatch[1]);\n        return this.authorize(headers, null, () => {\n          const employeeWorkflows = this.workflows.filter(w => w.employeeId === employeeId);\n          return of(new HttpResponse({\n            status: 200,\n            body: employeeWorkflows\n          }));\n        });\n      }\n      if (url.endsWith('/workflows') && method === 'POST') {\n        return this.authorize(headers, 'Admin', () => {\n          const newWorkflow = Object.assign({\n            id: this.nextWorkflowId++\n          }, body);\n          this.workflows.push(newWorkflow);\n          return of(new HttpResponse({\n            status: 201,\n            body: newWorkflow\n          }));\n        });\n      }\n      // AppRequests Routes\n      if (url.endsWith('/requests') && method === 'GET') {\n        // Original was 'Admin' only. Consider if regular users should see their own.\n        return this.authorize(headers, 'Admin', () => of(new HttpResponse({\n          status: 200,\n          body: this.appRequests\n        })));\n      }\n      // If no route matched by the fake backend\n      // return next.handle(request); // Use this if you want unhandled requests to go to a real backend\n      return throwError(() => new HttpErrorResponse({\n        status: 404,\n        error: {\n          message: `Fake backend: Route not found for ${method} ${url}`\n        }\n      }));\n    }\n    authorize(headers, requiredRole, successCallback) {\n      const user = this.getUserFromToken(headers); // Changed to a more token-based approach\n      if (!user) {\n        return throwError(() => new HttpErrorResponse({\n          status: 401,\n          statusText: 'Unauthorized',\n          error: {\n            message: 'Missing or invalid authentication token.'\n          }\n        }));\n      }\n      if (requiredRole && user.role !== requiredRole) {\n        return throwError(() => new HttpErrorResponse({\n          status: 403,\n          statusText: 'Forbidden',\n          error: {\n            message: 'You do not have permission to access this resource.'\n          }\n        }));\n      }\n      return successCallback();\n    }\n    getUserFromToken(headers) {\n      const authHeader = headers.get('Authorization');\n      if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        return null;\n      }\n      const token = authHeader.substring(7); // Remove 'Bearer '\n      // Expecting token format: fake-jwt-token-id-${user.id}\n      const tokenParts = token.split('-id-');\n      if (tokenParts.length !== 2 || tokenParts[0] !== 'fake-jwt-token') {\n        return null; // Invalid token format\n      }\n\n      const userId = parseInt(tokenParts[1], 10);\n      if (isNaN(userId)) {\n        return null; // Invalid user ID in token\n      }\n\n      const user = this.users.find(u => u.id === userId);\n      if (!user) return null;\n      // Return a copy without the password\n      const {\n          password\n        } = user,\n        userWithoutPassword = __rest(user, [\"password\"]);\n      return userWithoutPassword;\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)();\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","HttpErrorResponse","of","throwError","delay","mergeMap","materialize","dematerialize","FakeBackendInterceptor","constructor","id","email","password","role","employeeId","userId","position","departmentId","hireDate","status","name","description","employeeCount","type","details","task","requestItems","quantity","users","length","Math","max","map","u","employees","e","departments","d","workflows","w","appRequests","r","intercept","request","next","url","method","headers","body","pipe","handleRoute","endsWith","user","find","error","message","userToReturn","token","authorize","usersToReturn","userWithoutPassword","newEmployee","nextEmployeeId","push","department","employeeByIdMatch","match","parseInt","employee","employeeIndex","findIndex","oldEmployeeData","updatedEmployee","oldDept","newDept","deletedEmployee","splice","employeeTransferMatch","oldDepartmentId","newDepartmentId","nextWorkflowId","newDepartment","nextDepartmentId","departmentByIdMatch","deptIndex","filter","workflowByEmployeeIdMatch","employeeWorkflows","newWorkflow","requiredRole","successCallback","getUserFromToken","statusText","authHeader","get","startsWith","substring","tokenParts","split","isNaN","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n    HttpRequest,\r\n    HttpResponse,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpInterceptor,\r\n    HTTP_INTERCEPTORS,\r\n    HttpErrorResponse // Import HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\r\n\r\n// Define interfaces for your data structures for better type safety\r\ninterface User {\r\n    id: number;\r\n    email: string;\r\n    password?: string; // Password should not be sent after auth\r\n    role: string;\r\n    employeeId: number; // Refers to Employee.id\r\n    token?: string; // Will be added upon authentication\r\n}\r\n\r\ninterface Employee {\r\n    id: number;\r\n    employeeId: string; // The 'EMP001' style ID\r\n    userId: number; // Refers to User.id\r\n    position: string;\r\n    departmentId: number;\r\n    hireDate: string;\r\n    status: string;\r\n}\r\n\r\ninterface Department {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    employeeCount: number;\r\n}\r\n\r\ninterface Workflow {\r\n    id: number;\r\n    employeeId: number;\r\n    type: string;\r\n    details: any;\r\n    status: string;\r\n}\r\n\r\ninterface AppRequest { // Renamed to avoid conflict with HttpRequest\r\n    id: number;\r\n    employeeId: number;\r\n    type: string;\r\n    requestItems: { name: string; quantity: number }[];\r\n    status: string;\r\n}\r\n\r\n@Injectable()\r\nexport class FakeBackendInterceptor implements HttpInterceptor {\r\n    // Initial data\r\n    private users: User[] = [\r\n        { id: 1, email: 'admin@example.com', password: 'admin', role: 'Admin', employeeId: 1 },\r\n        { id: 2, email: 'user@example.com', password: 'user', role: 'User', employeeId: 2 }\r\n    ];\r\n    private employees: Employee[] = [\r\n        { id: 1, employeeId: 'EMP001', userId: 1, position: 'Developer', departmentId: 1, hireDate: '2025-01-01', status: 'Active' },\r\n        { id: 2, employeeId: 'EMP002', userId: 2, position: 'Designer', departmentId: 2, hireDate: '2025-02-01', status: 'Active' }\r\n    ];\r\n    private departments: Department[] = [\r\n        { id: 1, name: 'Engineering', description: 'Software development team', employeeCount: 1 },\r\n        { id: 2, name: 'Marketing', description: 'Marketing team', employeeCount: 1 }\r\n    ];\r\n    private workflows: Workflow[] = [\r\n        { id: 1, employeeId: 1, type: 'Onboarding', details: { task: 'Setup workstation' }, status: 'Pending' }\r\n    ];\r\n    private appRequests: AppRequest[] = [ // Renamed variable\r\n        { id: 1, employeeId: 2, type: 'Equipment', requestItems: [{ name: 'Laptop', quantity: 1 }], status: 'Pending' }\r\n    ];\r\n\r\n    // ID Generators for new entities\r\n    private nextUserId = this.users.length > 0 ? Math.max(...this.users.map(u => u.id)) + 1 : 1;\r\n    private nextEmployeeId = this.employees.length > 0 ? Math.max(...this.employees.map(e => e.id)) + 1 : 1;\r\n    private nextDepartmentId = this.departments.length > 0 ? Math.max(...this.departments.map(d => d.id)) + 1 : 1;\r\n    private nextWorkflowId = this.workflows.length > 0 ? Math.max(...this.workflows.map(w => w.id)) + 1 : 1;\r\n    private nextAppRequestId = this.appRequests.length > 0 ? Math.max(...this.appRequests.map(r => r.id)) + 1 : 1;\r\n\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const { url, method, headers, body } = request;\r\n\r\n        // Wrap in delayed observable to simulate server api call\r\n        return of(null)\r\n            .pipe(mergeMap(() => this.handleRoute(url, method, headers, body, next))) // Pass next for unhandled\r\n            .pipe(materialize()) // Convert notifications to objects\r\n            .pipe(delay(500))    // Simulate network latency\r\n            .pipe(dematerialize()); // Convert back to notifications\r\n    }\r\n\r\n    private handleRoute(url: string, method: string, headers: any, body: any, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // Accounts Routes\r\n        if (url.endsWith('/accounts/authenticate') && method === 'POST') {\r\n            const { email, password } = body;\r\n            const user = this.users.find(u => u.email === email && u.password === password);\r\n            if (!user) {\r\n                return throwError(() => new HttpErrorResponse({ error: { message: 'Invalid credentials' }, status: 400 }));\r\n            }\r\n            // Return user details and a fake JWT token that includes user ID\r\n            const userToReturn = { ...user };\r\n            delete userToReturn.password; // Never return password\r\n            userToReturn.token = `fake-jwt-token-id-${user.id}`; // User-specific token\r\n            return of(new HttpResponse({ status: 200, body: userToReturn }));\r\n        }\r\n\r\n        // Changed to /users for clarity or stick to /accounts if you prefer\r\n        if (url.endsWith('/users') && method === 'GET') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const usersToReturn = this.users.map(u => {\r\n                    const { password, ...userWithoutPassword } = u;\r\n                    return userWithoutPassword;\r\n                });\r\n                return of(new HttpResponse({ status: 200, body: usersToReturn }));\r\n            });\r\n        }\r\n\r\n        // Employees Routes\r\n        if (url.endsWith('/employees') && method === 'GET') {\r\n            return this.authorize(headers, null, () => of(new HttpResponse({ status: 200, body: this.employees })));\r\n        }\r\n\r\n        if (url.endsWith('/employees') && method === 'POST') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const newEmployee: Employee = {\r\n                    id: this.nextEmployeeId++,\r\n                    ...body\r\n                };\r\n                this.employees.push(newEmployee);\r\n\r\n                // Update department employee count\r\n                const department = this.departments.find(d => d.id === newEmployee.departmentId);\r\n                if (department) {\r\n                    department.employeeCount++;\r\n                }\r\n                return of(new HttpResponse({ status: 201, body: newEmployee }));\r\n            });\r\n        }\r\n\r\n        const employeeByIdMatch = url.match(/\\/employees\\/(\\d+)$/);\r\n        if (employeeByIdMatch && method === 'GET') {\r\n            const id = parseInt(employeeByIdMatch[1]);\r\n            return this.authorize(headers, null, () => {\r\n                const employee = this.employees.find(e => e.id === id);\r\n                return employee ?\r\n                    of(new HttpResponse({ status: 200, body: employee })) :\r\n                    throwError(() => new HttpErrorResponse({ status: 404, error: { message: 'Employee not found' } }));\r\n            });\r\n        }\r\n\r\n        if (employeeByIdMatch && method === 'PUT') {\r\n            const id = parseInt(employeeByIdMatch[1]);\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const employeeIndex = this.employees.findIndex(e => e.id === id);\r\n                if (employeeIndex === -1) {\r\n                    return throwError(() => new HttpErrorResponse({ status: 404, error: { message: 'Employee not found' } }));\r\n                }\r\n                const oldEmployeeData = this.employees[employeeIndex];\r\n                const updatedEmployee = { ...oldEmployeeData, ...body, id }; // Ensure ID is not overwritten\r\n\r\n                // Check if departmentId changed for employeeCount update\r\n                if (oldEmployeeData.departmentId !== updatedEmployee.departmentId) {\r\n                    const oldDept = this.departments.find(d => d.id === oldEmployeeData.departmentId);\r\n                    if (oldDept) oldDept.employeeCount--;\r\n\r\n                    const newDept = this.departments.find(d => d.id === updatedEmployee.departmentId);\r\n                    if (newDept) newDept.employeeCount++;\r\n                }\r\n\r\n                this.employees[employeeIndex] = updatedEmployee;\r\n                return of(new HttpResponse({ status: 200, body: this.employees[employeeIndex] }));\r\n            });\r\n        }\r\n\r\n        if (employeeByIdMatch && method === 'DELETE') {\r\n            const id = parseInt(employeeByIdMatch[1]);\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const employeeIndex = this.employees.findIndex(e => e.id === id);\r\n                if (employeeIndex === -1) {\r\n                    return throwError(() => new HttpErrorResponse({ status: 404, error: { message: 'Employee not found' } }));\r\n                }\r\n                const deletedEmployee = this.employees[employeeIndex];\r\n                this.employees.splice(employeeIndex, 1);\r\n\r\n                // Update department employee count\r\n                const department = this.departments.find(d => d.id === deletedEmployee.departmentId);\r\n                if (department) {\r\n                    department.employeeCount--;\r\n                }\r\n                return of(new HttpResponse({ status: 200, body: { message: 'Employee deleted' } }));\r\n            });\r\n        }\r\n\r\n        const employeeTransferMatch = url.match(/\\/employees\\/(\\d+)\\/transfer$/);\r\n        if (employeeTransferMatch && method === 'POST') {\r\n            const id = parseInt(employeeTransferMatch[1]); // Get ID from first capture group\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const employee = this.employees.find(e => e.id === id);\r\n                if (!employee) {\r\n                    return throwError(() => new HttpErrorResponse({ status: 404, error: { message: 'Employee not found' } }));\r\n                }\r\n\r\n                const oldDepartmentId = employee.departmentId;\r\n                const newDepartmentId = body.departmentId;\r\n\r\n                if (oldDepartmentId !== newDepartmentId) {\r\n                    const oldDept = this.departments.find(d => d.id === oldDepartmentId);\r\n                    if (oldDept) oldDept.employeeCount--;\r\n\r\n                    const newDept = this.departments.find(d => d.id === newDepartmentId);\r\n                    if (newDept) newDept.employeeCount++;\r\n                    else {\r\n                        return throwError(() => new HttpErrorResponse({ status: 400, error: { message: 'Target department not found' } }));\r\n                    }\r\n                }\r\n\r\n                employee.departmentId = newDepartmentId;\r\n                this.workflows.push({\r\n                    id: this.nextWorkflowId++,\r\n                    employeeId: id,\r\n                    type: 'Transfer',\r\n                    details: body, // Contains new departmentId and potentially reason etc.\r\n                    status: 'Pending'\r\n                });\r\n                return of(new HttpResponse({ status: 200, body: { message: 'Employee transferred successfully', employee } }));\r\n            });\r\n        }\r\n\r\n        // Departments Routes\r\n        if (url.endsWith('/departments') && method === 'GET') {\r\n            return this.authorize(headers, null, () => of(new HttpResponse({ status: 200, body: this.departments })));\r\n        }\r\n\r\n        if (url.endsWith('/departments') && method === 'POST') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const newDepartment: Department = {\r\n                    id: this.nextDepartmentId++,\r\n                    ...body,\r\n                    employeeCount: 0 // New departments start with 0 employees\r\n                };\r\n                this.departments.push(newDepartment);\r\n                return of(new HttpResponse({ status: 201, body: newDepartment }));\r\n            });\r\n        }\r\n\r\n        const departmentByIdMatch = url.match(/\\/departments\\/(\\d+)$/);\r\n        if (departmentByIdMatch && method === 'PUT') {\r\n            const id = parseInt(departmentByIdMatch[1]);\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const deptIndex = this.departments.findIndex(d => d.id === id);\r\n                if (deptIndex === -1) {\r\n                    return throwError(() => new HttpErrorResponse({ status: 404, error: { message: 'Department not found' } }));\r\n                }\r\n                this.departments[deptIndex] = {\r\n                    ...this.departments[deptIndex], // keep old values like employeeCount\r\n                    ...body, // apply updates\r\n                    id // ensure id is not changed\r\n                };\r\n                return of(new HttpResponse({ status: 200, body: this.departments[deptIndex] }));\r\n            });\r\n        }\r\n\r\n        if (departmentByIdMatch && method === 'DELETE') {\r\n            const id = parseInt(departmentByIdMatch[1]);\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const department = this.departments.find(d => d.id === id);\r\n                if (!department) {\r\n                    return throwError(() => new HttpErrorResponse({ status: 404, error: { message: 'Department not found' } }));\r\n                }\r\n                if (department.employeeCount > 0) {\r\n                    return throwError(() => new HttpErrorResponse({ status: 400, error: { message: 'Cannot delete department with active employees.' } }));\r\n                }\r\n                this.departments = this.departments.filter(d => d.id !== id);\r\n                return of(new HttpResponse({ status: 200, body: { message: 'Department deleted' } }));\r\n            });\r\n        }\r\n\r\n        // Workflows Routes\r\n        const workflowByEmployeeIdMatch = url.match(/\\/workflows\\/employee\\/(\\d+)$/);\r\n        if (workflowByEmployeeIdMatch && method === 'GET') {\r\n            const employeeId = parseInt(workflowByEmployeeIdMatch[1]);\r\n            return this.authorize(headers, null, () => {\r\n                const employeeWorkflows = this.workflows.filter(w => w.employeeId === employeeId);\r\n                return of(new HttpResponse({ status: 200, body: employeeWorkflows }));\r\n            });\r\n        }\r\n\r\n        if (url.endsWith('/workflows') && method === 'POST') {\r\n            return this.authorize(headers, 'Admin', () => { // Or maybe employee can create certain types?\r\n                const newWorkflow: Workflow = {\r\n                    id: this.nextWorkflowId++,\r\n                    ...body\r\n                };\r\n                this.workflows.push(newWorkflow);\r\n                return of(new HttpResponse({ status: 201, body: newWorkflow }));\r\n            });\r\n        }\r\n\r\n        // AppRequests Routes\r\n        if (url.endsWith('/requests') && method === 'GET') {\r\n            // Original was 'Admin' only. Consider if regular users should see their own.\r\n            return this.authorize(headers, 'Admin', () => of(new HttpResponse({ status: 200, body: this.appRequests })));\r\n        }\r\n\r\n        // If no route matched by the fake backend\r\n        // return next.handle(request); // Use this if you want unhandled requests to go to a real backend\r\n        return throwError(() => new HttpErrorResponse({ status: 404, error: { message: `Fake backend: Route not found for ${method} ${url}` } }));\r\n    }\r\n\r\n    private authorize(headers: any, requiredRole: string | null, successCallback: () => Observable<HttpEvent<any>>): Observable<HttpEvent<any>> {\r\n        const user = this.getUserFromToken(headers); // Changed to a more token-based approach\r\n        if (!user) {\r\n            return throwError(() => new HttpErrorResponse({ status: 401, statusText: 'Unauthorized', error: { message: 'Missing or invalid authentication token.' } }));\r\n        }\r\n        if (requiredRole && user.role !== requiredRole) {\r\n            return throwError(() => new HttpErrorResponse({ status: 403, statusText: 'Forbidden', error: { message: 'You do not have permission to access this resource.' } }));\r\n        }\r\n        return successCallback();\r\n    }\r\n\r\n    private getUserFromToken(headers: any): User | null {\r\n        const authHeader = headers.get('Authorization');\r\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n            return null;\r\n        }\r\n        const token = authHeader.substring(7); // Remove 'Bearer '\r\n\r\n        // Expecting token format: fake-jwt-token-id-${user.id}\r\n        const tokenParts = token.split('-id-');\r\n        if (tokenParts.length !== 2 || tokenParts[0] !== 'fake-jwt-token') {\r\n            return null; // Invalid token format\r\n        }\r\n\r\n        const userId = parseInt(tokenParts[1], 10);\r\n        if (isNaN(userId)) {\r\n            return null; // Invalid user ID in token\r\n        }\r\n\r\n        const user = this.users.find(u => u.id === userId);\r\n        if (!user) return null;\r\n\r\n        // Return a copy without the password\r\n        const { password, ...userWithoutPassword } = user;\r\n        return userWithoutPassword as User;\r\n    }\r\n}\r\n\r\nexport const fakeBackendProvider = {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: FakeBackendInterceptor,\r\n    multi: true\r\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}