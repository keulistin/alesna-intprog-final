{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first, switchMap, catchError } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { Role } from '@app/_models';\nimport { RequestStatus } from '@app/_models/request';\nimport { WorkflowStatus, WorkflowType } from '@app/_models/workflow';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services/request.service\";\nimport * as i4 from \"@app/_services/employee.service\";\nimport * as i5 from \"@app/_services/workflow.service\";\nimport * as i6 from \"@app/_services/alert.service\";\nimport * as i7 from \"@app/_services/account.service\";\nimport * as i8 from \"@angular/common\";\nfunction RequestAddEditComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtext(1, \" At least one item is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestAddEditComponent_div_16_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Type is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestAddEditComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtemplate(1, RequestAddEditComponent_div_16_div_1_Template, 2, 0, \"div\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.type.errors.required);\n  }\n}\nfunction RequestAddEditComponent_option_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const emp_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", emp_r7.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", emp_r7.employeeId, \" \");\n  }\n}\nfunction RequestAddEditComponent_div_24_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Employee is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestAddEditComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtemplate(1, RequestAddEditComponent_div_24_div_1_Template, 2, 0, \"div\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.f.employeeId.errors.required);\n  }\n}\nfunction RequestAddEditComponent_div_29_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Item name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestAddEditComponent_div_29_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtemplate(1, RequestAddEditComponent_div_29_div_6_div_1_Template, 2, 0, \"div\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const itemGroup_r9 = i0.ɵɵnextContext().$implicit;\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = itemGroup_r9.get(\"name\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n  }\n}\nfunction RequestAddEditComponent_div_29_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Quantity is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestAddEditComponent_div_29_div_11_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Quantity must be at least 1\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestAddEditComponent_div_29_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtemplate(1, RequestAddEditComponent_div_29_div_11_div_1_Template, 2, 0, \"div\", 26);\n    i0.ɵɵtemplate(2, RequestAddEditComponent_div_29_div_11_div_2_Template, 2, 0, \"div\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const itemGroup_r9 = i0.ɵɵnextContext().$implicit;\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = itemGroup_r9.get(\"quantity\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = itemGroup_r9.get(\"quantity\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.min);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nfunction RequestAddEditComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 27)(1, \"div\", 28)(2, \"div\", 29)(3, \"label\", 30);\n    i0.ɵɵtext(4, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 31);\n    i0.ɵɵtemplate(6, RequestAddEditComponent_div_29_div_6_Template, 2, 1, \"div\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 29)(8, \"label\", 30);\n    i0.ɵɵtext(9, \"Quantity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 32);\n    i0.ɵɵtemplate(11, RequestAddEditComponent_div_29_div_11_Template, 3, 2, \"div\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 33)(13, \"label\", 34);\n    i0.ɵɵtext(14, \"\\u00A0\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 35);\n    i0.ɵɵlistener(\"click\", function RequestAddEditComponent_div_29_Template_button_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const i_r10 = restoredCtx.index;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.removeItem(i_r10));\n    });\n    i0.ɵɵtext(16, \" Remove \");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const itemGroup_r9 = ctx.$implicit;\n    const i_r10 = ctx.index;\n    const ctx_r4 = i0.ɵɵnextContext();\n    let tmp_3_0;\n    let tmp_4_0;\n    let tmp_7_0;\n    let tmp_8_0;\n    i0.ɵɵproperty(\"formGroupName\", i_r10);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"itemName-\", i_r10, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"itemName-\", i_r10, \"\");\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx_r4.submitted && ((tmp_3_0 = itemGroup_r9.get(\"name\")) == null ? null : tmp_3_0.errors)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.submitted && ((tmp_4_0 = itemGroup_r9.get(\"name\")) == null ? null : tmp_4_0.errors));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"itemQuantity-\", i_r10, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"itemQuantity-\", i_r10, \"\");\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx_r4.submitted && ((tmp_7_0 = itemGroup_r9.get(\"quantity\")) == null ? null : tmp_7_0.errors)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.submitted && ((tmp_8_0 = itemGroup_r9.get(\"quantity\")) == null ? null : tmp_8_0.errors));\n  }\n}\nfunction RequestAddEditComponent_span_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 36);\n  }\n}\nexport let RequestAddEditComponent = /*#__PURE__*/(() => {\n  class RequestAddEditComponent {\n    constructor(formBuilder, route, router, requestService, employeeService, workflowService,\n    // Injected\n    alertService, accountService // Injected\n    ) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.requestService = requestService;\n      this.employeeService = employeeService;\n      this.workflowService = workflowService;\n      this.alertService = alertService;\n      this.accountService = accountService;\n      this.id = null;\n      this.loading = false;\n      this.submitted = false;\n      this.employeesForDropdown = []; // For the employee dropdown\n      this.currentAccount = this.accountService.accountValue; // Initialize currentAccount\n    }\n\n    ngOnInit() {\n      var _a, _b;\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      // Check for employeeId in query params\n      const employeeIdFromQuery = this.route.snapshot.queryParams['employeeId'];\n      this.form = this.formBuilder.group({\n        type: ['Equipment', Validators.required],\n        // Don't pre-fill employeeId when in add mode unless it's in query params\n        employeeId: [null, Validators.required],\n        requestItems: this.formBuilder.array([], [Validators.required, Validators.minLength(1)]) // Ensure at least one item\n      });\n\n      this.loadEmployeesForDropdown(employeeIdFromQuery);\n      if (!this.isAddMode && this.id) {\n        this.loadRequestData();\n      } else {\n        // For add mode, add one default item if desired (or leave empty for user to add)\n        if (this.requestItems.length === 0) {\n          // Add item only if array is empty\n          this.addItem();\n        }\n      }\n      // If in add mode and current user is NOT an admin AND their employeeId is set, disable the field.\n      // This means non-admins can only create requests for themselves.\n      if (this.isAddMode && ((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.role) !== Role.Admin && ((_b = this.currentAccount) === null || _b === void 0 ? void 0 : _b.id) && !employeeIdFromQuery) {\n        const currentEmpForDropdown = this.employeesForDropdown.find(e => {\n          var _a;\n          return e.id === Number((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.id);\n        });\n        if (currentEmpForDropdown) {\n          this.form.patchValue({\n            employeeId: currentEmpForDropdown.id\n          });\n          this.f.employeeId.disable();\n        }\n      }\n    }\n    // Convenience getters\n    get f() {\n      return this.form.controls;\n    }\n    get requestItems() {\n      return this.form.get('requestItems');\n    }\n    loadEmployeesForDropdown(employeeIdFromQuery) {\n      this.employeeService.getAll().pipe(first()).subscribe({\n        next: employees => {\n          var _a, _b, _c;\n          this.employeesForDropdown = employees.map(emp => {\n            // Attempt to get linked account for full name\n            // This assumes EmployeeService.getAll() returns Employee objects that might\n            // have a userId to link to an Account, or AccountService can fetch by userId.\n            // Or, your Employee model might already include firstName/lastName.\n            const linkedAccount = this.accountService.getAccountByUserId(Number(emp.id)); // You'll need this helper\n            return {\n              id: Number(emp.id),\n              employeeId: emp.employeeId,\n              userId: Number(emp.id) // Ensure userId is a number\n            };\n          });\n          // If employeeId is in query params, pre-select and possibly disable it\n          if (employeeIdFromQuery) {\n            const selectedEmp = this.employeesForDropdown.find(e => e.id === Number(employeeIdFromQuery));\n            if (selectedEmp) {\n              this.form.patchValue({\n                employeeId: selectedEmp.id\n              });\n              // Disable field if not admin (non-admins can't change the employee)\n              if (((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.role) !== Role.Admin) {\n                this.f.employeeId.disable();\n              }\n            }\n          }\n          // Only auto-select for non-admins who should only create requests for themselves\n          else if (this.isAddMode && ((_b = this.currentAccount) === null || _b === void 0 ? void 0 : _b.role) !== Role.Admin && ((_c = this.currentAccount) === null || _c === void 0 ? void 0 : _c.id)) {\n            const currentEmpForDropdown = this.employeesForDropdown.find(e => {\n              var _a;\n              return e.id === Number((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.id);\n            });\n            if (currentEmpForDropdown) {\n              this.form.patchValue({\n                employeeId: currentEmpForDropdown.id\n              });\n              this.f.employeeId.disable();\n            }\n          }\n        },\n        error: err => {\n          this.alertService.error(this.formatError(err, 'Failed to load employees for dropdown'));\n        }\n      });\n    }\n    loadRequestData() {\n      if (!this.id) return;\n      this.loading = true;\n      this.requestService.getById(this.id).pipe(first()).subscribe(request => {\n        var _a, _b, _c;\n        const appRequest = request;\n        this.form.patchValue({\n          type: appRequest.type,\n          employeeId: appRequest.employeeId // This should be the Employee.id\n        });\n\n        this.requestItems.clear();\n        // Handle both requestItems and items properties\n        const items = appRequest.requestItems || appRequest.items || [];\n        items.forEach(item => {\n          this.requestItems.push(this.createItemFormGroup(item.name, item.quantity));\n        });\n        this.loading = false;\n        // If editing and current user is not an admin, disable employeeId field\n        // (assuming they can only edit requests they created or are assigned to them in some way)\n        if (((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.role) !== Role.Admin && appRequest.employeeId !== Number((_b = this.currentAccount) === null || _b === void 0 ? void 0 : _b.id)) {\n          this.f.employeeId.disable(); // Or other logic based on who can edit what\n        } else if (((_c = this.currentAccount) === null || _c === void 0 ? void 0 : _c.role) !== Role.Admin) {\n          this.f.employeeId.disable(); // If non-admin can only edit their own, and it is their own\n        }\n      }, err => {\n        this.alertService.error(this.formatError(err, 'Failed to load request data'));\n        this.loading = false;\n      });\n    }\n    createItemFormGroup(name = '', quantity = 1) {\n      return this.formBuilder.group({\n        name: [name, Validators.required],\n        quantity: [quantity, [Validators.required, Validators.min(1)]]\n      });\n    }\n    addItem() {\n      this.requestItems.push(this.createItemFormGroup());\n    }\n    removeItem(index) {\n      this.requestItems.removeAt(index);\n    }\n    onSubmit() {\n      this.submitted = true;\n      this.alertService.clear();\n      if (this.form.invalid) {\n        this.form.markAllAsTouched();\n        if (this.requestItems.length === 0) {\n          this.alertService.error('At least one item is required.');\n        }\n        return;\n      }\n      if (this.loading) return;\n      this.loading = true;\n      const formValue = this.form.getRawValue();\n      const requestData = {\n        type: formValue.type,\n        employeeId: Number(formValue.employeeId),\n        items: formValue.requestItems.map(item => ({\n          name: item.name,\n          quantity: item.quantity\n        })),\n        status: RequestStatus.Pending,\n        description: `Request for ${formValue.type}`,\n        requestNumber: `REQ-${Date.now()}`\n      };\n      if (this.isAddMode) {\n        this.createRequestWithWorkflow(requestData);\n      } else if (this.id) {\n        this.updateRequest(this.id, requestData);\n      }\n    }\n    createRequestWithWorkflow(requestData) {\n      this.requestService.create(requestData).pipe(first(), switchMap(createdRequest => {\n        if (!createdRequest || createdRequest.id === undefined || createdRequest.employeeId === null || createdRequest.employeeId === undefined) {\n          // If request creation failed or didn't return expected data, throw an error to be caught by catchError\n          return throwError(() => new Error('Request creation failed or did not return an ID. Cannot create workflow.'));\n        }\n        // Get details of the employee who made the request for the workflow details\n        const employeeWhoMadeRequest = this.employeesForDropdown.find(e => e.id === createdRequest.employeeId);\n        const requesterName = employeeWhoMadeRequest ? `${employeeWhoMadeRequest.employeeId}` : `Employee ID ${createdRequest.employeeId}`;\n        // Use requestItems if available, otherwise fallback to items to handle both formats\n        const items = createdRequest.requestItems || createdRequest.items || [];\n        const itemsSummary = items.map(it => `${it.name} (x${it.quantity})`).join(', ');\n        // --- !!! IMPORTANT: Determine Approver Logic !!! ---\n        // This is a placeholder. You need logic to find the correct approver's Employee ID.\n        // It could be based on department, role, a predefined matrix, or a default Admin.\n        // For this example, let's assume an Admin (employeeId 1) needs to approve.\n        const approverEmployeeId = 1; // <<< --- REPLACE WITH YOUR ACTUAL APPROVER LOGIC\n        if (!this.employeesForDropdown.find(e => e.id === approverEmployeeId)) {\n          console.warn(`Approver with employeeId ${approverEmployeeId} not found in dropdown list. Workflow might be unassigned or assigned incorrectly.`);\n        }\n        const workflowData = {\n          employeeId: approverEmployeeId,\n          type: WorkflowType.RequestApproval,\n          details: {\n            task: `Request from ${requesterName} - Review ${createdRequest.type} request #${createdRequest.id} for items: ${itemsSummary}.`\n          },\n          status: WorkflowStatus.Pending,\n          originatingRequestId: createdRequest.id\n        };\n        return this.workflowService.create(workflowData);\n      }), catchError(err => {\n        this.alertService.error(this.formatError(err, 'Failed to submit request or create approval workflow.'));\n        this.loading = false;\n        return of(null); // Completes the observable chain gracefully after an error\n      })).subscribe({\n        next: workflow => {\n          if (workflow) {\n            // Check if workflow creation was successful (not caught by catchError)\n            this.router.navigate(['/admin/requests']); // Adjust path to your requests list\n          }\n          // Loading is set to false in catchError or here\n          this.loading = false;\n        },\n        // error is handled by catchError, no separate error handler needed here for the main subscription\n        complete: () => {\n          if (this.loading) {\n            this.loading = false;\n          }\n        }\n      });\n    }\n    updateRequest(id, requestData) {\n      // If updating a request also needs workflow changes (e.g., re-approval), add logic here.\n      // For now, this just updates the request itself. The workflow would be separate.\n      this.requestService.update(id, requestData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request updated successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/admin/requests']); // Adjust path\n        },\n\n        error: err => {\n          this.alertService.error(this.formatError(err, 'Failed to update request'));\n          this.loading = false;\n        },\n        complete: () => {\n          this.loading = false;\n        }\n      });\n    }\n    onCancel() {\n      // Navigate based on add/edit mode to go \"back\" appropriately\n      if (this.isAddMode) {\n        this.router.navigate(['../'], {\n          relativeTo: this.route\n        }); // If /admin/requests/add -> /admin/requests\n      } else {\n        this.router.navigate(['../../'], {\n          relativeTo: this.route\n        }); // If /admin/requests/edit/1 -> /admin/requests\n      }\n      // Or a fixed path: this.router.navigate(['/admin/requests']);\n    }\n\n    formatError(error, defaultMessage) {\n      var _a;\n      if (error instanceof HttpErrorResponse) {\n        return ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || error.message || defaultMessage;\n      }\n      return error.message || defaultMessage;\n    }\n  }\n  RequestAddEditComponent.ɵfac = function RequestAddEditComponent_Factory(t) {\n    return new (t || RequestAddEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.RequestService), i0.ɵɵdirectiveInject(i4.EmployeeService), i0.ɵɵdirectiveInject(i5.WorkflowService), i0.ɵɵdirectiveInject(i6.AlertService), i0.ɵɵdirectiveInject(i7.AccountService));\n  };\n  RequestAddEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RequestAddEditComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 38,\n    vars: 18,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [\"class\", \"alert alert-danger mt-2\", 4, \"ngIf\"], [1, \"mb-3\"], [\"for\", \"type\", 1, \"form-label\"], [\"id\", \"type\", \"formControlName\", \"type\", 1, \"form-select\", 3, \"ngClass\"], [\"value\", \"Equipment\"], [\"value\", \"Leave\"], [\"value\", \"Resources\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"employeeId\", 1, \"form-label\"], [\"id\", \"employeeId\", \"formControlName\", \"employeeId\", 1, \"form-select\", 3, \"ngClass\"], [3, \"ngValue\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-label\"], [\"formArrayName\", \"requestItems\"], [\"class\", \"border p-3 mb-3 rounded\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", \"mt-2\", 3, \"click\"], [1, \"text-center\", \"mt-4\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"me-2\", 3, \"disabled\"], [\"class.bind\", \"'spinner-border spinner-border-sm me-1'\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [1, \"alert\", \"alert-danger\", \"mt-2\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"border\", \"p-3\", \"mb-3\", \"rounded\", 3, \"formGroupName\"], [1, \"row\", \"align-items-center\"], [1, \"col-md-5\"], [1, \"form-label\", \"small\", 3, \"for\"], [\"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\", \"form-control-sm\", 3, \"id\", \"ngClass\"], [\"type\", \"number\", \"formControlName\", \"quantity\", 1, \"form-control\", \"form-control-sm\", 3, \"id\", \"ngClass\"], [1, \"col-md-2\"], [1, \"form-label\", \"small\", \"d-block\"], [\"type\", \"button\", \"title\", \"Remove Item\", 1, \"btn\", \"btn-danger\", \"btn-sm\", \"w-100\", 3, \"click\"], [\"class.bind\", \"'spinner-border spinner-border-sm me-1'\"]],\n    template: function RequestAddEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function RequestAddEditComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtemplate(5, RequestAddEditComponent_div_5_Template, 2, 0, \"div\", 4);\n        i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n        i0.ɵɵtext(8, \"Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"select\", 7)(10, \"option\", 8);\n        i0.ɵɵtext(11, \"Equipment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"option\", 9);\n        i0.ɵɵtext(13, \"Leave\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"option\", 10);\n        i0.ɵɵtext(15, \"Resources\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(16, RequestAddEditComponent_div_16_Template, 2, 1, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 5)(18, \"label\", 12);\n        i0.ɵɵtext(19, \"Employee\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"select\", 13)(21, \"option\", 14);\n        i0.ɵɵtext(22, \"-- Select Employee --\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(23, RequestAddEditComponent_option_23_Template, 2, 2, \"option\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(24, RequestAddEditComponent_div_24_Template, 2, 1, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 5)(26, \"label\", 16);\n        i0.ɵɵtext(27, \"Items\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 17);\n        i0.ɵɵtemplate(29, RequestAddEditComponent_div_29_Template, 17, 13, \"div\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"button\", 19);\n        i0.ɵɵlistener(\"click\", function RequestAddEditComponent_Template_button_click_30_listener() {\n          return ctx.addItem();\n        });\n        i0.ɵɵtext(31, \"Add Item\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(32, \"div\", 20)(33, \"button\", 21);\n        i0.ɵɵtemplate(34, RequestAddEditComponent_span_34_Template, 1, 0, \"span\", 22);\n        i0.ɵɵtext(35);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"button\", 23);\n        i0.ɵɵlistener(\"click\", function RequestAddEditComponent_Template_button_click_36_listener() {\n          return ctx.onCancel();\n        });\n        i0.ɵɵtext(37, \"Cancel\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        let tmp_2_0;\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.isAddMode ? \"Add\" : \"Edit\", \" Request\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.requestItems.length === 0 && ((tmp_2_0 = ctx.form.get(\"requestItems\")) == null ? null : tmp_2_0.hasError(\"required\")));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(14, _c0, ctx.submitted && ctx.f.type.errors));\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.type.errors);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(16, _c0, ctx.submitted && ctx.f.employeeId.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngValue\", null);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.employeesForDropdown);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.employeeId.errors);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.requestItems.controls);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.isAddMode ? \"Create\" : \"Save Changes\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n      }\n    },\n    dependencies: [i8.NgClass, i8.NgForOf, i8.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName],\n    encapsulation: 2\n  });\n  return RequestAddEditComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}