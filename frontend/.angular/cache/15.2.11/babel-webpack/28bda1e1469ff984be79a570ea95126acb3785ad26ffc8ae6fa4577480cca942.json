{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport { WorkflowStatus, WorkflowType } from '@app/_models/workflow';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"confirmModal\"];\nfunction ListWorkflowComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"for Employee \", ctx_r0.employeeDetails.employeeId, \"\");\n  }\n}\nfunction ListWorkflowComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" - All Workflows\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelement(1, \"span\", 10);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_7_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No workflows found for this employee.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_7_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No workflows found.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, ListWorkflowComponent_div_7_p_1_Template, 2, 0, \"p\", 2);\n    i0.ɵɵtemplate(2, ListWorkflowComponent_div_7_p_2_Template, 2, 0, \"p\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.employeeIdFromQuery);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.employeeIdFromQuery);\n  }\n}\nfunction ListWorkflowComponent_div_8_th_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1, \"Actions\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"b\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"titlecase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const entry_r16 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(3, 2, entry_r16.key), \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", entry_r16.value, \"\");\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const entry_r16 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(entry_r16.value);\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_div_1_Template, 5, 4, \"div\", 2);\n    i0.ɵɵtemplate(2, ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_div_2_Template, 2, 1, \"div\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const entry_r16 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", entry_r16.key);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !entry_r16.key);\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_Template, 3, 2, \"ng-container\", 14);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const workflow_r11 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r14.getDetailsAsObject(workflow_r11.details));\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_Template, 2, 1, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const workflow_r11 = i0.ɵɵnextContext().$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r12.isRequestApprovalType(workflow_r11.type) && ctx_r12.isTaskOnlyWorkflow(workflow_r11.details)));\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_td_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\")(1, \"select\", 16);\n    i0.ɵɵlistener(\"ngModelChange\", function ListWorkflowComponent_div_8_tr_12_td_8_Template_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const workflow_r11 = i0.ɵɵnextContext().$implicit;\n      return i0.ɵɵresetView(workflow_r11.status = $event);\n    })(\"ngModelChange\", function ListWorkflowComponent_div_8_tr_12_td_8_Template_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const workflow_r11 = i0.ɵɵnextContext().$implicit;\n      const ctx_r26 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r26.onStatusSelected(workflow_r11, $event));\n    });\n    i0.ɵɵelementStart(2, \"option\", 17);\n    i0.ɵɵtext(3, \"Pending\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"option\", 17);\n    i0.ɵɵtext(5, \"Approved \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"option\", 17);\n    i0.ɵɵtext(7, \"Rejected \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const workflow_r11 = i0.ɵɵnextContext().$implicit;\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", workflow_r11.status)(\"disabled\", workflow_r11.status === ctx_r13.WorkflowStatus.Completed || workflow_r11.status === ctx_r13.WorkflowStatus.Rejected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngValue\", ctx_r13.WorkflowStatus.Pending);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngValue\", ctx_r13.WorkflowStatus.Approved);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngValue\", ctx_r13.WorkflowStatus.Rejected);\n  }\n}\nconst _c1 = function (a0, a1, a2) {\n  return {\n    \"bg-warning text-dark\": a0,\n    \"bg-success\": a1,\n    \"bg-danger\": a2\n  };\n};\nfunction ListWorkflowComponent_div_8_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtemplate(4, ListWorkflowComponent_div_8_tr_12_ng_container_4_Template, 2, 1, \"ng-container\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"span\", 15);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(8, ListWorkflowComponent_div_8_tr_12_td_8_Template, 8, 5, \"td\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const workflow_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(workflow_r11.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", workflow_r11.details);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(5, _c1, workflow_r11.status === ctx_r10.WorkflowStatus.Pending || workflow_r11.status === ctx_r10.WorkflowStatus.ForReviewing, workflow_r11.status === ctx_r10.WorkflowStatus.Completed || workflow_r11.status === ctx_r10.WorkflowStatus.Approved, workflow_r11.status === ctx_r10.WorkflowStatus.Rejected));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", workflow_r11.status, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.isAdmin);\n  }\n}\nfunction ListWorkflowComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"table\", 13)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Details\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, ListWorkflowComponent_div_8_th_10_Template, 2, 0, \"th\", 2);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, ListWorkflowComponent_div_8_tr_12_Template, 9, 9, \"tr\", 14);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.isAdmin);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.workflows);\n  }\n}\nfunction ListWorkflowComponent_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function ListWorkflowComponent_button_10_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r29.goBackToEmployees());\n    });\n    i0.ɵɵtext(1, \"Back to Employees \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function ListWorkflowComponent_button_11_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r31.goBackToAdminDashboard());\n    });\n    i0.ɵɵtext(1, \"Back to Admin Dashboard\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let ListWorkflowComponent = /*#__PURE__*/(() => {\n  class ListWorkflowComponent {\n    constructor(workflowService, alertService, accountService, employeeService, route, router) {\n      var _a;\n      this.workflowService = workflowService;\n      this.alertService = alertService;\n      this.accountService = accountService;\n      this.employeeService = employeeService;\n      this.route = route;\n      this.router = router;\n      this.workflows = [];\n      this.loading = false;\n      this.currentAccount = null;\n      this.isAdmin = false;\n      this.employeeId = null;\n      this.displayEmployeeId = null;\n      this.confirmMessage = '';\n      this.notFound = false;\n      this.pendingStatusChange = null;\n      this.employeeIdFromQuery = null;\n      this.employeeDetails = null;\n      this.statusUpdateWorkflow = null;\n      // Make enum available in template\n      this.WorkflowStatus = WorkflowStatus;\n      this.Role = Role;\n      this.subscriptions = [];\n      this.currentAccount = this.accountService.accountValue;\n      this.isAdmin = ((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n    }\n    ngOnDestroy() {\n      // Unsubscribe from all subscriptions to prevent memory leaks\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n    ngOnInit() {\n      this.queryParamsSubscription = this.route.queryParams.subscribe(params => {\n        this.employeeIdFromQuery = params['employeeId'];\n        this.workflows = [];\n        this.employeeDetails = null;\n        if (this.employeeIdFromQuery) {\n          this.loadEmployeeDetails(this.employeeIdFromQuery);\n          this.loadWorkflowsForEmployee(this.employeeIdFromQuery);\n        } else if (this.isAdmin) {\n          this.loadAllWorkflows();\n        } else {\n          const currentEmployeeId = this.employeeId;\n          if (currentEmployeeId) {\n            this.employeeIdFromQuery = String(currentEmployeeId);\n            this.loadEmployeeDetails(String(currentEmployeeId));\n            this.loadWorkflowsForEmployee(String(currentEmployeeId));\n          } else {\n            this.alertService.info(\"No employee specified, and your account is not linked to an employee record.\");\n            this.loading = false;\n          }\n        }\n      });\n    }\n    loadEmployeeDetails(employeeId) {\n      this.employeeService.getById(employeeId).pipe(first()).subscribe({\n        next: employee => this.employeeDetails = employee,\n        error: err => this.alertService.error(this.formatError(err, 'Failed to load employee details'))\n      });\n    }\n    loadWorkflowsForEmployee(employeeId) {\n      this.loading = true;\n      this.workflowService.getByEmployeeId(employeeId).pipe(first()).subscribe({\n        next: workflows => {\n          // Filter out task-only RequestApproval workflows\n          const filteredWorkflows = workflows.filter(workflow => !(this.isRequestApprovalType(workflow.type) && this.isTaskOnlyWorkflow(workflow.details)));\n          this.workflows = this.sortWorkflows(filteredWorkflows);\n          this.loading = false;\n        },\n        error: err => {\n          this.alertService.error(this.formatError(err, `Failed to load workflows for employee ${employeeId}`));\n          this.workflows = [];\n          this.loading = false;\n        }\n      });\n    }\n    loadAllWorkflows() {\n      this.loading = true;\n      this.workflowService.getAll().pipe(first()).subscribe({\n        next: workflows => {\n          // Filter out task-only RequestApproval workflows\n          const filteredWorkflows = workflows.filter(workflow => !(this.isRequestApprovalType(workflow.type) && this.isTaskOnlyWorkflow(workflow.details)));\n          this.workflows = this.sortWorkflows(filteredWorkflows);\n          this.loading = false;\n        },\n        error: err => {\n          this.alertService.error(this.formatError(err, 'Failed to load all workflows'));\n          this.workflows = [];\n          this.loading = false;\n        }\n      });\n    }\n    sortWorkflows(workflows) {\n      return workflows.sort((a, b) => {\n        const dateA = new Date(a.datetimecreated || 0).getTime();\n        const dateB = new Date(b.datetimecreated || 0).getTime();\n        return dateB - dateA;\n      });\n    }\n    onStatusSelected(workflow, newStatus) {\n      console.log(`Status change selected for workflow ${workflow.id} to ${newStatus}`);\n      this.updateWorkflowStatus(workflow, newStatus);\n    }\n    updateWorkflowStatus(workflow, newStatus) {\n      if (!workflow || !workflow.id) return;\n      // Extract requestId from workflow details if this is a request approval workflow\n      let requestId = null;\n      if (this.isRequestApprovalType(workflow.type) && workflow.details) {\n        // Extract requestId from workflow details\n        let details = workflow.details;\n        if (typeof details === 'string') {\n          try {\n            // Try to parse JSON first\n            details = JSON.parse(details);\n          } catch (e) {\n            // If parsing fails, try regex extraction methods\n            const detailsText = details;\n            const boldMatch = detailsText.match(/<b>requestId:<\\/b>\\s*(\\d+)/i);\n            if (boldMatch && boldMatch[1]) {\n              requestId = boldMatch[1];\n            } else {\n              const plainMatch = detailsText.match(/requestId:\\s*(\\d+)/i);\n              if (plainMatch && plainMatch[1]) {\n                requestId = plainMatch[1];\n              } else {\n                const hashMatch = detailsText.match(/request\\s+#(\\d+)/i);\n                if (hashMatch && hashMatch[1]) {\n                  requestId = hashMatch[1];\n                }\n              }\n            }\n          }\n        }\n        // If we have parsed JSON details, extract requestId\n        if (details && details.requestId) {\n          requestId = details.requestId;\n        }\n      }\n      // Use the updateWorkflowAndRequestStatus method to update both entities\n      this.workflowService.updateWorkflowAndRequestStatus(workflow.id, newStatus, requestId).pipe(first()).subscribe({\n        next: updatedWorkflow => {\n          const index = this.workflows.findIndex(w => w.id === updatedWorkflow.id);\n          if (index !== -1) {\n            this.workflows[index] = Object.assign(Object.assign({}, this.workflows[index]), updatedWorkflow);\n          }\n          this.alertService.success('Workflow status updated successfully!');\n        },\n        error: err => {\n          this.alertService.error(this.formatError(err, 'Failed to update workflow status'));\n        }\n      });\n    }\n    openStatusChangeModal(id, status) {\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      this.pendingStatusChange = {\n        id,\n        status\n      };\n      this.confirmMessage = `Are you sure you want to mark this workflow ${status === WorkflowStatus.ForReviewing ? 'for review' : 'as completed'}?`;\n      this.confirmModal.show();\n    }\n    onStatusChangeConfirmed() {\n      if (!this.pendingStatusChange) return;\n      const {\n        id,\n        status\n      } = this.pendingStatusChange;\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      workflow.isUpdating = true;\n      this.workflowService.changeStatus(id, status).pipe(first()).subscribe({\n        next: () => {\n          workflow.status = status;\n          workflow.isUpdating = false;\n          this.alertService.success('Workflow status updated successfully');\n        },\n        error: error => {\n          this.alertService.error(error);\n          workflow.isUpdating = false;\n        }\n      });\n      this.pendingStatusChange = null;\n    }\n    deleteWorkflow(id) {\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      if (confirm('Are you sure you want to delete this workflow?')) {\n        workflow.isDeleting = true;\n        this.workflowService.delete(id).pipe(first()).subscribe({\n          next: () => {\n            this.workflows = this.workflows.filter(x => x.id !== id);\n            this.alertService.success('Workflow deleted successfully');\n          },\n          error: error => {\n            this.alertService.error(error);\n            workflow.isDeleting = false;\n          }\n        });\n      }\n    }\n    getDetailsAsObject(details) {\n      // If workflow is an onboarding with a simple task description\n      if (typeof details === 'string') {\n        // Handle department transfer text directly\n        if (details.includes('Employee transferred from')) {\n          return [{\n            key: '',\n            value: details\n          }];\n        }\n        // Handle task description\n        if (details.startsWith('Task:')) {\n          return [{\n            key: 'Task',\n            value: details\n          }];\n        }\n        try {\n          details = JSON.parse(details);\n        } catch (e) {\n          // If parsing fails, just return the string as is\n          return [{\n            key: '',\n            value: details\n          }];\n        }\n      }\n      // For Request Approval workflows, format in the standard way\n      if (details && details.requestId && details.requestType && details.requesterId && details.message) {\n        return [{\n          key: 'requestId',\n          value: details.requestId\n        }, {\n          key: 'requestType',\n          value: details.requestType\n        }, {\n          key: 'requesterId',\n          value: details.requesterId\n        }, {\n          key: 'message',\n          value: details.message\n        }];\n      }\n      // For task-based workflows, show only the task if not a Request Approval workflow\n      if (details && details.task) {\n        return [{\n          key: 'Task',\n          value: details.task\n        }];\n      }\n      // Return the details as key-value pairs for other cases\n      return Object.entries(details || {}).map(([key, value]) => ({\n        key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value\n      }));\n    }\n    isPendingOrReviewing(status) {\n      return status === WorkflowStatus.Pending || status === WorkflowStatus.ForReviewing;\n    }\n    // Check if workflow details only contain a task field\n    isTaskOnlyWorkflow(details) {\n      if (typeof details === 'string') {\n        try {\n          details = JSON.parse(details);\n        } catch (e) {\n          // If can't parse as JSON, it's likely just a string task\n          return true;\n        }\n      }\n      // If it has only a task property and no others, it's a task-only workflow\n      return details && details.task && Object.keys(details).length === 1 && !details.requestId && !details.requestType && !details.requesterId && !details.message;\n    }\n    isCompletedOrApproved(status) {\n      return status === WorkflowStatus.Completed || status === WorkflowStatus.Approved;\n    }\n    isRejected(status) {\n      return status === WorkflowStatus.Rejected;\n    }\n    canChangeStatus(status) {\n      return !(status === WorkflowStatus.Completed || status === WorkflowStatus.Rejected);\n    }\n    goBackToEmployees() {\n      this.router.navigate(['/admin/employees']);\n    }\n    goBackToAdminDashboard() {\n      this.router.navigate(['/admin']); // Or your main admin overview page\n    }\n\n    formatError(error, defaultMessage) {\n      var _a;\n      if (error instanceof HttpErrorResponse) {\n        return ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || error.message || defaultMessage;\n      }\n      return error.message || defaultMessage;\n    }\n    // Helper method to check if workflow is a request approval type\n    isRequestApprovalType(type) {\n      return type === WorkflowType.RequestApproval || type === 'Request Approval';\n    }\n  }\n  ListWorkflowComponent.ɵfac = function ListWorkflowComponent_Factory(t) {\n    return new (t || ListWorkflowComponent)(i0.ɵɵdirectiveInject(i1.WorkflowService), i0.ɵɵdirectiveInject(i1.AlertService), i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i1.EmployeeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  ListWorkflowComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListWorkflowComponent,\n    selectors: [[\"ng-component\"]],\n    viewQuery: function ListWorkflowComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.confirmModal = _t.first);\n      }\n    },\n    decls: 12,\n    vars: 7,\n    consts: [[1, \"card\"], [1, \"card-header\"], [4, \"ngIf\"], [1, \"card-body\"], [\"class\", \"text-center\", 4, \"ngIf\"], [\"class\", \"text-center text-muted\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [1, \"mt-3\", \"text-end\"], [\"class\", \"btn btn-secondary\", 3, \"click\", 4, \"ngIf\"], [1, \"text-center\"], [1, \"spinner-border\", \"spinner-border-lg\", \"align-center\"], [1, \"text-center\", \"text-muted\"], [1, \"table-responsive\"], [1, \"table\", \"table-striped\", \"align-middle\"], [4, \"ngFor\", \"ngForOf\"], [1, \"badge\", 3, \"ngClass\"], [1, \"form-select\", \"form-select-sm\", \"d-inline-block\", \"w-auto\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [3, \"ngValue\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n    template: function ListWorkflowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Workflows \");\n        i0.ɵɵtemplate(3, ListWorkflowComponent_span_3_Template, 2, 1, \"span\", 2);\n        i0.ɵɵtemplate(4, ListWorkflowComponent_span_4_Template, 2, 0, \"span\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵtemplate(6, ListWorkflowComponent_div_6_Template, 2, 0, \"div\", 4);\n        i0.ɵɵtemplate(7, ListWorkflowComponent_div_7_Template, 3, 2, \"div\", 5);\n        i0.ɵɵtemplate(8, ListWorkflowComponent_div_8_Template, 13, 2, \"div\", 6);\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵtemplate(10, ListWorkflowComponent_button_10_Template, 2, 0, \"button\", 8);\n        i0.ɵɵtemplate(11, ListWorkflowComponent_button_11_Template, 2, 0, \"button\", 8);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.employeeDetails);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.employeeIdFromQuery && ctx.isAdmin);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading && (ctx.workflows == null ? null : ctx.workflows.length) === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading && (ctx.workflows == null ? null : ctx.workflows.length) > 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.employeeIdFromQuery);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.employeeIdFromQuery && ctx.isAdmin);\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgModel, i3.TitleCasePipe],\n    encapsulation: 2\n  });\n  return ListWorkflowComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}