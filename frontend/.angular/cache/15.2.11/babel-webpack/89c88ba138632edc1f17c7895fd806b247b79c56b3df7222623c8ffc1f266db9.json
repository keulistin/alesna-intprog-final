{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { WorkflowType } from '@app/_models/workflow';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nfunction AddWorkflowComponent_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(type_r4);\n  }\n}\nfunction AddWorkflowComponent_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Type is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddWorkflowComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtemplate(1, AddWorkflowComponent_div_14_div_1_Template, 2, 0, \"div\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.type.errors.required);\n  }\n}\nfunction AddWorkflowComponent_div_24_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Task name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddWorkflowComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtemplate(1, AddWorkflowComponent_div_24_div_1_Template, 2, 0, \"div\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r2.form.get(\"details.task\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n  }\n}\nfunction AddWorkflowComponent_span_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 21);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nconst _c1 = function (a0) {\n  return {\n    employeeId: a0\n  };\n};\nexport let AddWorkflowComponent = /*#__PURE__*/(() => {\n  class AddWorkflowComponent {\n    constructor(formBuilder, route, router, workflowService, alertService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.workflowService = workflowService;\n      this.alertService = alertService;\n      this.loading = false;\n      this.submitted = false;\n      this.employeeId = null;\n      this.workflowTypes = Object.values(WorkflowType);\n      // Get employeeId from query params\n      this.route.queryParams.subscribe(params => {\n        this.employeeId = params['employeeId'];\n        if (!this.employeeId) {\n          this.alertService.error('Employee ID is required');\n          this.router.navigate(['/workflows']);\n        }\n      });\n    }\n    ngOnInit() {\n      this.form = this.formBuilder.group({\n        type: ['', Validators.required],\n        details: this.formBuilder.group({\n          task: ['', Validators.required],\n          additionalInfo: ['']\n        })\n      });\n    }\n    // convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      this.submitted = true;\n      this.alertService.clear();\n      // stop here if form is invalid\n      if (this.form.invalid) {\n        return;\n      }\n      this.loading = true;\n      const workflowData = Object.assign(Object.assign({}, this.form.value), {\n        employeeId: Number(this.employeeId),\n        status: 'ForReviewing'\n      });\n      this.workflowService.create(workflowData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Workflow created successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../'], {\n            relativeTo: this.route,\n            queryParams: {\n              employeeId: this.employeeId\n            }\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n  }\n  AddWorkflowComponent.ɵfac = function AddWorkflowComponent_Factory(t) {\n    return new (t || AddWorkflowComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.WorkflowService), i0.ɵɵdirectiveInject(i3.AlertService));\n  };\n  AddWorkflowComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddWorkflowComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 37,\n    vars: 15,\n    consts: [[1, \"card\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-4\"], [1, \"form-label\"], [\"formControlName\", \"type\", 1, \"form-select\", 3, \"ngClass\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-text\", \"text-muted\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"formGroupName\", \"details\", 1, \"bg-light\", \"p-4\", \"rounded\", \"mb-4\"], [1, \"mb-3\"], [\"type\", \"text\", \"formControlName\", \"task\", \"placeholder\", \"Enter the task name\", 1, \"form-control\", 3, \"ngClass\"], [\"formControlName\", \"additionalInfo\", \"rows\", \"4\", \"placeholder\", \"Enter any additional details about the task\", 1, \"form-control\"], [1, \"d-flex\", \"justify-content-between\"], [\"routerLink\", \"/workflows\", 1, \"btn\", \"btn-link\", 3, \"queryParams\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"px-4\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [3, \"value\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"]],\n    template: function AddWorkflowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Create Workflow\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"div\", 1)(4, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function AddWorkflowComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(5, \"div\", 3)(6, \"label\", 4);\n        i0.ɵɵtext(7, \"Workflow Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"select\", 5)(9, \"option\", 6);\n        i0.ɵɵtext(10, \"Select Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, AddWorkflowComponent_option_11_Template, 2, 2, \"option\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 8);\n        i0.ɵɵtext(13, \"Choose the type of workflow you want to create\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, AddWorkflowComponent_div_14_Template, 2, 1, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 10)(16, \"h5\", 11);\n        i0.ɵɵtext(17, \"Task Details\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 3)(19, \"label\", 4);\n        i0.ɵɵtext(20, \"Task Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 12);\n        i0.ɵɵelementStart(22, \"div\", 8);\n        i0.ɵɵtext(23, \"Provide a clear and concise task name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(24, AddWorkflowComponent_div_24_Template, 2, 1, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 11)(26, \"label\", 4);\n        i0.ɵɵtext(27, \"Additional Information\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(28, \"textarea\", 13);\n        i0.ɵɵelementStart(29, \"div\", 8);\n        i0.ɵɵtext(30, \"Optional: Add any relevant details or instructions\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(31, \"div\", 14)(32, \"button\", 15);\n        i0.ɵɵtext(33, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"button\", 16);\n        i0.ɵɵtemplate(35, AddWorkflowComponent_span_35_Template, 1, 0, \"span\", 17);\n        i0.ɵɵtext(36, \" Create Workflow \");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        let tmp_4_0;\n        let tmp_5_0;\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.submitted && ctx.f.type.errors));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.workflowTypes);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.type.errors);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx.submitted && ((tmp_4_0 = ctx.form.get(\"details.task\")) == null ? null : tmp_4_0.errors)));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ((tmp_5_0 = ctx.form.get(\"details.task\")) == null ? null : tmp_5_0.errors));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"queryParams\", i0.ɵɵpureFunction1(13, _c1, ctx.employeeId));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i2.RouterLink],\n    encapsulation: 2\n  });\n  return AddWorkflowComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}