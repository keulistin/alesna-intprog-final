{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport { WorkflowStatus } from '@app/_models/workflow';\nlet ListWorkflowComponent = class ListWorkflowComponent {\n  constructor(workflowService, alertService, accountService, employeeService, route) {\n    var _a;\n    this.workflowService = workflowService;\n    this.alertService = alertService;\n    this.accountService = accountService;\n    this.employeeService = employeeService;\n    this.route = route;\n    this.workflows = null;\n    this.loading = false;\n    this.isAdmin = false;\n    this.employeeId = null;\n    this.displayEmployeeId = null;\n    this.employeeFullName = null;\n    this.confirmMessage = '';\n    this.notFound = false;\n    this.pendingStatusChange = null;\n    // Make enum available in template\n    this.WorkflowStatus = WorkflowStatus;\n    this.isAdmin = ((_a = this.accountService.accountValue) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n    // Get employeeId from query params\n    this.route.queryParams.subscribe(params => {\n      this.employeeId = params['employeeid'];\n      if (this.employeeId) {\n        this.loadEmployee();\n        this.loadWorkflows();\n      } else {\n        this.notFound = false;\n        this.loadWorkflows();\n      }\n    });\n  }\n  ngOnInit() {\n    this.loadWorkflows();\n  }\n  get currentAccount() {\n    return this.accountService.accountValue;\n  }\n  loadEmployee() {\n    if (!this.employeeId) return;\n    this.employeeService.getById(this.employeeId).pipe(first()).subscribe({\n      next: employee => {\n        if (employee && employee.account) {\n          this.displayEmployeeId = employee.employeeId;\n          const firstName = employee.account.firstName.charAt(0).toUpperCase() + employee.account.firstName.slice(1).toLowerCase();\n          const lastName = employee.account.lastName.charAt(0).toUpperCase() + employee.account.lastName.slice(1).toLowerCase();\n          this.employeeFullName = `${firstName} ${lastName}`;\n        }\n      },\n      error: error => {\n        this.alertService.error(error);\n      }\n    });\n  }\n  loadWorkflows() {\n    this.loading = true;\n    let request;\n    if (this.employeeId) {\n      request = this.workflowService.getByEmployeeId(this.employeeId);\n    } else {\n      request = this.workflowService.getAll();\n    }\n    request.pipe(first()).subscribe({\n      next: workflows => {\n        // Sort workflows by date in descending order\n        this.workflows = workflows.sort((a, b) => {\n          const dateA = new Date(a.datetimecreated).getTime();\n          const dateB = new Date(b.datetimecreated).getTime();\n          return dateB - dateA;\n        });\n        this.loading = false;\n        this.notFound = false;\n      },\n      error: error => {\n        if (error.status === 404) {\n          this.notFound = true;\n        }\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n  openStatusChangeModal(id, status) {\n    const workflow = this.workflows.find(x => x.id === id);\n    if (!workflow) return;\n    this.pendingStatusChange = {\n      id,\n      status\n    };\n    this.confirmMessage = `Are you sure you want to mark this workflow ${status === WorkflowStatus.ForReviewing ? 'for review' : 'as completed'}?`;\n    this.confirmModal.show();\n  }\n  onStatusChangeConfirmed() {\n    if (!this.pendingStatusChange) return;\n    const {\n      id,\n      status\n    } = this.pendingStatusChange;\n    const workflow = this.workflows.find(x => x.id === id);\n    if (!workflow) return;\n    workflow.isUpdating = true;\n    this.workflowService.changeStatus(id, status).pipe(first()).subscribe({\n      next: () => {\n        workflow.status = status;\n        workflow.isUpdating = false;\n        this.alertService.success('Workflow status updated successfully');\n      },\n      error: error => {\n        this.alertService.error(error);\n        workflow.isUpdating = false;\n      }\n    });\n    this.pendingStatusChange = null;\n  }\n  deleteWorkflow(id) {\n    const workflow = this.workflows.find(x => x.id === id);\n    if (!workflow) return;\n    if (confirm('Are you sure you want to delete this workflow?')) {\n      workflow.isDeleting = true;\n      this.workflowService.delete(id).pipe(first()).subscribe({\n        next: () => {\n          this.workflows = this.workflows.filter(x => x.id !== id);\n          this.alertService.success('Workflow deleted successfully');\n        },\n        error: error => {\n          this.alertService.error(error);\n          workflow.isDeleting = false;\n        }\n      });\n    }\n  }\n};\n__decorate([ViewChild('confirmModal')], ListWorkflowComponent.prototype, \"confirmModal\", void 0);\nListWorkflowComponent = __decorate([Component({\n  templateUrl: 'list.component.html'\n})], ListWorkflowComponent);\nexport { ListWorkflowComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","first","Role","WorkflowStatus","ListWorkflowComponent","constructor","workflowService","alertService","accountService","employeeService","route","isAdmin","accountValue","role","Admin","queryParams","subscribe","params","employeeId","loadEmployee","loadWorkflows","notFound","ngOnInit","currentAccount","getById","pipe","next","employee","account","displayEmployeeId","firstName","charAt","toUpperCase","slice","toLowerCase","lastName","employeeFullName","error","loading","request","getByEmployeeId","getAll","workflows","sort","a","b","dateA","Date","datetimecreated","getTime","dateB","status","openStatusChangeModal","id","workflow","find","x","pendingStatusChange","confirmMessage","ForReviewing","confirmModal","show","onStatusChangeConfirmed","isUpdating","changeStatus","success","deleteWorkflow","confirm","isDeleting","delete","filter","__decorate","templateUrl"],"sourceRoot":"","sources":["E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\workflows\\list.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { WorkflowService, AlertService, AccountService, EmployeeService } from '@app/_services';\r\nimport { Account, Role } from '@app/_models';\r\nimport { WorkflowStatus } from '@app/_models/workflow';\r\nimport { ConfirmModalComponent } from './confirm-modal.component';\r\n\r\n@Component({ templateUrl: 'list.component.html' })\r\nexport class ListWorkflowComponent implements OnInit {\r\n  @ViewChild('confirmModal') confirmModal!: ConfirmModalComponent;\r\n  workflows = null;\r\n  loading = false;\r\n  isAdmin = false;\r\n  employeeId: string | null = null;\r\n  displayEmployeeId: string | null = null;\r\n  employeeFullName: string | null = null;\r\n  confirmMessage: string = '';\r\n  notFound = false;\r\n  private pendingStatusChange: { id: string; status: WorkflowStatus } | null = null;\r\n\r\n  // Make enum available in template\r\n  WorkflowStatus = WorkflowStatus;\r\n\r\n  constructor(\r\n    private workflowService: WorkflowService,\r\n    private alertService: AlertService,\r\n    private accountService: AccountService,\r\n    private employeeService: EmployeeService,\r\n    private route: ActivatedRoute\r\n  ) {\r\n    this.isAdmin = this.accountService.accountValue?.role === Role.Admin;\r\n\r\n    // Get employeeId from query params\r\n    this.route.queryParams.subscribe(params => {\r\n      this.employeeId = params['employeeid'];\r\n      if (this.employeeId) {\r\n        this.loadEmployee();\r\n        this.loadWorkflows();\r\n      } else {\r\n        this.notFound = false;\r\n        this.loadWorkflows();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadWorkflows();\r\n  }\r\n\r\n  public get currentAccount(): Account | null {\r\n    return this.accountService.accountValue;\r\n  }\r\n\r\n  private loadEmployee() {\r\n    if (!this.employeeId) return;\r\n\r\n    this.employeeService.getById(this.employeeId)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (employee) => {\r\n          if (employee && employee.account) {\r\n            this.displayEmployeeId = employee.employeeId;\r\n            const firstName = employee.account.firstName.charAt(0).toUpperCase() + employee.account.firstName.slice(1).toLowerCase();\r\n            const lastName = employee.account.lastName.charAt(0).toUpperCase() + employee.account.lastName.slice(1).toLowerCase();\r\n            this.employeeFullName = `${firstName} ${lastName}`;\r\n          }\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n        }\r\n      });\r\n  }\r\n\r\n  private loadWorkflows() {\r\n    this.loading = true;\r\n    let request;\r\n\r\n    if (this.employeeId) {\r\n      request = this.workflowService.getByEmployeeId(this.employeeId);\r\n    } else {\r\n      request = this.workflowService.getAll();\r\n    }\r\n\r\n    request.pipe(first())\r\n      .subscribe({\r\n        next: (workflows: any) => {\r\n          // Sort workflows by date in descending order\r\n          this.workflows = workflows.sort((a: any, b: any) => {\r\n            const dateA = new Date(a.datetimecreated).getTime();\r\n            const dateB = new Date(b.datetimecreated).getTime();\r\n            return dateB - dateA;\r\n          });\r\n          this.loading = false;\r\n          this.notFound = false;\r\n        },\r\n        error: error => {\r\n          if (error.status === 404) {\r\n            this.notFound = true;\r\n          }\r\n          this.alertService.error(error);\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  openStatusChangeModal(id: string, status: WorkflowStatus) {\r\n    const workflow = this.workflows.find(x => x.id === id);\r\n    if (!workflow) return;\r\n\r\n    this.pendingStatusChange = { id, status };\r\n    this.confirmMessage = `Are you sure you want to mark this workflow ${status === WorkflowStatus.ForReviewing ? 'for review' : 'as completed'}?`;\r\n    this.confirmModal.show();\r\n  }\r\n\r\n  onStatusChangeConfirmed() {\r\n    if (!this.pendingStatusChange) return;\r\n\r\n    const { id, status } = this.pendingStatusChange;\r\n    const workflow = this.workflows.find(x => x.id === id);\r\n    if (!workflow) return;\r\n\r\n    workflow.isUpdating = true;\r\n    this.workflowService.changeStatus(id, status)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: () => {\r\n          workflow.status = status;\r\n          workflow.isUpdating = false;\r\n          this.alertService.success('Workflow status updated successfully');\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n          workflow.isUpdating = false;\r\n        }\r\n      });\r\n\r\n    this.pendingStatusChange = null;\r\n  }\r\n\r\n  deleteWorkflow(id: string) {\r\n    const workflow = this.workflows.find(x => x.id === id);\r\n    if (!workflow) return;\r\n\r\n    if (confirm('Are you sure you want to delete this workflow?')) {\r\n      workflow.isDeleting = true;\r\n      this.workflowService.delete(id)\r\n        .pipe(first())\r\n        .subscribe({\r\n          next: () => {\r\n            this.workflows = this.workflows.filter(x => x.id !== id);\r\n            this.alertService.success('Workflow deleted successfully');\r\n          },\r\n          error: error => {\r\n            this.alertService.error(error);\r\n            workflow.isDeleting = false;\r\n          }\r\n        });\r\n    }\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}