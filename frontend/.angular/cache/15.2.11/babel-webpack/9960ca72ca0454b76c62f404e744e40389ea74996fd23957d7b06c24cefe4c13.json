{"ast":null,"code":"import { Validators } from '@angular/forms'; // Assuming you'll use Reactive Forms\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services/department.service\";\nimport * as i4 from \"@app/_services/alert.service\";\nimport * as i5 from \"@angular/common\";\nfunction AddEditDepartmentComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nexport let AddEditDepartmentComponent = /*#__PURE__*/(() => {\n  class AddEditDepartmentComponent {\n    constructor(formBuilder, route, router, departmentService,\n    // Inject DepartmentService\n    alertService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.departmentService = departmentService;\n      this.alertService = alertService;\n      this.id = null; // Department ID for editing\n      this.loading = false;\n      this.submitted = false;\n      this.departmentData = null; // To store fetched department data\n    }\n\n    ngOnInit() {\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      // Form validation rules\n      this.form = this.formBuilder.group({\n        name: ['', Validators.required],\n        description: ['', Validators.required]\n        // employeeCount is usually managed by the backend or calculated, not directly edited here\n      });\n\n      if (!this.isAddMode && this.id) {\n        this.loading = true;\n        this.departmentService.getById(this.id).pipe(first()).subscribe({\n          next: department => {\n            this.departmentData = department;\n            this.form.patchValue(department); // Populate form with department data\n            this.loading = false;\n          },\n          error: err => {\n            var _a;\n            this.alertService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.message || 'Failed to load department');\n            this.loading = false;\n            // Optionally navigate back if department not found\n            if (err.status === 404) {\n              this.router.navigate(['/admin/departments']);\n            }\n          }\n        });\n      }\n    }\n    // Convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      this.submitted = true;\n      this.alertService.clear();\n      // Stop here if form is invalid\n      if (this.form.invalid) {\n        return;\n      }\n      if (this.loading) {\n        return;\n      }\n      this.loading = true;\n      if (this.isAddMode) {\n        this.createDepartment();\n      } else if (this.id) {\n        // Ensure id exists for update\n        this.updateDepartment();\n      }\n    }\n    createDepartment() {\n      this.departmentService.create(this.form.value) // Pass form value\n      .pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Department created successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/admin/departments'], {\n            relativeTo: this.route.parent\n          }); // Navigate to departments list\n        },\n\n        error: err => {\n          var _a;\n          this.alertService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.message || 'Failed to create department');\n          this.loading = false;\n        }\n      });\n    }\n    updateDepartment() {\n      if (!this.id) return; // Should not happen if isAddMode is false\n      this.departmentService.update(this.id, this.form.value) // Pass form value\n      .pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Department updated successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/admin/departments'], {\n            relativeTo: this.route.parent\n          }); // Navigate to departments list\n        },\n\n        error: err => {\n          var _a;\n          this.alertService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.message || 'Failed to update department');\n          this.loading = false;\n        }\n      });\n    }\n    onCancel() {\n      // Navigate back to the departments list\n      // Adjust the path based on your admin routing structure\n      if (this.isAddMode) {\n        this.router.navigate(['../'], {\n          relativeTo: this.route\n        }); // Go up one level from /add\n      } else {\n        this.router.navigate(['../../'], {\n          relativeTo: this.route\n        }); // Go up two levels from /edit/:id\n      }\n      // Or simpler:\n      // this.router.navigate(['/admin/departments']);\n    }\n  }\n\n  AddEditDepartmentComponent.ɵfac = function AddEditDepartmentComponent_Factory(t) {\n    return new (t || AddEditDepartmentComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.DepartmentService), i0.ɵɵdirectiveInject(i4.AlertService));\n  };\n  AddEditDepartmentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditDepartmentComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 18,\n    vars: 4,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"mb-3\"], [1, \"form-label\"], [\"type\", \"text\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"text-center\"], [1, \"btn\", \"btn-primary\", \"me-2\", 3, \"click\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"alert\", \"alert-danger\"]],\n    template: function AddEditDepartmentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtemplate(4, AddEditDepartmentComponent_div_4_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n        i0.ɵɵtext(7, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function AddEditDepartmentComponent_Template_input_ngModelChange_8_listener($event) {\n          return ctx.department.name = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 4)(10, \"label\", 5);\n        i0.ɵɵtext(11, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function AddEditDepartmentComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.department.description = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 7)(14, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function AddEditDepartmentComponent_Template_button_click_14_listener() {\n          return ctx.save();\n        });\n        i0.ɵɵtext(15, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function AddEditDepartmentComponent_Template_button_click_16_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵtext(17, \"Cancel\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.id ? \"Edit\" : \"Add\", \" Department\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.department.name);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.department.description);\n      }\n    },\n    dependencies: [i5.NgIf, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel],\n    encapsulation: 2\n  });\n  return AddEditDepartmentComponent;\n})();","map":{"version":3,"mappings":"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","names":["Validators","first","i0","AddEditDepartmentComponent","constructor","formBuilder","route","router","departmentService","alertService","ngOnInit","id","snapshot","params","isAddMode","form","group","name","required","description","loading","getById","pipe","subscribe","next","department","departmentData","patchValue","error","err","message","status","navigate","f","controls","onSubmit","submitted","clear","invalid","createDepartment","updateDepartment","create","value","success","keepAfterRouteChange","relativeTo","parent","update","onCancel","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\departments\\add-edit.component.ts","E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\departments\\add-edit.component.html"],"sourcesContent":["// src/app/admin/departments/add-edit.component.ts (or your actual path)\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'; // Assuming you'll use Reactive Forms\r\nimport { first } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { DepartmentService } from '@app/_services/department.service'; // Use DepartmentService\r\nimport { AlertService } from '@app/_services/alert.service';\r\nimport { Department } from '@app/_models/department'; // Adjust path if needed\r\n\r\n@Component({\r\n    templateUrl: 'add-edit.component.html',\r\n    // Add styleUrls if you have specific styles for this component\r\n})\r\nexport class AddEditDepartmentComponent implements OnInit {\r\n    form!: FormGroup; // Using Reactive Forms\r\n    id: string | null = null; // Department ID for editing\r\n    isAddMode!: boolean;\r\n    loading = false;\r\n    submitted = false;\r\n    departmentData: Department | null = null; // To store fetched department data\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private departmentService: DepartmentService, // Inject DepartmentService\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.id = this.route.snapshot.params['id'];\r\n        this.isAddMode = !this.id;\r\n\r\n        // Form validation rules\r\n        this.form = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            description: ['', Validators.required]\r\n            // employeeCount is usually managed by the backend or calculated, not directly edited here\r\n        });\r\n\r\n        if (!this.isAddMode && this.id) {\r\n            this.loading = true;\r\n            this.departmentService.getById(this.id)\r\n                .pipe(first())\r\n                .subscribe({\r\n                    next: (department) => {\r\n                        this.departmentData = department;\r\n                        this.form.patchValue(department); // Populate form with department data\r\n                        this.loading = false;\r\n                    },\r\n                    error: (err: HttpErrorResponse) => {\r\n                        this.alertService.error(err.error?.message || err.message || 'Failed to load department');\r\n                        this.loading = false;\r\n                        // Optionally navigate back if department not found\r\n                        if (err.status === 404) {\r\n                            this.router.navigate(['/admin/departments']);\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    // Convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() { // Renamed from save() to match form submission conventions\r\n        this.submitted = true;\r\n        this.alertService.clear();\r\n\r\n        // Stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        if (this.loading) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        if (this.isAddMode) {\r\n            this.createDepartment();\r\n        } else if (this.id) { // Ensure id exists for update\r\n            this.updateDepartment();\r\n        }\r\n    }\r\n\r\n    private createDepartment() {\r\n        this.departmentService.create(this.form.value) // Pass form value\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Department created successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['/admin/departments'], { relativeTo: this.route.parent }); // Navigate to departments list\r\n                },\r\n                error: (err: HttpErrorResponse) => {\r\n                    this.alertService.error(err.error?.message || err.message || 'Failed to create department');\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    private updateDepartment() {\r\n        if (!this.id) return; // Should not happen if isAddMode is false\r\n\r\n        this.departmentService.update(this.id, this.form.value) // Pass form value\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Department updated successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['/admin/departments'], { relativeTo: this.route.parent }); // Navigate to departments list\r\n                },\r\n                error: (err: HttpErrorResponse) => {\r\n                    this.alertService.error(err.error?.message || err.message || 'Failed to update department');\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    onCancel() { // Renamed from cancel()\r\n        // Navigate back to the departments list\r\n        // Adjust the path based on your admin routing structure\r\n        if (this.isAddMode) {\r\n            this.router.navigate(['../'], { relativeTo: this.route }); // Go up one level from /add\r\n        } else {\r\n            this.router.navigate(['../../'], { relativeTo: this.route }); // Go up two levels from /edit/:id\r\n        }\r\n        // Or simpler:\r\n        // this.router.navigate(['/admin/departments']);\r\n    }\r\n}","<div class=\"card\">\r\n    <div class=\"card-header\">{{id ? 'Edit' : 'Add'}} Department</div>\r\n    <div class=\"card-body\">\r\n        <div class=\"alert alert-danger\" *ngIf=\"errorMessage\">{{errorMessage}}</div>\r\n        \r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Name</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"department.name\">\r\n        </div>\r\n        \r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Description</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"department.description\">\r\n        </div>\r\n        \r\n        <div class=\"text-center\">\r\n            <button class=\"btn btn-primary me-2\" (click)=\"save()\">Save</button>\r\n            <button class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\r\n        </div>\r\n    </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}