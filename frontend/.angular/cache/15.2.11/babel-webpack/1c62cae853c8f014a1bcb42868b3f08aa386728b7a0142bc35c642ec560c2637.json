{"ast":null,"code":"import { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let WorkflowService = /*#__PURE__*/(() => {\n  class WorkflowService {\n    constructor(http) {\n      this.http = http;\n    }\n    getAll() {\n      return this.http.get(`${environment.apiUrl}/workflows`);\n    }\n    getById(id) {\n      return this.http.get(`${environment.apiUrl}/workflows/${id}`);\n    }\n    getByEmployeeId(employeeId) {\n      return this.http.get(`${environment.apiUrl}/workflows/employee/${employeeId}`);\n    }\n    getByRequestId(requestId) {\n      return this.http.get(`${environment.apiUrl}/workflows/request/${requestId}`);\n    }\n    create(workflow) {\n      // Check if details is an object and stringify it before sending to the backend\n      if (workflow && workflow.details && typeof workflow.details === 'object') {\n        const workflowCopy = Object.assign({}, workflow);\n        workflowCopy.details = JSON.stringify(workflow.details);\n        return this.http.post(`${environment.apiUrl}/workflows`, workflowCopy);\n      }\n      return this.http.post(`${environment.apiUrl}/workflows`, workflow);\n    }\n    update(id, params) {\n      return this.http.put(`${environment.apiUrl}/workflows/${id}`, params);\n    }\n    changeStatus(id, status, comments = '') {\n      return this.http.put(`${environment.apiUrl}/workflows/${id}/status`, {\n        status,\n        comments\n      });\n    }\n    // New method to update both workflow and request status\n    updateWorkflowAndRequestStatus(workflowId, status, requestId, comments = '') {\n      // Convert requestId to a number if it's a string\n      let numericRequestId = null;\n      if (requestId) {\n        numericRequestId = typeof requestId === 'string' ? parseInt(requestId) : requestId;\n      }\n      // First determine if we're using the real backend or fake backend\n      // Check if useFakeBackend property exists, default to false if not\n      const useFakeBackend = environment.useFakeBackend;\n      const isRealBackend = useFakeBackend === undefined ? true : !useFakeBackend;\n      if (isRealBackend) {\n        // Real backend implementation - use the status endpoint which now handles the request update\n        return this.http.put(`${environment.apiUrl}/workflows/${workflowId}/status`, {\n          status,\n          comments,\n          requestId: numericRequestId // Send requestId to help the backend find the related request\n        });\n      } else {\n        // Fake backend implementation - use the special fields it understands\n        return this.http.put(`${environment.apiUrl}/workflows/${workflowId}`, {\n          status,\n          updateRequest: true,\n          requestId: numericRequestId // Include requestId if provided\n        });\n      }\n    }\n\n    delete(id) {\n      return this.http.delete(`${environment.apiUrl}/workflows/${id}`);\n    }\n    deleteItem(itemId) {\n      return this.http.delete(`${environment.apiUrl}/workflows/items/${itemId}`);\n    }\n  }\n  WorkflowService.ɵfac = function WorkflowService_Factory(t) {\n    return new (t || WorkflowService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  WorkflowService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WorkflowService,\n    factory: WorkflowService.ɵfac,\n    providedIn: 'root'\n  });\n  return WorkflowService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}