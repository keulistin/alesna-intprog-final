{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport { WorkflowStatus } from '@app/_models/workflow';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"confirmModal\"];\nfunction ListWorkflowComponent_th_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1, \"Actions\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_tr_16_td_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\")(1, \"select\", 7);\n    i0.ɵɵlistener(\"ngModelChange\", function ListWorkflowComponent_tr_16_td_8_Template_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const workflow_r2 = i0.ɵɵnextContext().$implicit;\n      return i0.ɵɵresetView(workflow_r2.status = $event);\n    })(\"change\", function ListWorkflowComponent_tr_16_td_8_Template_select_change_1_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const workflow_r2 = i0.ɵɵnextContext().$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateStatus(workflow_r2));\n    });\n    i0.ɵɵelementStart(2, \"option\");\n    i0.ɵɵtext(3, \"Pending\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"option\");\n    i0.ɵɵtext(5, \"Approved\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"option\");\n    i0.ɵɵtext(7, \"Rejected\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const workflow_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", workflow_r2.status);\n  }\n}\nfunction ListWorkflowComponent_tr_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"json\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, ListWorkflowComponent_tr_16_td_8_Template, 8, 1, \"td\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const workflow_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_3_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(workflow_r2.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 4, workflow_r2.details));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(workflow_r2.status);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx_r1.account()) == null ? null : tmp_3_0.role) === \"Admin\");\n  }\n}\nexport let ListWorkflowComponent = /*#__PURE__*/(() => {\n  class ListWorkflowComponent {\n    constructor(workflowService, alertService, accountService, employeeService, route) {\n      var _a;\n      this.workflowService = workflowService;\n      this.alertService = alertService;\n      this.accountService = accountService;\n      this.employeeService = employeeService;\n      this.route = route;\n      this.workflows = null;\n      this.loading = false;\n      this.isAdmin = false;\n      this.employeeId = null;\n      this.displayEmployeeId = null;\n      this.employeeFullName = null;\n      this.confirmMessage = '';\n      this.notFound = false;\n      this.pendingStatusChange = null;\n      // Make enum available in template\n      this.WorkflowStatus = WorkflowStatus;\n      this.isAdmin = ((_a = this.accountService.accountValue) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      // Get employeeId from query params\n      this.route.queryParams.subscribe(params => {\n        this.employeeId = params['employeeid'];\n        if (this.employeeId) {\n          this.loadEmployee();\n          this.loadWorkflows();\n        } else {\n          this.notFound = false;\n          this.loadWorkflows();\n        }\n      });\n    }\n    ngOnInit() {\n      this.loadWorkflows();\n    }\n    get currentAccount() {\n      return this.accountService.accountValue;\n    }\n    loadEmployee() {\n      if (!this.employeeId) return;\n      this.employeeService.getById(this.employeeId).pipe(first()).subscribe({\n        next: employee => {\n          if (employee && employee.account) {\n            this.displayEmployeeId = employee.employeeId;\n            const firstName = employee.account.firstName.charAt(0).toUpperCase() + employee.account.firstName.slice(1).toLowerCase();\n            const lastName = employee.account.lastName.charAt(0).toUpperCase() + employee.account.lastName.slice(1).toLowerCase();\n            this.employeeFullName = `${firstName} ${lastName}`;\n          }\n        },\n        error: error => {\n          this.alertService.error(error);\n        }\n      });\n    }\n    loadWorkflows() {\n      this.loading = true;\n      let request;\n      if (this.employeeId) {\n        request = this.workflowService.getByEmployeeId(this.employeeId);\n      } else {\n        request = this.workflowService.getAll();\n      }\n      request.pipe(first()).subscribe({\n        next: workflows => {\n          // Sort workflows by date in descending order\n          this.workflows = workflows.sort((a, b) => {\n            const dateA = new Date(a.datetimecreated).getTime();\n            const dateB = new Date(b.datetimecreated).getTime();\n            return dateB - dateA;\n          });\n          this.loading = false;\n          this.notFound = false;\n        },\n        error: error => {\n          if (error.status === 404) {\n            this.notFound = true;\n          }\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    openStatusChangeModal(id, status) {\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      this.pendingStatusChange = {\n        id,\n        status\n      };\n      this.confirmMessage = `Are you sure you want to mark this workflow ${status === WorkflowStatus.ForReviewing ? 'for review' : 'as completed'}?`;\n      this.confirmModal.show();\n    }\n    onStatusChangeConfirmed() {\n      if (!this.pendingStatusChange) return;\n      const {\n        id,\n        status\n      } = this.pendingStatusChange;\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      workflow.isUpdating = true;\n      this.workflowService.changeStatus(id, status).pipe(first()).subscribe({\n        next: () => {\n          workflow.status = status;\n          workflow.isUpdating = false;\n          this.alertService.success('Workflow status updated successfully');\n        },\n        error: error => {\n          this.alertService.error(error);\n          workflow.isUpdating = false;\n        }\n      });\n      this.pendingStatusChange = null;\n    }\n    deleteWorkflow(id) {\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      if (confirm('Are you sure you want to delete this workflow?')) {\n        workflow.isDeleting = true;\n        this.workflowService.delete(id).pipe(first()).subscribe({\n          next: () => {\n            this.workflows = this.workflows.filter(x => x.id !== id);\n            this.alertService.success('Workflow deleted successfully');\n          },\n          error: error => {\n            this.alertService.error(error);\n            workflow.isDeleting = false;\n          }\n        });\n      }\n    }\n  }\n  ListWorkflowComponent.ɵfac = function ListWorkflowComponent_Factory(t) {\n    return new (t || ListWorkflowComponent)(i0.ɵɵdirectiveInject(i1.WorkflowService), i0.ɵɵdirectiveInject(i1.AlertService), i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i1.EmployeeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  ListWorkflowComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListWorkflowComponent,\n    selectors: [[\"ng-component\"]],\n    viewQuery: function ListWorkflowComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.confirmModal = _t.first);\n      }\n    },\n    decls: 17,\n    vars: 3,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [1, \"table-responsive\"], [1, \"table\", \"table-striped\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"form-select\", \"d-inline-block\", \"w-auto\", 3, \"ngModel\", \"ngModelChange\", \"change\"]],\n    template: function ListWorkflowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"table\", 4)(6, \"thead\")(7, \"tr\")(8, \"th\");\n        i0.ɵɵtext(9, \"Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"th\");\n        i0.ɵɵtext(11, \"Details\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"th\");\n        i0.ɵɵtext(13, \"Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, ListWorkflowComponent_th_14_Template, 2, 0, \"th\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"tbody\");\n        i0.ɵɵtemplate(16, ListWorkflowComponent_tr_16_Template, 9, 6, \"tr\", 6);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Workflows for Employee \", ctx.employeeId, \"\");\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngIf\", (ctx.currentAccount == null ? null : ctx.currentAccount.role) === ctx.Admin);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.workflows);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.SelectControlValueAccessor, i4.NgControlStatus, i3.JsonPipe],\n    encapsulation: 2\n  });\n  return ListWorkflowComponent;\n})();","map":{"version":3,"mappings":"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","names":["first","Role","WorkflowStatus","i0","ListWorkflowComponent","constructor","workflowService","alertService","accountService","employeeService","route","isAdmin","accountValue","role","Admin","queryParams","subscribe","params","employeeId","loadEmployee","loadWorkflows","notFound","ngOnInit","currentAccount","getById","pipe","next","employee","account","displayEmployeeId","firstName","charAt","toUpperCase","slice","toLowerCase","lastName","employeeFullName","error","loading","request","getByEmployeeId","getAll","workflows","sort","a","b","dateA","Date","datetimecreated","getTime","dateB","status","openStatusChangeModal","id","workflow","find","x","pendingStatusChange","confirmMessage","ForReviewing","confirmModal","show","onStatusChangeConfirmed","isUpdating","changeStatus","success","deleteWorkflow","confirm","isDeleting","delete","filter","selectors","viewQuery"],"sourceRoot":"","sources":["E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\workflows\\list.component.ts","E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\workflows\\list.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { WorkflowService, AlertService, AccountService, EmployeeService } from '@app/_services';\r\nimport { Account, Role } from '@app/_models';\r\nimport { WorkflowStatus } from '@app/_models/workflow';\r\nimport { ConfirmModalComponent } from './confirm-modal.component';\r\n\r\n@Component({ templateUrl: 'list.component.html' })\r\nexport class ListWorkflowComponent implements OnInit {\r\n  @ViewChild('confirmModal') confirmModal!: ConfirmModalComponent;\r\n  workflows = null;\r\n  loading = false;\r\n  isAdmin = false;\r\n  employeeId: string | null = null;\r\n  displayEmployeeId: string | null = null;\r\n  employeeFullName: string | null = null;\r\n  confirmMessage: string = '';\r\n  notFound = false;\r\n  private pendingStatusChange: { id: string; status: WorkflowStatus } | null = null;\r\n\r\n  // Make enum available in template\r\n  WorkflowStatus = WorkflowStatus;\r\n\r\n  constructor(\r\n    private workflowService: WorkflowService,\r\n    private alertService: AlertService,\r\n    private accountService: AccountService,\r\n    private employeeService: EmployeeService,\r\n    private route: ActivatedRoute\r\n  ) {\r\n    this.isAdmin = this.accountService.accountValue?.role === Role.Admin;\r\n\r\n    // Get employeeId from query params\r\n    this.route.queryParams.subscribe(params => {\r\n      this.employeeId = params['employeeid'];\r\n      if (this.employeeId) {\r\n        this.loadEmployee();\r\n        this.loadWorkflows();\r\n      } else {\r\n        this.notFound = false;\r\n        this.loadWorkflows();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadWorkflows();\r\n  }\r\n\r\n  public get currentAccount(): Account | null {\r\n    return this.accountService.accountValue;\r\n  }\r\n\r\n  private loadEmployee() {\r\n    if (!this.employeeId) return;\r\n\r\n    this.employeeService.getById(this.employeeId)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (employee) => {\r\n          if (employee && employee.account) {\r\n            this.displayEmployeeId = employee.employeeId;\r\n            const firstName = employee.account.firstName.charAt(0).toUpperCase() + employee.account.firstName.slice(1).toLowerCase();\r\n            const lastName = employee.account.lastName.charAt(0).toUpperCase() + employee.account.lastName.slice(1).toLowerCase();\r\n            this.employeeFullName = `${firstName} ${lastName}`;\r\n          }\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n        }\r\n      });\r\n  }\r\n\r\n  private loadWorkflows() {\r\n    this.loading = true;\r\n    let request;\r\n\r\n    if (this.employeeId) {\r\n      request = this.workflowService.getByEmployeeId(this.employeeId);\r\n    } else {\r\n      request = this.workflowService.getAll();\r\n    }\r\n\r\n    request.pipe(first())\r\n      .subscribe({\r\n        next: (workflows: any) => {\r\n          // Sort workflows by date in descending order\r\n          this.workflows = workflows.sort((a: any, b: any) => {\r\n            const dateA = new Date(a.datetimecreated).getTime();\r\n            const dateB = new Date(b.datetimecreated).getTime();\r\n            return dateB - dateA;\r\n          });\r\n          this.loading = false;\r\n          this.notFound = false;\r\n        },\r\n        error: error => {\r\n          if (error.status === 404) {\r\n            this.notFound = true;\r\n          }\r\n          this.alertService.error(error);\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  openStatusChangeModal(id: string, status: WorkflowStatus) {\r\n    const workflow = this.workflows.find(x => x.id === id);\r\n    if (!workflow) return;\r\n\r\n    this.pendingStatusChange = { id, status };\r\n    this.confirmMessage = `Are you sure you want to mark this workflow ${status === WorkflowStatus.ForReviewing ? 'for review' : 'as completed'}?`;\r\n    this.confirmModal.show();\r\n  }\r\n\r\n  onStatusChangeConfirmed() {\r\n    if (!this.pendingStatusChange) return;\r\n\r\n    const { id, status } = this.pendingStatusChange;\r\n    const workflow = this.workflows.find(x => x.id === id);\r\n    if (!workflow) return;\r\n\r\n    workflow.isUpdating = true;\r\n    this.workflowService.changeStatus(id, status)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: () => {\r\n          workflow.status = status;\r\n          workflow.isUpdating = false;\r\n          this.alertService.success('Workflow status updated successfully');\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n          workflow.isUpdating = false;\r\n        }\r\n      });\r\n\r\n    this.pendingStatusChange = null;\r\n  }\r\n\r\n  deleteWorkflow(id: string) {\r\n    const workflow = this.workflows.find(x => x.id === id);\r\n    if (!workflow) return;\r\n\r\n    if (confirm('Are you sure you want to delete this workflow?')) {\r\n      workflow.isDeleting = true;\r\n      this.workflowService.delete(id)\r\n        .pipe(first())\r\n        .subscribe({\r\n          next: () => {\r\n            this.workflows = this.workflows.filter(x => x.id !== id);\r\n            this.alertService.success('Workflow deleted successfully');\r\n          },\r\n          error: error => {\r\n            this.alertService.error(error);\r\n            workflow.isDeleting = false;\r\n          }\r\n        });\r\n    }\r\n  }\r\n} ","<div class=\"card\">\r\n  <div class=\"card-header\">Workflows for Employee {{employeeId}}</div>\r\n  <div class=\"card-body\">\r\n    <div class=\"table-responsive\">\r\n      <table class=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Type</th>\r\n            <th>Details</th>\r\n            <th>Status</th>\r\n            <th *ngIf=\"currentAccount?.role === Admin\">Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let workflow of workflows\">\r\n            <td>{{workflow.type}}</td>\r\n            <td>{{workflow.details | json}}</td>\r\n            <td>{{workflow.status}}</td>\r\n            <td *ngIf=\"account()?.role === 'Admin'\">\r\n              <select class=\"form-select d-inline-block w-auto\" [(ngModel)]=\"workflow.status\"\r\n                (change)=\"updateStatus(workflow)\">\r\n                <option>Pending</option>\r\n                <option>Approved</option>\r\n                <option>Rejected</option>\r\n              </select>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}