{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction TransferComponent_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const dept_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", dept_r1.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(dept_r1.name);\n  }\n}\nexport let TransferComponent = /*#__PURE__*/(() => {\n  class TransferComponent {\n    constructor(route, router, accountService) {\n      this.route = route;\n      this.router = router;\n      this.accountService = accountService;\n      this.departments = [];\n      this.departmentId = null;\n    }\n    ngOnInit() {\n      const id = this.route.snapshot.params['id'];\n      // Load employee details\n      this.accountService.getEmployeeById(id).pipe(first()).subscribe(employee => {\n        var _a;\n        this.employee = employee;\n        this.departmentId = (_a = employee.department) === null || _a === void 0 ? void 0 : _a.id; // Set current department\n      });\n      // Load all departments\n      this.accountService.getAllDepartments().pipe(first()).subscribe(departments => this.departments = departments);\n    }\n    transfer() {\n      if (!this.departmentId || !this.employee || this.employee.id === undefined) {\n        console.error('Employee data or department ID is missing for transfer.');\n        this.alertService.error('Cannot perform transfer: employee data is missing.'); // Add AlertService if not already used\n        return;\n      }\n      // Ensure departmentId is a number if your service expects it\n      const numericDepartmentId = typeof this.departmentId === 'string' ? parseInt(this.departmentId, 10) : this.departmentId;\n      if (isNaN(numericDepartmentId)) {\n        this.alertService.error('Invalid department selected.');\n        return;\n      }\n      this.accountService.updateEmployee(this.employee.id, {\n        departmentId: this.departmentId\n      }).pipe(first()).subscribe(() => {\n        this.router.navigate(['/employees'], {\n          state: {\n            message: 'Employee transferred successfully'\n          }\n        });\n      });\n    }\n    cancel() {\n      this.router.navigate(['/employees']);\n    }\n  }\n  TransferComponent.ɵfac = function TransferComponent_Factory(t) {\n    return new (t || TransferComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AccountService));\n  };\n  TransferComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TransferComponent,\n    selectors: [[\"app-employee-transfer\"]],\n    decls: 19,\n    vars: 3,\n    consts: [[\"tabindex\", \"-1\", 1, \"modal\", \"fade\", \"show\", \"d-block\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\"], [\"type\", \"button\", 1, \"btn-close\", 3, \"click\"], [1, \"modal-body\"], [1, \"mb-3\"], [1, \"form-label\"], [1, \"form-select\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"modal-footer\"], [1, \"btn\", \"btn-warning\", 3, \"click\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"modal-backdrop\", \"fade\", \"show\"], [3, \"value\"]],\n    template: function TransferComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h5\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function TransferComponent_Template_button_click_6_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"div\", 7)(9, \"label\", 8);\n        i0.ɵɵtext(10, \"Department\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"select\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function TransferComponent_Template_select_ngModelChange_11_listener($event) {\n          return ctx.departmentId = $event;\n        });\n        i0.ɵɵtemplate(12, TransferComponent_option_12_Template, 2, 2, \"option\", 10);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"div\", 11)(14, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function TransferComponent_Template_button_click_14_listener() {\n          return ctx.transfer();\n        });\n        i0.ɵɵtext(15, \"Transfer\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function TransferComponent_Template_button_click_16_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵtext(17, \"Cancel\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelement(18, \"div\", 14);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\"Transfer Employee: \", ctx.employee == null ? null : ctx.employee.employeeId, \"\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.departmentId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.departments);\n      }\n    },\n    dependencies: [i3.NgForOf, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgModel],\n    encapsulation: 2\n  });\n  return TransferComponent;\n})();","map":{"version":3,"mappings":"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","names":["first","i0","TransferComponent","constructor","route","router","accountService","ngOnInit","id","snapshot","params","getEmployeeById","pipe","subscribe","employee","departmentId","department","getAllDepartments","departments","transfer","undefined","console","error","alertService","numericDepartmentId","parseInt","isNaN","updateEmployee","navigate","state","message","cancel","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\employees\\transfer.component.ts","E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\employees\\transfer.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AccountService } from '@app/_services';\r\nimport { first } from 'rxjs/operators';\r\nimport { AlertService } from '@app/_services';\r\n\r\n\r\n@Component({\r\n  selector: 'app-employee-transfer',\r\n  templateUrl: './transfer.component.html'\r\n})\r\nexport class TransferComponent implements OnInit {\r\n  employee: any;\r\n  departments: any[] = [];\r\n  departmentId: number | null = null;\r\n  alertService: any;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private accountService: AccountService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const id = this.route.snapshot.params['id'];\r\n\r\n    // Load employee details\r\n    this.accountService.getEmployeeById(id)\r\n      .pipe(first())\r\n      .subscribe(employee => {\r\n        this.employee = employee;\r\n        this.departmentId = employee.department?.id; // Set current department\r\n      });\r\n\r\n    // Load all departments\r\n    this.accountService.getAllDepartments()\r\n      .pipe(first())\r\n      .subscribe(departments => this.departments = departments);\r\n  }\r\n\r\n  transfer() {\r\n    if (!this.departmentId || !this.employee || this.employee.id === undefined) {\r\n      console.error('Employee data or department ID is missing for transfer.');\r\n      this.alertService.error('Cannot perform transfer: employee data is missing.'); // Add AlertService if not already used\r\n      return;\r\n    }\r\n\r\n    // Ensure departmentId is a number if your service expects it\r\n    const numericDepartmentId = typeof this.departmentId === 'string' ? parseInt(this.departmentId, 10) : this.departmentId;\r\n    if (isNaN(numericDepartmentId)) {\r\n      this.alertService.error('Invalid department selected.');\r\n      return;\r\n    }\r\n\r\n    this.accountService.updateEmployee(this.employee.id, {\r\n      departmentId: this.departmentId\r\n    })\r\n      .pipe(first())\r\n      .subscribe(() => {\r\n        this.router.navigate(['/employees'], {\r\n          state: { message: 'Employee transferred successfully' }\r\n        });\r\n      });\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate(['/employees']);\r\n  }\r\n}","<div class=\"modal fade show d-block\" tabindex=\"-1\">\r\n    <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h5 class=\"modal-title\">Transfer Employee: {{employee?.employeeId}}</h5>\r\n                <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\r\n            </div>\r\n\r\n            <div class=\"modal-body\">\r\n                <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Department</label>\r\n                    <select class=\"form-select\" [(ngModel)]=\"departmentId\">\r\n                        <option *ngFor=\"let dept of departments\" [value]=\"dept.id\">{{dept.name}}</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"modal-footer\">\r\n                <button class=\"btn btn-warning\" (click)=\"transfer()\">Transfer</button>\r\n                <button class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"modal-backdrop fade show\"></div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}