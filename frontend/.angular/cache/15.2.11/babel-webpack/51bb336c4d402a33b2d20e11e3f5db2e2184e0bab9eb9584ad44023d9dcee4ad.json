{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, ViewEncapsulation } from '@angular/core';\nlet ModalComponent = class ModalComponent {\n  constructor(modalService, el, renderer) {\n    this.modalService = modalService;\n    this.el = el;\n    this.renderer = renderer;\n    this.element = el.nativeElement;\n  }\n  ngOnInit() {\n    // ensure id attribute exists\n    if (!this.id) {\n      console.error('modal must have an id');\n      return;\n    }\n    // move element to bottom of page (just before </body>) so it can be displayed above everything else\n    document.body.appendChild(this.element);\n    // close modal on background click\n    this.element.addEventListener('click', el => {\n      if (el.target.className === 'modal') {\n        this.close();\n      }\n    });\n    // add self (this modal instance) to the modal service so it's accessible from controllers\n    this.modalService.add({\n      id: this.id,\n      open: data => this.open(data),\n      close: () => this.close()\n    });\n  }\n  // remove self from modal service when component is destroyed\n  ngOnDestroy() {\n    this.modalService.remove(this.id);\n    this.element.remove();\n  }\n  // open modal\n  open(data) {\n    console.log('Opening modal with ID:', this.id);\n    this.renderer.setStyle(this.element, 'display', 'block');\n    this.renderer.addClass(this.element, 'modal-open');\n    document.body.classList.add('modal-open');\n  }\n  // close modal\n  close() {\n    console.log('Closing modal with ID:', this.id);\n    this.renderer.setStyle(this.element, 'display', 'none');\n    this.renderer.removeClass(this.element, 'modal-open');\n    document.body.classList.remove('modal-open');\n  }\n};\n__decorate([Input()], ModalComponent.prototype, \"id\", void 0);\nModalComponent = __decorate([Component({\n  selector: 'app-modal',\n  template: `\n        <div class=\"modal\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </div>\n        <div class=\"modal-backdrop\"></div>\n    `,\n  styleUrls: ['modal.component.css'],\n  encapsulation: ViewEncapsulation.None\n})], ModalComponent);\nexport { ModalComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAcC,KAAK,EAAqBC,iBAAiB,QAAmB,eAAe;AAmBtG,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAIvBC,YACYC,YAA0B,EAC1BC,EAAc,EACdC,QAAmB;IAFnB,iBAAY,GAAZF,YAAY;IACZ,OAAE,GAAFC,EAAE;IACF,aAAQ,GAARC,QAAQ;IAEhB,IAAI,CAACC,OAAO,GAAGF,EAAE,CAACG,aAAa;EACnC;EAEAC,QAAQ;IACJ;IACA,IAAI,CAAC,IAAI,CAACC,EAAE,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;MACtC;;IAGJ;IACAC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAAC,IAAI,CAACR,OAAO,CAAC;IAEvC;IACA,IAAI,CAACA,OAAO,CAACS,gBAAgB,CAAC,OAAO,EAAGX,EAAO,IAAI;MAC/C,IAAIA,EAAE,CAACY,MAAM,CAACC,SAAS,KAAK,OAAO,EAAE;QACjC,IAAI,CAACC,KAAK,EAAE;;IAEpB,CAAC,CAAC;IAEF;IACA,IAAI,CAACf,YAAY,CAACgB,GAAG,CAAC;MAClBV,EAAE,EAAE,IAAI,CAACA,EAAE;MACXW,IAAI,EAAGC,IAAI,IAAK,IAAI,CAACD,IAAI,CAACC,IAAI,CAAC;MAC/BH,KAAK,EAAE,MAAM,IAAI,CAACA,KAAK;KAC1B,CAAC;EACN;EAEA;EACAI,WAAW;IACP,IAAI,CAACnB,YAAY,CAACoB,MAAM,CAAC,IAAI,CAACd,EAAE,CAAC;IACjC,IAAI,CAACH,OAAO,CAACiB,MAAM,EAAE;EACzB;EAEA;EACAH,IAAI,CAACC,IAAU;IACXX,OAAO,CAACc,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAACf,EAAE,CAAC;IAC9C,IAAI,CAACJ,QAAQ,CAACoB,QAAQ,CAAC,IAAI,CAACnB,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC;IACxD,IAAI,CAACD,QAAQ,CAACqB,QAAQ,CAAC,IAAI,CAACpB,OAAO,EAAE,YAAY,CAAC;IAClDM,QAAQ,CAACC,IAAI,CAACc,SAAS,CAACR,GAAG,CAAC,YAAY,CAAC;EAC7C;EAEA;EACAD,KAAK;IACDR,OAAO,CAACc,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAACf,EAAE,CAAC;IAC9C,IAAI,CAACJ,QAAQ,CAACoB,QAAQ,CAAC,IAAI,CAACnB,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC;IACvD,IAAI,CAACD,QAAQ,CAACuB,WAAW,CAAC,IAAI,CAACtB,OAAO,EAAE,YAAY,CAAC;IACrDM,QAAQ,CAACC,IAAI,CAACc,SAAS,CAACJ,MAAM,CAAC,YAAY,CAAC;EAChD;CACH;AAzDYM,YAAR9B,KAAK,EAAE,0CAAY;AADXE,cAAc,eAf1BH,SAAS,CAAC;EACPgC,QAAQ,EAAE,WAAW;EACrBC,QAAQ,EAAE;;;;;;;;;KAST;EACDC,SAAS,EAAE,CAAC,qBAAqB,CAAC;EAClCC,aAAa,EAAEjC,iBAAiB,CAACkC;CACpC,CAAC,GACWjC,cAAc,CA0D1B;SA1DYA,cAAc","names":["Component","Input","ViewEncapsulation","ModalComponent","constructor","modalService","el","renderer","element","nativeElement","ngOnInit","id","console","error","document","body","appendChild","addEventListener","target","className","close","add","open","data","ngOnDestroy","remove","log","setStyle","addClass","classList","removeClass","__decorate","selector","template","styleUrls","encapsulation","None"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\_components\\modal.component.ts"],"sourcesContent":["import { Component, ElementRef, Input, OnInit, OnDestroy, ViewEncapsulation, Renderer2 } from '@angular/core';\r\n\r\nimport { ModalService } from '@app/_services';\r\n\r\n@Component({\r\n    selector: 'app-modal',\r\n    template: `\r\n        <div class=\"modal\">\r\n            <div class=\"modal-dialog\">\r\n                <div class=\"modal-content\">\r\n                    <ng-content></ng-content>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-backdrop\"></div>\r\n    `,\r\n    styleUrls: ['modal.component.css'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ModalComponent implements OnInit, OnDestroy {\r\n    @Input() id: string;\r\n    private element: any;\r\n\r\n    constructor(\r\n        private modalService: ModalService, \r\n        private el: ElementRef,\r\n        private renderer: Renderer2\r\n    ) {\r\n        this.element = el.nativeElement;\r\n    }\r\n\r\n    ngOnInit() {\r\n        // ensure id attribute exists\r\n        if (!this.id) {\r\n            console.error('modal must have an id');\r\n            return;\r\n        }\r\n\r\n        // move element to bottom of page (just before </body>) so it can be displayed above everything else\r\n        document.body.appendChild(this.element);\r\n\r\n        // close modal on background click\r\n        this.element.addEventListener('click', (el: any) => {\r\n            if (el.target.className === 'modal') {\r\n                this.close();\r\n            }\r\n        });\r\n\r\n        // add self (this modal instance) to the modal service so it's accessible from controllers\r\n        this.modalService.add({\r\n            id: this.id,\r\n            open: (data) => this.open(data),\r\n            close: () => this.close()\r\n        });\r\n    }\r\n\r\n    // remove self from modal service when component is destroyed\r\n    ngOnDestroy() {\r\n        this.modalService.remove(this.id);\r\n        this.element.remove();\r\n    }\r\n\r\n    // open modal\r\n    open(data?: any): void {\r\n        console.log('Opening modal with ID:', this.id);\r\n        this.renderer.setStyle(this.element, 'display', 'block');\r\n        this.renderer.addClass(this.element, 'modal-open');\r\n        document.body.classList.add('modal-open');\r\n    }\r\n\r\n    // close modal\r\n    close(): void {\r\n        console.log('Closing modal with ID:', this.id);\r\n        this.renderer.setStyle(this.element, 'display', 'none');\r\n        this.renderer.removeClass(this.element, 'modal-open');\r\n        document.body.classList.remove('modal-open');\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}