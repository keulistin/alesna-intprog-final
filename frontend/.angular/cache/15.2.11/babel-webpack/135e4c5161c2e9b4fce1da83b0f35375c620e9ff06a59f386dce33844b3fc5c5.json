{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nfunction WorkflowsComponent_th_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1, \"Actions\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction WorkflowsComponent_tr_16_td_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\")(1, \"select\", 7);\n    i0.ɵɵlistener(\"ngModelChange\", function WorkflowsComponent_tr_16_td_8_Template_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const workflow_r2 = i0.ɵɵnextContext().$implicit;\n      return i0.ɵɵresetView(workflow_r2.status = $event);\n    })(\"change\", function WorkflowsComponent_tr_16_td_8_Template_select_change_1_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const workflow_r2 = i0.ɵɵnextContext().$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateStatus(workflow_r2));\n    });\n    i0.ɵɵelementStart(2, \"option\");\n    i0.ɵɵtext(3, \"Pending\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"option\");\n    i0.ɵɵtext(5, \"Approved\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"option\");\n    i0.ɵɵtext(7, \"Rejected\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const workflow_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", workflow_r2.status);\n  }\n}\nfunction WorkflowsComponent_tr_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"json\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, WorkflowsComponent_tr_16_td_8_Template, 8, 1, \"td\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const workflow_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_3_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(workflow_r2.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 4, workflow_r2.details));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(workflow_r2.status);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx_r1.account()) == null ? null : tmp_3_0.role) === \"Admin\");\n  }\n}\nexport let WorkflowsComponent = /*#__PURE__*/(() => {\n  class WorkflowsComponent {\n    constructor(route, accountService) {\n      this.route = route;\n      this.accountService = accountService;\n      this.workflows = [];\n      this.account = this.accountService.accountValue;\n    }\n    ngOnInit() {\n      this.employeeId = this.route.snapshot.params['id'];\n      this.loadWorkflows();\n    }\n    loadWorkflows() {\n      this.accountService.getEmployeeWorkflows(this.employeeId).pipe(first()).subscribe(workflows => {\n        this.workflows = workflows;\n        // Initialize status for each workflow if not present\n        this.workflows.forEach(w => w.status = w.status || 'Pending');\n      }, error => console.error('Failed to load workflows', error));\n    }\n    updateStatus(workflow) {\n      if (!workflow.id || !workflow.status) return;\n      this.accountService.updateWorkflowStatus(workflow.id, {\n        status: workflow.status\n      }).pipe(first()).subscribe(() => {\n        // Optional: Show success message\n        console.log('Workflow status updated successfully');\n      }, error => {\n        console.error('Failed to update workflow status', error);\n        // Revert the status change in UI if update fails\n        this.loadWorkflows(); // Reload to ensure consistency\n      });\n    }\n  }\n\n  WorkflowsComponent.ɵfac = function WorkflowsComponent_Factory(t) {\n    return new (t || WorkflowsComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.AccountService));\n  };\n  WorkflowsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WorkflowsComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 17,\n    vars: 3,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [1, \"table-responsive\"], [1, \"table\", \"table-striped\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"form-select\", \"d-inline-block\", \"w-auto\", 3, \"ngModel\", \"ngModelChange\", \"change\"]],\n    template: function WorkflowsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"table\", 4)(6, \"thead\")(7, \"tr\")(8, \"th\");\n        i0.ɵɵtext(9, \"Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"th\");\n        i0.ɵɵtext(11, \"Details\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"th\");\n        i0.ɵɵtext(13, \"Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, WorkflowsComponent_th_14_Template, 2, 0, \"th\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"tbody\");\n        i0.ɵɵtemplate(16, WorkflowsComponent_tr_16_Template, 9, 6, \"tr\", 6);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Workflows for Employee \", ctx.employeeId, \"\");\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.account()) == null ? null : tmp_1_0.role) === \"Admin\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.workflows);\n      }\n    },\n    encapsulation: 2\n  });\n  return WorkflowsComponent;\n})();","map":{"version":3,"mappings":"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","names":["first","i0","WorkflowsComponent","constructor","route","accountService","accountValue","ngOnInit","employeeId","snapshot","params","loadWorkflows","getEmployeeWorkflows","pipe","subscribe","workflows","forEach","w","status","error","console","updateStatus","workflow","id","updateWorkflowStatus","log","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\workflows\\list.component.ts","E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\workflows\\list.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AccountService } from '@app/_services';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n  templateUrl: 'list.component.html'\r\n})\r\nexport class WorkflowsComponent implements OnInit {\r\n  employeeId: string;\r\n  workflows: any[] = [];\r\n  account = this.accountService.accountValue;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private accountService: AccountService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.employeeId = this.route.snapshot.params['id'];\r\n    this.loadWorkflows();\r\n  }\r\n\r\n  private loadWorkflows() {\r\n    this.accountService.getEmployeeWorkflows(this.employeeId)\r\n      .pipe(first())\r\n      .subscribe(\r\n        workflows => {\r\n          this.workflows = workflows;\r\n          // Initialize status for each workflow if not present\r\n          this.workflows.forEach(w => w.status = w.status || 'Pending');\r\n        },\r\n        error => console.error('Failed to load workflows', error)\r\n      );\r\n  }\r\n\r\n  updateStatus(workflow: any) {\r\n    if (!workflow.id || !workflow.status) return;\r\n\r\n    this.accountService.updateWorkflowStatus(workflow.id, { status: workflow.status })\r\n      .pipe(first())\r\n      .subscribe(\r\n        () => {\r\n          // Optional: Show success message\r\n          console.log('Workflow status updated successfully');\r\n        },\r\n        error => {\r\n          console.error('Failed to update workflow status', error);\r\n          // Revert the status change in UI if update fails\r\n          this.loadWorkflows(); // Reload to ensure consistency\r\n        }\r\n      );\r\n  }\r\n}","<div class=\"card\">\r\n  <div class=\"card-header\">Workflows for Employee {{employeeId}}</div>\r\n  <div class=\"card-body\">\r\n    <div class=\"table-responsive\">\r\n      <table class=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Type</th>\r\n            <th>Details</th>\r\n            <th>Status</th>\r\n            <th *ngIf=\"account()?.role === 'Admin'\">Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let workflow of workflows\">\r\n            <td>{{workflow.type}}</td>\r\n            <td>{{workflow.details | json}}</td>\r\n            <td>{{workflow.status}}</td>\r\n            <td *ngIf=\"account()?.role === 'Admin'\">\r\n              <select class=\"form-select d-inline-block w-auto\" [(ngModel)]=\"workflow.status\" (change)=\"updateStatus(workflow)\">\r\n                <option>Pending</option>\r\n                <option>Approved</option>\r\n                <option>Rejected</option>\r\n              </select>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}