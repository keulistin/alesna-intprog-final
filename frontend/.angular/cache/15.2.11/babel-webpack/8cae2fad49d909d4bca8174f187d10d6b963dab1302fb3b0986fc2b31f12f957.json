{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { HttpResponse, HTTP_INTERCEPTORS, HttpErrorResponse // Import HttpErrorResponse\n} from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    // ... add for other entities if needed\n    constructor(alertService) {\n      this.alertService = alertService;\n      // Using class properties for data.\n      // The 'accounts' array from localStorage and its logic are removed in this version\n      // for consistency with the second handleRoute implementation.\n      // If you need the localStorage based account system, this class needs significant rework.\n      this.users = [{\n        id: 1,\n        email: 'admin@example.com',\n        password: 'admin',\n        role: 'Admin',\n        employeeId: 1,\n        status: 'Active',\n        isVerified: true\n      }, {\n        id: 2,\n        email: 'user@example.com',\n        password: 'user',\n        role: 'User',\n        employeeId: 2,\n        status: 'Active',\n        isVerified: true\n      }];\n      this.employees = [{\n        id: 1,\n        employeeId: 'EMP001',\n        userId: 1,\n        position: 'Developer',\n        departmentId: 1,\n        hireDate: '2025-01-01',\n        status: 'Active'\n      }, {\n        id: 2,\n        employeeId: 'EMP002',\n        userId: 2,\n        position: 'Designer',\n        departmentId: 2,\n        hireDate: '2025-02-01',\n        status: 'Active'\n      }];\n      this.departments = [{\n        id: 1,\n        name: 'Engineering',\n        description: 'Software development team',\n        employeeCount: 1\n      }, {\n        id: 2,\n        name: 'Marketing',\n        description: 'Marketing team',\n        employeeCount: 1\n      }];\n      this.workflows = [{\n        id: 1,\n        employeeId: 1,\n        type: 'Onboarding',\n        details: {\n          task: 'Setup workstation'\n        },\n        status: 'Pending'\n      }];\n      this.appRequests = [{\n        id: 1,\n        employeeId: 2,\n        type: 'Equipment',\n        requestItems: [{\n          name: 'Laptop',\n          quantity: 1\n        }],\n        status: 'Pending'\n      }];\n      // ID Generators\n      this.nextUserId = this.users.length > 0 ? Math.max(...this.users.map(u => u.id)) + 1 : 1;\n      this.nextEmployeeId = this.employees.length > 0 ? Math.max(...this.employees.map(e => e.id)) + 1 : 1;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      // The inner function handleRoute and its related functions (authenticate, register etc. using localStorage)\n      // have been removed for clarity as they were not being called by this pipe.\n      // This interceptor now consistently uses the class method this.handleRoute.\n      return of(null).pipe(mergeMap(() => this.handleRoute(url, method, headers, body, next))) // Pass 'next' for passthrough\n      .pipe(materialize()).pipe(delay(500)) // Single delay applied here\n      .pipe(dematerialize());\n    }\n    handleRoute(url, method, headers, body, next) {\n      // --- ACCOUNTS ROUTES (Simplified from your class method, not the localStorage version) ---\n      if (url.endsWith('/accounts/authenticate') && method === 'POST') {\n        const {\n          email,\n          password\n        } = body;\n        const user = this.users.find(u => u.email === email && u.password === password);\n        if (!user) {\n          return throwError(() => new HttpErrorResponse({\n            error: {\n              message: 'Invalid credentials'\n            },\n            status: 400\n          }));\n        }\n        if (!user.isVerified) {\n          // Example: using alertService for non-blocking info\n          this.alertService.warn('Email is not yet verified. Please check your inbox.');\n          return throwError(() => new HttpErrorResponse({\n            error: {\n              message: 'Email is not yet verified'\n            },\n            status: 400\n          }));\n        }\n        if (user.status !== 'Active') {\n          return throwError(() => new HttpErrorResponse({\n            error: {\n              message: 'Account is inactive.'\n            },\n            status: 400\n          }));\n        }\n        // Generate a simple token based on user ID for this example\n        const token = `fake-jwt-token-id-${user.id}`;\n        const userToReturn = Object.assign(Object.assign({}, user), {\n          token\n        });\n        delete userToReturn.password;\n        return of(new HttpResponse({\n          status: 200,\n          body: userToReturn\n        }));\n      }\n      // Get all users (was /accounts in your second handleRoute)\n      if (url.endsWith('/users') && method === 'GET') {\n        // Changed endpoint for clarity, or use /accounts if preferred\n        return this.authorize(headers, 'Admin', () => {\n          const usersToReturn = this.users.map(u => {\n            const {\n                password\n              } = u,\n              userWithoutPassword = __rest(u, [\"password\"]);\n            return userWithoutPassword;\n          });\n          return of(new HttpResponse({\n            status: 200,\n            body: usersToReturn\n          }));\n        });\n      }\n      // NOTE: Registration, verify email, forgot password, etc. from the localStorage-based\n      //       fake backend are NOT included in this streamlined version.\n      //       If needed, they would be added here, interacting with `this.users`.\n      // --- EMPLOYEES ROUTES ---\n      if (url.endsWith('/employees') && method === 'GET') {\n        return this.authorize(headers, null, () => of(new HttpResponse({\n          status: 200,\n          body: this.employees\n        })));\n      }\n      if (url.endsWith('/employees') && method === 'POST') {\n        return this.authorize(headers, 'Admin', () => {\n          const newEmployee = Object.assign({\n            id: this.nextEmployeeId++\n          }, body);\n          // Add logic to link to a user if userId is provided and valid\n          this.employees.push(newEmployee);\n          // TODO: Update department employee count\n          return of(new HttpResponse({\n            status: 201,\n            body: newEmployee\n          }));\n        });\n      }\n      const employeeByIdMatch = url.match(/\\/employees\\/(\\d+)$/);\n      if (employeeByIdMatch && method === 'GET') {\n        const id = parseInt(employeeByIdMatch[1]);\n        return this.authorize(headers, null, () => {\n          const employee = this.employees.find(e => e.id === id);\n          return employee ? of(new HttpResponse({\n            status: 200,\n            body: employee\n          })) : throwError(() => new HttpErrorResponse({\n            error: {\n              message: 'Employee not found'\n            },\n            status: 404\n          }));\n        });\n      }\n      if (employeeByIdMatch && method === 'PUT') {\n        return this.authorize(headers, 'Admin', () => {\n          const id = parseInt(employeeByIdMatch[1]);\n          const employeeIndex = this.employees.findIndex(e => e.id === id);\n          if (employeeIndex === -1) {\n            return throwError(() => new HttpErrorResponse({\n              error: {\n                message: 'Employee not found'\n              },\n              status: 404\n            }));\n          }\n          this.employees[employeeIndex] = Object.assign(Object.assign(Object.assign({}, this.employees[employeeIndex]), body), {\n            id\n          });\n          // TODO: Handle department change and update employee counts\n          return of(new HttpResponse({\n            status: 200,\n            body: this.employees[employeeIndex]\n          }));\n        });\n      }\n      if (employeeByIdMatch && method === 'DELETE') {\n        return this.authorize(headers, 'Admin', () => {\n          const id = parseInt(employeeByIdMatch[1]);\n          const employeeIndex = this.employees.findIndex(e => e.id === id);\n          if (employeeIndex === -1) {\n            return throwError(() => new HttpErrorResponse({\n              error: {\n                message: 'Employee not found'\n              },\n              status: 404\n            }));\n          }\n          this.employees.splice(employeeIndex, 1);\n          // TODO: Update department employee count\n          return of(new HttpResponse({\n            status: 200,\n            body: {\n              message: 'Employee deleted'\n            }\n          }));\n        });\n      }\n      const employeeTransferMatch = url.match(/\\/employees\\/(\\d+)\\/transfer$/);\n      if (employeeTransferMatch && method === 'POST') {\n        const id = parseInt(employeeTransferMatch[1]);\n        return this.authorize(headers, 'Admin', () => {\n          const employee = this.employees.find(e => e.id === id);\n          if (!employee) {\n            return throwError(() => new HttpErrorResponse({\n              error: {\n                message: 'Employee not found'\n              },\n              status: 404\n            }));\n          }\n          const oldDepartmentId = employee.departmentId;\n          employee.departmentId = body.departmentId; // Assuming body has { departmentId: ... }\n          // TODO: Update employee counts for old and new departments\n          this.workflows.push({\n            id: this.workflows.length + 1,\n            employeeId: id,\n            type: 'Transfer',\n            details: body,\n            status: 'Pending'\n          });\n          return of(new HttpResponse({\n            status: 200,\n            body: {\n              message: 'Employee transferred'\n            }\n          }));\n        });\n      }\n      // --- DEPARTMENTS ROUTES ---\n      if (url.endsWith('/departments') && method === 'GET') {\n        return this.authorize(headers, null, () => of(new HttpResponse({\n          status: 200,\n          body: this.departments\n        })));\n      }\n      if (url.endsWith('/departments') && method === 'POST') {\n        return this.authorize(headers, 'Admin', () => {\n          const department = Object.assign(Object.assign({\n            id: this.departments.length + 1\n          }, body), {\n            employeeCount: 0\n          }); // Use proper ID generation\n          this.departments.push(department);\n          return of(new HttpResponse({\n            status: 201,\n            body: department\n          }));\n        });\n      }\n      // ... PUT and DELETE for departments (ensure robust ID matching and error handling)\n      // --- WORKFLOWS ROUTES ---\n      const workflowByEmployeeIdMatch = url.match(/\\/workflows\\/employee\\/(\\d+)$/);\n      if (workflowByEmployeeIdMatch && method === 'GET') {\n        const employeeId = parseInt(workflowByEmployeeIdMatch[1]);\n        return this.authorize(headers, null, () => {\n          const employeeWorkflows = this.workflows.filter(w => w.employeeId === employeeId);\n          return of(new HttpResponse({\n            status: 200,\n            body: employeeWorkflows\n          }));\n        });\n      }\n      if (url.endsWith('/workflows') && method === 'POST') {\n        return this.authorize(headers, 'Admin', () => {\n          const workflow = Object.assign({\n            id: this.workflows.length + 1\n          }, body); // Use proper ID generation\n          this.workflows.push(workflow);\n          return of(new HttpResponse({\n            status: 201,\n            body: workflow\n          }));\n        });\n      }\n      // --- APP REQUESTS (HR Requests etc.) ROUTES ---\n      if (url.endsWith('/requests') && method === 'GET') {\n        // Original had 'Admin' only, adjust as needed for your app\n        return this.authorize(headers, null, () => of(new HttpResponse({\n          status: 200,\n          body: this.appRequests\n        })));\n      }\n      // ... Add POST, PUT, DELETE for appRequests\n      // If no route matched by the fake backend, pass it to the real backend (if any) or return 404\n      // return next.handle(request); // Use this if you want unhandled requests to go to a real backend\n      return throwError(() => new HttpErrorResponse({\n        status: 404,\n        error: {\n          message: `Fake backend: Route not found for ${method} ${url}`\n        }\n      }));\n    }\n    authorize(headers, requiredRole, successCallback) {\n      const user = this.getUserFromToken(headers); // Changed to a more token-based approach\n      if (!user) {\n        return throwError(() => new HttpErrorResponse({\n          status: 401,\n          error: {\n            message: 'Unauthorized - Missing or invalid token'\n          }\n        }));\n      }\n      if (requiredRole && user.role !== requiredRole) {\n        return throwError(() => new HttpErrorResponse({\n          status: 403,\n          error: {\n            message: 'Forbidden - Insufficient permissions'\n          }\n        }));\n      }\n      return successCallback();\n    }\n    getUserFromToken(headers) {\n      const authHeader = headers.get('Authorization');\n      if (!authHeader || !authHeader.startsWith('Bearer fake-jwt-token-id-')) {\n        return null;\n      }\n      const tokenPart = authHeader.substring('Bearer fake-jwt-token-id-'.length);\n      const userId = parseInt(tokenPart, 10);\n      if (isNaN(userId)) {\n        return null;\n      }\n      const user = this.users.find(u => u.id === userId);\n      if (!user) return null;\n      const {\n          password\n        } = user,\n        userWithoutPassword = __rest(user, [\"password\"]); // Don't include password in the \"current user\" object\n      return userWithoutPassword;\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","HttpErrorResponse","of","throwError","delay","mergeMap","materialize","dematerialize","FakeBackendInterceptor","constructor","alertService","id","email","password","role","employeeId","status","isVerified","userId","position","departmentId","hireDate","name","description","employeeCount","type","details","task","requestItems","quantity","users","length","Math","max","map","u","employees","e","intercept","request","next","url","method","headers","body","pipe","handleRoute","endsWith","user","find","error","message","warn","token","userToReturn","authorize","usersToReturn","userWithoutPassword","newEmployee","nextEmployeeId","push","employeeByIdMatch","match","parseInt","employee","employeeIndex","findIndex","splice","employeeTransferMatch","oldDepartmentId","workflows","departments","department","workflowByEmployeeIdMatch","employeeWorkflows","filter","w","workflow","appRequests","requiredRole","successCallback","getUserFromToken","authHeader","get","startsWith","tokenPart","substring","isNaN","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n    HttpRequest,\r\n    HttpResponse,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpInterceptor,\r\n    HTTP_INTERCEPTORS,\r\n    HttpErrorResponse // Import HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\r\nimport { AlertService } from '@app/_services'; // Assuming AlertService is used for messages\r\n\r\n// Define interfaces for better type safety (highly recommended)\r\ninterface User {\r\n    id: number;\r\n    email: string;\r\n    password?: string;\r\n    role: string;\r\n    employeeId?: number; // Link to an employee\r\n    token?: string; // Added upon authentication\r\n    // Add other fields if they come from your 'accounts' array like title, firstName, etc.\r\n    title?: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    dateCreated?: string;\r\n    isVerified?: boolean;\r\n    status?: string;\r\n}\r\n\r\ninterface Employee {\r\n    id: number;\r\n    employeeId: string;\r\n    userId: number;\r\n    position: string;\r\n    departmentId: number;\r\n    hireDate: string;\r\n    status: string;\r\n}\r\n\r\ninterface Department {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    employeeCount: number;\r\n}\r\n\r\ninterface Workflow {\r\n    id: number;\r\n    employeeId: number;\r\n    type: string;\r\n    details: any;\r\n    status: string;\r\n}\r\n\r\ninterface AppRequest { // Renamed from 'RequestItem' to avoid conflict with HttpRequest\r\n    id: number;\r\n    employeeId: number;\r\n    type: string;\r\n    requestItems: { name: string; quantity: number }[];\r\n    status: string;\r\n}\r\n\r\n\r\n@Injectable()\r\nexport class FakeBackendInterceptor implements HttpInterceptor {\r\n    // Using class properties for data.\r\n    // The 'accounts' array from localStorage and its logic are removed in this version\r\n    // for consistency with the second handleRoute implementation.\r\n    // If you need the localStorage based account system, this class needs significant rework.\r\n\r\n    private users: User[] = [\r\n        { id: 1, email: 'admin@example.com', password: 'admin', role: 'Admin', employeeId: 1, status: 'Active', isVerified: true },\r\n        { id: 2, email: 'user@example.com', password: 'user', role: 'User', employeeId: 2, status: 'Active', isVerified: true }\r\n    ];\r\n    private employees: Employee[] = [\r\n        { id: 1, employeeId: 'EMP001', userId: 1, position: 'Developer', departmentId: 1, hireDate: '2025-01-01', status: 'Active' },\r\n        { id: 2, employeeId: 'EMP002', userId: 2, position: 'Designer', departmentId: 2, hireDate: '2025-02-01', status: 'Active' }\r\n    ];\r\n    private departments: Department[] = [\r\n        { id: 1, name: 'Engineering', description: 'Software development team', employeeCount: 1 },\r\n        { id: 2, name: 'Marketing', description: 'Marketing team', employeeCount: 1 }\r\n    ];\r\n    private workflows: Workflow[] = [\r\n        { id: 1, employeeId: 1, type: 'Onboarding', details: { task: 'Setup workstation' }, status: 'Pending' }\r\n    ];\r\n    private appRequests: AppRequest[] = [ // Renamed variable to avoid conflict\r\n        { id: 1, employeeId: 2, type: 'Equipment', requestItems: [{ name: 'Laptop', quantity: 1 }], status: 'Pending' }\r\n    ];\r\n\r\n    // ID Generators\r\n    private nextUserId = this.users.length > 0 ? Math.max(...this.users.map(u => u.id)) + 1 : 1;\r\n    private nextEmployeeId = this.employees.length > 0 ? Math.max(...this.employees.map(e => e.id)) + 1 : 1;\r\n    // ... add for other entities if needed\r\n\r\n    constructor(private alertService: AlertService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const { url, method, headers, body } = request;\r\n\r\n        // The inner function handleRoute and its related functions (authenticate, register etc. using localStorage)\r\n        // have been removed for clarity as they were not being called by this pipe.\r\n        // This interceptor now consistently uses the class method this.handleRoute.\r\n        return of(null)\r\n            .pipe(mergeMap(() => this.handleRoute(url, method, headers, body, next))) // Pass 'next' for passthrough\r\n            .pipe(materialize())\r\n            .pipe(delay(500)) // Single delay applied here\r\n            .pipe(dematerialize());\r\n    }\r\n\r\n    private handleRoute(url: string, method: string, headers: any, body: any, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // --- ACCOUNTS ROUTES (Simplified from your class method, not the localStorage version) ---\r\n        if (url.endsWith('/accounts/authenticate') && method === 'POST') {\r\n            const { email, password } = body;\r\n            const user = this.users.find(u => u.email === email && u.password === password);\r\n            if (!user) {\r\n                return throwError(() => new HttpErrorResponse({ error: { message: 'Invalid credentials' }, status: 400 }));\r\n            }\r\n            if (!user.isVerified) {\r\n                // Example: using alertService for non-blocking info\r\n                this.alertService.warn('Email is not yet verified. Please check your inbox.');\r\n                return throwError(() => new HttpErrorResponse({ error: { message: 'Email is not yet verified' }, status: 400 }));\r\n            }\r\n            if (user.status !== 'Active') {\r\n                return throwError(() => new HttpErrorResponse({ error: { message: 'Account is inactive.' }, status: 400 }));\r\n            }\r\n            // Generate a simple token based on user ID for this example\r\n            const token = `fake-jwt-token-id-${user.id}`;\r\n            const userToReturn = { ...user, token };\r\n            delete userToReturn.password;\r\n            return of(new HttpResponse({ status: 200, body: userToReturn }));\r\n        }\r\n\r\n        // Get all users (was /accounts in your second handleRoute)\r\n        if (url.endsWith('/users') && method === 'GET') { // Changed endpoint for clarity, or use /accounts if preferred\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const usersToReturn = this.users.map(u => {\r\n                    const { password, ...userWithoutPassword } = u;\r\n                    return userWithoutPassword;\r\n                });\r\n                return of(new HttpResponse({ status: 200, body: usersToReturn }));\r\n            });\r\n        }\r\n        // NOTE: Registration, verify email, forgot password, etc. from the localStorage-based\r\n        //       fake backend are NOT included in this streamlined version.\r\n        //       If needed, they would be added here, interacting with `this.users`.\r\n\r\n        // --- EMPLOYEES ROUTES ---\r\n        if (url.endsWith('/employees') && method === 'GET') {\r\n            return this.authorize(headers, null, () => of(new HttpResponse({ status: 200, body: this.employees })));\r\n        }\r\n\r\n        if (url.endsWith('/employees') && method === 'POST') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const newEmployee: Employee = { id: this.nextEmployeeId++, ...body };\r\n                // Add logic to link to a user if userId is provided and valid\r\n                this.employees.push(newEmployee);\r\n                // TODO: Update department employee count\r\n                return of(new HttpResponse({ status: 201, body: newEmployee }));\r\n            });\r\n        }\r\n\r\n        const employeeByIdMatch = url.match(/\\/employees\\/(\\d+)$/);\r\n        if (employeeByIdMatch && method === 'GET') {\r\n            const id = parseInt(employeeByIdMatch[1]);\r\n            return this.authorize(headers, null, () => {\r\n                const employee = this.employees.find(e => e.id === id);\r\n                return employee ?\r\n                    of(new HttpResponse({ status: 200, body: employee })) :\r\n                    throwError(() => new HttpErrorResponse({ error: { message: 'Employee not found' }, status: 404 }));\r\n            });\r\n        }\r\n\r\n        if (employeeByIdMatch && method === 'PUT') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const id = parseInt(employeeByIdMatch[1]);\r\n                const employeeIndex = this.employees.findIndex(e => e.id === id);\r\n                if (employeeIndex === -1) {\r\n                    return throwError(() => new HttpErrorResponse({ error: { message: 'Employee not found' }, status: 404 }));\r\n                }\r\n                this.employees[employeeIndex] = { ...this.employees[employeeIndex], ...body, id };\r\n                // TODO: Handle department change and update employee counts\r\n                return of(new HttpResponse({ status: 200, body: this.employees[employeeIndex] }));\r\n            });\r\n        }\r\n\r\n        if (employeeByIdMatch && method === 'DELETE') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const id = parseInt(employeeByIdMatch[1]);\r\n                const employeeIndex = this.employees.findIndex(e => e.id === id);\r\n                if (employeeIndex === -1) {\r\n                    return throwError(() => new HttpErrorResponse({ error: { message: 'Employee not found' }, status: 404 }));\r\n                }\r\n                this.employees.splice(employeeIndex, 1);\r\n                // TODO: Update department employee count\r\n                return of(new HttpResponse({ status: 200, body: { message: 'Employee deleted' } }));\r\n            });\r\n        }\r\n\r\n        const employeeTransferMatch = url.match(/\\/employees\\/(\\d+)\\/transfer$/);\r\n        if (employeeTransferMatch && method === 'POST') {\r\n            const id = parseInt(employeeTransferMatch[1]);\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const employee = this.employees.find(e => e.id === id);\r\n                if (!employee) {\r\n                    return throwError(() => new HttpErrorResponse({ error: { message: 'Employee not found' }, status: 404 }));\r\n                }\r\n                const oldDepartmentId = employee.departmentId;\r\n                employee.departmentId = body.departmentId; // Assuming body has { departmentId: ... }\r\n                // TODO: Update employee counts for old and new departments\r\n                this.workflows.push({\r\n                    id: this.workflows.length + 1, // Use proper ID generation\r\n                    employeeId: id,\r\n                    type: 'Transfer',\r\n                    details: body,\r\n                    status: 'Pending'\r\n                });\r\n                return of(new HttpResponse({ status: 200, body: { message: 'Employee transferred' } }));\r\n            });\r\n        }\r\n\r\n        // --- DEPARTMENTS ROUTES ---\r\n        if (url.endsWith('/departments') && method === 'GET') {\r\n            return this.authorize(headers, null, () => of(new HttpResponse({ status: 200, body: this.departments })));\r\n        }\r\n\r\n        if (url.endsWith('/departments') && method === 'POST') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const department = { id: this.departments.length + 1, ...body, employeeCount: 0 }; // Use proper ID generation\r\n                this.departments.push(department);\r\n                return of(new HttpResponse({ status: 201, body: department }));\r\n            });\r\n        }\r\n        // ... PUT and DELETE for departments (ensure robust ID matching and error handling)\r\n\r\n        // --- WORKFLOWS ROUTES ---\r\n        const workflowByEmployeeIdMatch = url.match(/\\/workflows\\/employee\\/(\\d+)$/);\r\n        if (workflowByEmployeeIdMatch && method === 'GET') {\r\n            const employeeId = parseInt(workflowByEmployeeIdMatch[1]);\r\n            return this.authorize(headers, null, () => {\r\n                const employeeWorkflows = this.workflows.filter(w => w.employeeId === employeeId);\r\n                return of(new HttpResponse({ status: 200, body: employeeWorkflows }));\r\n            });\r\n        }\r\n\r\n        if (url.endsWith('/workflows') && method === 'POST') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const workflow = { id: this.workflows.length + 1, ...body }; // Use proper ID generation\r\n                this.workflows.push(workflow);\r\n                return of(new HttpResponse({ status: 201, body: workflow }));\r\n            });\r\n        }\r\n\r\n        // --- APP REQUESTS (HR Requests etc.) ROUTES ---\r\n        if (url.endsWith('/requests') && method === 'GET') {\r\n            // Original had 'Admin' only, adjust as needed for your app\r\n            return this.authorize(headers, null, () => of(new HttpResponse({ status: 200, body: this.appRequests })));\r\n        }\r\n        // ... Add POST, PUT, DELETE for appRequests\r\n\r\n        // If no route matched by the fake backend, pass it to the real backend (if any) or return 404\r\n        // return next.handle(request); // Use this if you want unhandled requests to go to a real backend\r\n        return throwError(() => new HttpErrorResponse({ status: 404, error: { message: `Fake backend: Route not found for ${method} ${url}` } }));\r\n    }\r\n\r\n    private authorize(headers: any, requiredRole: string | null, successCallback: () => Observable<HttpEvent<any>>): Observable<HttpEvent<any>> {\r\n        const user = this.getUserFromToken(headers); // Changed to a more token-based approach\r\n        if (!user) {\r\n            return throwError(() => new HttpErrorResponse({ status: 401, error: { message: 'Unauthorized - Missing or invalid token' } }));\r\n        }\r\n        if (requiredRole && user.role !== requiredRole) {\r\n            return throwError(() => new HttpErrorResponse({ status: 403, error: { message: 'Forbidden - Insufficient permissions' } }));\r\n        }\r\n        return successCallback();\r\n    }\r\n\r\n    private getUserFromToken(headers: any): User | null {\r\n        const authHeader = headers.get('Authorization');\r\n        if (!authHeader || !authHeader.startsWith('Bearer fake-jwt-token-id-')) {\r\n            return null;\r\n        }\r\n        const tokenPart = authHeader.substring('Bearer fake-jwt-token-id-'.length);\r\n        const userId = parseInt(tokenPart, 10);\r\n\r\n        if (isNaN(userId)) {\r\n            return null;\r\n        }\r\n        const user = this.users.find(u => u.id === userId);\r\n        if (!user) return null;\r\n\r\n        const { password, ...userWithoutPassword } = user; // Don't include password in the \"current user\" object\r\n        return userWithoutPassword as User;\r\n    }\r\n}\r\n\r\nexport const fakeBackendProvider = { // Changed to const\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: FakeBackendInterceptor,\r\n    multi: true\r\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}