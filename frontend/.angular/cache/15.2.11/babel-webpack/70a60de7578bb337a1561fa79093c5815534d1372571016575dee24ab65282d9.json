{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'angular-10-registration-login-example-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// in-memory data\nlet employees = [{\n  id: 1,\n  employeeId: 'EMP001',\n  userId: 1,\n  position: 'Developer',\n  departmentId: 1,\n  hireDate: '2025-01-01',\n  status: 'Active'\n}, {\n  id: 2,\n  employeeId: 'EMP002',\n  userId: 2,\n  position: 'Designer',\n  departmentId: 2,\n  hireDate: '2025-02-01',\n  status: 'Active'\n}];\nlet departments = [{\n  id: 1,\n  name: 'Engineering',\n  description: 'Software development team',\n  employeeCount: 1\n}, {\n  id: 2,\n  name: 'Marketing',\n  description: 'Marketing team',\n  employeeCount: 1\n}];\nlet workflows = [{\n  id: 1,\n  employeeId: 1,\n  type: 'Onboarding',\n  details: 'Task: Setup workstation',\n  status: 'Pending'\n}];\nlet requests = [{\n  id: 1,\n  employeeId: 1,\n  type: 'Equipment',\n  requestItems: [{\n    name: 'Laptop',\n    quantity: 1\n  }, {\n    name: 'Monitor',\n    quantity: 2\n  }],\n  status: 'Pending'\n}, {\n  id: 2,\n  employeeId: 1,\n  type: 'Software',\n  requestItems: [{\n    name: 'Visual Studio',\n    quantity: 1\n  }, {\n    name: 'Office 365',\n    quantity: 1\n  }],\n  status: 'Approved'\n}, {\n  id: 3,\n  employeeId: 2,\n  type: 'Training',\n  requestItems: [{\n    name: 'Adobe Illustrator Course',\n    quantity: 1\n  }],\n  status: 'Rejected'\n}, {\n  id: 4,\n  employeeId: 2,\n  type: 'Equipment',\n  requestItems: [{\n    name: 'Drawing Tablet',\n    quantity: 1\n  }],\n  status: 'Pending'\n}];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      // Extract the path from the URL (remove the API prefix if present)\n      const apiUrl = environment.apiUrl;\n      const path = url.startsWith(apiUrl) ? url.substring(apiUrl.length) : url;\n      return of(null).pipe(mergeMap(() => handleRoute())).pipe(materialize()).pipe(delay(500)).pipe(dematerialize());\n      function handleRoute() {\n        switch (true) {\n          // Account endpoints\n          case path.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case path.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case path.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case path.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case path.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case path.endsWith('/accounts/forgot-password') && method === 'POST':\n            return forgotPassword();\n          case path.endsWith('/accounts/validate-reset-token') && method === 'POST':\n            return validateResetToken();\n          case path.endsWith('/accounts/reset-password') && method === 'POST':\n            return resetPassword();\n          case path.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case path.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case path.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case path.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          case path.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n            return deleteAccount();\n          // Employee endpoints\n          case path.endsWith('/employees') && method === 'GET':\n            return authorize(null, () => getEmployees());\n          case path.endsWith('/employees/nextId') && method === 'GET':\n            return authorize(null, () => getNextEmployeeId());\n          case path.endsWith('/employees') && method === 'POST':\n            return authorize(Role.Admin, () => createEmployee());\n          case path.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return authorize(null, () => getEmployeeById());\n          case path.match(/\\/employees\\/\\d+\\/with-details$/) && method === 'GET':\n            return authorize(null, () => getEmployeeWithDetails());\n          case path.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateEmployee());\n          case path.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return authorize(Role.Admin, () => deleteEmployee());\n          case path.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'POST':\n            return authorize(Role.Admin, () => transferEmployee());\n          // Department endpoints\n          case path.endsWith('/departments') && method === 'GET':\n            return authorize(null, () => getDepartments());\n          case path.endsWith('/departments') && method === 'POST':\n            return authorize(Role.Admin, () => createDepartment());\n          case path.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return authorize(null, () => getDepartmentById());\n          case path.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateDepartment());\n          case path.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return authorize(Role.Admin, () => deleteDepartment());\n          // Workflow endpoints\n          case path.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return authorize(null, () => getEmployeeWorkflows());\n          case path.endsWith('/workflows') && method === 'GET':\n            return authorize(null, () => getAllWorkflows());\n          case path.endsWith('/workflows') && method === 'POST':\n            return authorize(Role.Admin, () => createWorkflow());\n          case path.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateWorkflow());\n          case path.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateWorkflow());\n          // Request endpoints\n          case path.endsWith('/requests') && method === 'GET':\n            return authorize(null, () => getRequests());\n          case path.match(/\\/requests\\?employeeId=\\d+$/) && method === 'GET':\n            return authorize(null, () => getRequestsByEmployeeId());\n          case path.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return authorize(null, () => getRequestById());\n          case path.endsWith('/requests') && method === 'POST':\n            return authorize(null, () => createRequest());\n          case path.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return authorize(Role.Admin, () => updateRequest());\n          case path.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return authorize(Role.Admin, () => deleteRequest());\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      }\n      // Account route functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) {\n          return error('Email does not exist');\n        }\n        if (!account.isVerified) {\n          // Display verification email alert\n          setTimeout(() => {\n            const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n            alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    `, {\n              autoClose: false\n            });\n          }, 1000);\n          return error('Email is not yet verified');\n        }\n        if (account.password !== password) {\n          return error('Incorrect password');\n        }\n        if (account.status !== 'Active') {\n          return error('Account is inactive. Please contact support.');\n        }\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        if (!account) return unauthorized();\n        // replace old refresh token with a new one and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function forgotPassword() {\n        const {\n          email\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        // always return ok() response to prevent email enumeration\n        if (!account) return ok();\n        // create reset token that expires after 24 hours\n        account.resetToken = new Date().getTime().toString();\n        account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display password reset email in alert\n        setTimeout(() => {\n          const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\n          alertService.info(`\n                    <h4>Reset Password Email</h4>\n                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                    <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoClose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function validateResetToken() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error(\"Invalid token\");\n        return ok();\n      }\n      function resetPassword() {\n        const {\n          token,\n          password\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error('Invalid token');\n        // update password and remove reset token\n        account.password = password;\n        account.isVerified = true;\n        delete account.resetToken;\n        delete account.resetTokenExpires;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      function createAccount() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          return error(`Email ${account.email} is already registered`);\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        account.status = 'Inactive';\n        account.dateCreated = new Date().toISOString();\n        account.isVerified = true;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        let params = body;\n        let account = accounts.find(x => x.id == idFromUrl());\n        // user accounts can update own profile and admin accounts can update all profiles\n        if (account.id != currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        // only update password if included\n        if (!params.password) {\n          delete params.password;\n        }\n        // don't save confirm password\n        delete params.confirmPassword;\n        // update and save account\n        Object.assign(account, params);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function deleteAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can delete own account and admin accounts can delete any account\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        // delete account then save\n        accounts = accounts.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      // Employee route functions\n      function getEmployees() {\n        // Enhance employees with department and user information\n        const employeesWithDetails = employees.map(employee => {\n          const department = departments.find(d => d.id === employee.departmentId);\n          const user = accounts.find(a => a.id === employee.userId);\n          return Object.assign(Object.assign({}, employee), {\n            Department: department ? {\n              id: department.id,\n              name: department.name\n            } : null,\n            User: user ? {\n              id: user.id,\n              email: user.email\n            } : null\n          });\n        });\n        return ok(employeesWithDetails);\n      }\n      function createEmployee() {\n        // Generate employee ID in format 'EMP' + padded number if not provided\n        let employeeId = body.employeeId;\n        if (!employeeId || !employeeId.trim()) {\n          const nextId = employees.length + 1;\n          employeeId = 'EMP' + nextId.toString().padStart(3, '0');\n        }\n        // Verify the userId exists in accounts\n        const userId = parseInt(body.userId);\n        if (isNaN(userId)) {\n          return error('Please select a valid user');\n        }\n        const userExists = accounts.some(a => a.id === userId);\n        if (!userExists) {\n          return error('User not found');\n        }\n        // Verify the departmentId exists\n        const departmentId = parseInt(body.departmentId);\n        if (isNaN(departmentId)) {\n          return error('Please select a valid department');\n        }\n        const department = departments.find(d => d.id === departmentId);\n        if (!department) {\n          return error('Department not found');\n        }\n        // Create the employee with auto-generated ID\n        const nextId = employees.length + 1;\n        const employee = {\n          id: nextId,\n          employeeId: employeeId,\n          userId: userId,\n          departmentId: departmentId,\n          position: body.position || '',\n          hireDate: body.hireDate || new Date().toISOString().split('T')[0],\n          status: body.status || 'Active'\n        };\n        // Add to employees array\n        employees.push(employee);\n        // Update department employee count\n        department.employeeCount++;\n        // Create onboarding workflow\n        workflows.push({\n          id: workflows.length + 1,\n          employeeId: nextId,\n          type: 'Onboarding',\n          details: JSON.stringify({\n            task: 'Setup workstation',\n            employeeId: employee.employeeId,\n            position: employee.position\n          }),\n          status: 'Pending'\n        });\n        return ok(employee);\n      }\n      function getEmployeeById() {\n        const id = parseInt(path.split('/').pop());\n        const employee = employees.find(e => e.id === id);\n        if (!employee) return error('Employee not found');\n        return ok(employee);\n      }\n      function getEmployeeWithDetails() {\n        const id = parseInt(path.split('/').pop().split('/')[0]);\n        const employee = employees.find(e => e.id === id);\n        if (!employee) return error('Employee not found');\n        // Get user account details\n        const user = accounts.find(a => a.id === employee.userId);\n        // Get department details\n        const department = departments.find(d => d.id === employee.departmentId);\n        // Create a response with the related details\n        const response = Object.assign(Object.assign({}, employee), {\n          User: user ? {\n            id: user.id,\n            email: user.email,\n            role: user.role\n          } : null,\n          Department: department ? {\n            id: department.id,\n            name: department.name\n          } : null\n        });\n        return ok(response);\n      }\n      function updateEmployee() {\n        const id = parseInt(path.split('/').pop());\n        const employeeIndex = employees.findIndex(e => e.id === id);\n        if (employeeIndex === -1) return error('Employee not found');\n        // Parse values to ensure they're numbers\n        let userId = body.userId;\n        if (userId && typeof userId === 'string') {\n          userId = parseInt(userId);\n        }\n        let departmentId = body.departmentId;\n        if (departmentId && typeof departmentId === 'string') {\n          departmentId = parseInt(departmentId);\n        }\n        // Check if user exists if userId is being updated\n        if (userId) {\n          const userExists = accounts.some(a => a.id === userId);\n          if (!userExists) {\n            return error('User not found');\n          }\n        }\n        // Check if department exists if departmentId is being updated\n        if (departmentId && departmentId !== employees[employeeIndex].departmentId) {\n          const oldDepartmentId = employees[employeeIndex].departmentId;\n          const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n          const newDepartment = departments.find(d => d.id === departmentId);\n          if (!newDepartment) {\n            return error('Department not found');\n          }\n          // Update department employee counts\n          if (oldDepartment) oldDepartment.employeeCount--;\n          newDepartment.employeeCount++;\n        }\n        // Keep the employeeId unchanged\n        const employeeId = employees[employeeIndex].employeeId;\n        // Create updated employee object with parsed values\n        const updatedEmployee = {\n          id,\n          employeeId,\n          userId: userId || employees[employeeIndex].userId,\n          departmentId: departmentId || employees[employeeIndex].departmentId,\n          position: body.position || employees[employeeIndex].position,\n          hireDate: body.hireDate || employees[employeeIndex].hireDate,\n          status: body.status || employees[employeeIndex].status\n        };\n        // Update the employee\n        employees[employeeIndex] = updatedEmployee;\n        return ok(updatedEmployee);\n      }\n      function deleteEmployee() {\n        const id = parseInt(path.split('/').pop());\n        const employee = employees.find(e => e.id === id);\n        if (!employee) return error('Employee not found');\n        // Update department employee count\n        const department = departments.find(d => d.id === employee.departmentId);\n        if (department) {\n          department.employeeCount--;\n        }\n        // Delete related workflows\n        workflows = workflows.filter(w => w.employeeId !== id);\n        // Delete related requests\n        requests = requests.filter(r => r.employeeId !== id);\n        // Delete the employee\n        employees = employees.filter(e => e.id !== id);\n        return ok({\n          message: 'Employee deleted'\n        });\n      }\n      function transferEmployee() {\n        const id = parseInt(path.split('/')[2]);\n        const employee = employees.find(e => e.id === id);\n        if (!employee) return error('Employee not found');\n        // Get department information\n        const oldDepartmentId = employee.departmentId;\n        const newDepartmentId = body.departmentId;\n        const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n        const newDepartment = departments.find(d => d.id === newDepartmentId);\n        // Update employee's department\n        employee.departmentId = newDepartmentId;\n        // Update department counts\n        if (oldDepartment) oldDepartment.employeeCount--;\n        if (newDepartment) newDepartment.employeeCount++;\n        // Create transfer workflow\n        workflows.push({\n          id: workflows.length + 1,\n          employeeId: id,\n          type: 'Transfer',\n          details: JSON.stringify({\n            task: 'Department transfer',\n            fromDepartment: (oldDepartment === null || oldDepartment === void 0 ? void 0 : oldDepartment.name) || 'Unknown',\n            toDepartment: (newDepartment === null || newDepartment === void 0 ? void 0 : newDepartment.name) || 'Unknown',\n            employeeId: employee.employeeId\n          }),\n          status: 'Pending'\n        });\n        return ok({\n          message: 'Employee transferred'\n        });\n      }\n      // Department route functions\n      function getDepartments() {\n        return ok(departments);\n      }\n      function getDepartmentById() {\n        const id = parseInt(path.split('/').pop());\n        const department = departments.find(d => d.id === id);\n        if (!department) return error('Department not found');\n        return ok(department);\n      }\n      function createDepartment() {\n        // Check if department with same name already exists\n        if (departments.some(d => d.name.toLowerCase() === body.name.toLowerCase())) {\n          return error('Department with this name already exists');\n        }\n        // Create department with initial employee count of 0\n        const department = {\n          id: departments.length + 1,\n          name: body.name,\n          description: body.description,\n          employeeCount: 0\n        };\n        departments.push(department);\n        return ok(department);\n      }\n      function updateDepartment() {\n        const id = parseInt(path.split('/').pop());\n        const deptIndex = departments.findIndex(d => d.id === id);\n        if (deptIndex === -1) return error('Department not found');\n        // Check if department with same name already exists (excluding current department)\n        if (body.name && body.name !== departments[deptIndex].name) {\n          const nameExists = departments.some(d => d.id !== id && d.name.toLowerCase() === body.name.toLowerCase());\n          if (nameExists) {\n            return error('Department with this name already exists');\n          }\n        }\n        // Preserve the employee count\n        const employeeCount = departments[deptIndex].employeeCount;\n        // Update department\n        departments[deptIndex] = {\n          id,\n          name: body.name || departments[deptIndex].name,\n          description: body.description || departments[deptIndex].description,\n          employeeCount\n        };\n        return ok(departments[deptIndex]);\n      }\n      function deleteDepartment() {\n        const id = parseInt(path.split('/').pop());\n        const department = departments.find(d => d.id === id);\n        if (!department) return error('Department not found');\n        // Check if there are employees in this department\n        const hasEmployees = employees.some(e => e.departmentId === id);\n        if (hasEmployees) {\n          return error('Cannot delete department with employees. Transfer employees first.');\n        }\n        // Delete the department\n        departments = departments.filter(d => d.id !== id);\n        return ok({\n          message: 'Department deleted'\n        });\n      }\n      // Workflow route functions\n      function getEmployeeWorkflows() {\n        const employeeId = parseInt(path.split('/').pop());\n        const employeeWorkflows = workflows.filter(w => w.employeeId === employeeId);\n        return ok(employeeWorkflows);\n      }\n      function getAllWorkflows() {\n        return ok(workflows);\n      }\n      function createWorkflow() {\n        const workflow = Object.assign({\n          id: workflows.length + 1\n        }, body);\n        workflows.push(workflow);\n        return ok(workflow);\n      }\n      function updateWorkflow() {\n        // Handle both direct update and status update endpoints\n        let id;\n        if (path.includes('/workflows/') && path.includes('/status')) {\n          // Extract ID from paths like /workflows/123/status\n          id = parseInt(path.split('/')[2]);\n        } else {\n          // Standard path like /workflows/123\n          id = parseInt(path.split('/').pop());\n        }\n        const workflowIndex = workflows.findIndex(w => w.id === id);\n        if (workflowIndex === -1) return error('Workflow not found');\n        // Store previous status\n        const oldStatus = workflows[workflowIndex].status;\n        const oldWorkflow = Object.assign({}, workflows[workflowIndex]);\n        // Update workflow\n        workflows[workflowIndex] = Object.assign(Object.assign(Object.assign({}, workflows[workflowIndex]), body), {\n          id // preserve id\n        });\n        // Check if this is a request approval workflow and status changed\n        if ((workflows[workflowIndex].type === 'Request Approval' || workflows[workflowIndex].type.includes('Request')) && body.status && body.status !== oldStatus) {\n          // Try to extract requestId from details field\n          const detailsText = workflows[workflowIndex].details || '';\n          console.log('Workflow details text:', detailsText);\n          // Extract requestId - first try to parse as JSON\n          let requestId = null;\n          try {\n            // Try to parse details as JSON\n            if (detailsText.trim().startsWith('{')) {\n              const detailsObj = JSON.parse(detailsText);\n              if (detailsObj.requestId) {\n                requestId = parseInt(detailsObj.requestId.toString());\n                console.log('Extracted requestId from JSON:', requestId);\n              }\n            }\n          } catch (e) {\n            console.log('Failed to parse details as JSON:', e);\n          }\n          // If JSON parsing failed, try regex patterns\n          if (!requestId) {\n            // Try matching standard format with HTML bold tags\n            const boldMatch = detailsText.match(/<b>requestId:<\\/b>\\s*(\\d+)/i);\n            if (boldMatch && boldMatch[1]) {\n              requestId = parseInt(boldMatch[1]);\n            }\n            // Try matching without HTML tags\n            if (!requestId) {\n              const plainMatch = detailsText.match(/requestId:\\s*(\\d+)/i);\n              if (plainMatch && plainMatch[1]) {\n                requestId = parseInt(plainMatch[1]);\n              }\n            }\n            // Try extracting from any #NUMBER pattern if nothing else worked\n            if (!requestId) {\n              const hashMatch = detailsText.match(/request\\s+#(\\d+)/i);\n              if (hashMatch && hashMatch[1]) {\n                requestId = parseInt(hashMatch[1]);\n              }\n            }\n          }\n          console.log('Final extracted requestId:', requestId);\n          if (requestId) {\n            const requestIndex = requests.findIndex(r => r.id === requestId);\n            if (requestIndex !== -1) {\n              console.log('Found request at index:', requestIndex);\n              // Update request status based on workflow status\n              if (body.status === 'Approved') {\n                requests[requestIndex].status = 'Approved';\n                console.log('Updated request status to Approved');\n              } else if (body.status === 'Rejected') {\n                requests[requestIndex].status = 'Rejected';\n                console.log('Updated request status to Rejected');\n              } else if (body.status === 'Pending') {\n                requests[requestIndex].status = 'Pending';\n                console.log('Updated request status to Pending');\n              }\n            } else {\n              console.log('Request not found with ID:', requestId);\n            }\n          } else {\n            console.log('Could not extract requestId from details:', detailsText);\n          }\n        }\n        return ok(workflows[workflowIndex]);\n      }\n      // Request route functions\n      function getRequests() {\n        // Add employee and user information to requests\n        const requestsWithUserInfo = requests.map(request => {\n          const employee = employees.find(e => e.id === request.employeeId);\n          let userEmail = 'Unknown';\n          let userRole = 'Unknown';\n          if (employee) {\n            const user = accounts.find(a => a.id === employee.userId);\n            if (user) {\n              userEmail = user.email;\n              userRole = user.role;\n            }\n          }\n          return Object.assign(Object.assign({}, request), {\n            employee: employee ? {\n              id: employee.id,\n              employeeId: employee.employeeId\n            } : null,\n            userEmail,\n            userRole\n          });\n        });\n        // If user is not an admin, only return their own requests\n        const account = currentAccount();\n        if (account && account.role !== Role.Admin) {\n          const employee = employees.find(e => e.userId === account.id);\n          if (employee) {\n            return ok(requestsWithUserInfo.filter(r => r.employeeId === employee.id));\n          }\n          return ok([]);\n        }\n        return ok(requestsWithUserInfo);\n      }\n      function getRequestById() {\n        const id = parseInt(path.split('/').pop());\n        const request = requests.find(r => r.id === id);\n        if (!request) return error('Request not found');\n        // Get employee and user information\n        const employee = employees.find(e => e.id === request.employeeId);\n        let userEmail = 'Unknown';\n        let userRole = 'Unknown';\n        if (employee) {\n          const user = accounts.find(a => a.id === employee.userId);\n          if (user) {\n            userEmail = user.email;\n            userRole = user.role;\n          }\n        }\n        // Check if the current user is allowed to view this request\n        const account = currentAccount();\n        if (account && account.role !== Role.Admin) {\n          const userEmployee = employees.find(e => e.userId === account.id);\n          if (!userEmployee || userEmployee.id !== request.employeeId) {\n            return error('You are not authorized to view this request');\n          }\n        }\n        // Return request with user and employee info\n        return ok(Object.assign(Object.assign({}, request), {\n          employee: employee ? {\n            id: employee.id,\n            employeeId: employee.employeeId\n          } : null,\n          userEmail,\n          userRole\n        }));\n      }\n      function getRequestsByEmployeeId() {\n        const employeeIdParam = new URL(url).searchParams.get('employeeId');\n        if (!employeeIdParam) return error('Employee ID is required');\n        const employeeId = parseInt(employeeIdParam);\n        if (isNaN(employeeId)) return error('Invalid employee ID');\n        // Check if employee exists\n        const employee = employees.find(e => e.id === employeeId);\n        if (!employee) return error('Employee not found');\n        // Get user information\n        const user = accounts.find(a => a.id === employee.userId);\n        let userEmail = 'Unknown';\n        let userRole = 'Unknown';\n        if (user) {\n          userEmail = user.email;\n          userRole = user.role;\n        }\n        // Get department information\n        const department = departments.find(d => d.id === employee.departmentId);\n        // Filter requests by employee ID\n        const filteredRequests = requests.filter(r => r.employeeId === employeeId).map(request => Object.assign(Object.assign({}, request), {\n          Employee: Object.assign(Object.assign({}, employee), {\n            User: user ? {\n              id: user.id,\n              email: user.email,\n              role: user.role\n            } : null,\n            Department: department ? {\n              id: department.id,\n              name: department.name\n            } : null\n          }),\n          userEmail,\n          userRole\n        }));\n        return ok(filteredRequests);\n      }\n      function createRequest() {\n        const account = currentAccount();\n        if (!account) return unauthorized();\n        // Use employeeId from body if provided (for admin users)\n        // Otherwise, find employee associated with current user\n        let employeeId;\n        if (body.employeeId && account.role === Role.Admin) {\n          // Admin users can create requests for any employee\n          employeeId = parseInt(body.employeeId);\n          // Verify that the employee exists\n          const employeeExists = employees.some(e => e.id === employeeId);\n          if (!employeeExists) {\n            return error('Selected employee not found');\n          }\n        } else {\n          // Regular users can only create requests for themselves\n          const employee = employees.find(e => e.userId === account.id);\n          if (!employee) {\n            return error('No employee record found for current user');\n          }\n          employeeId = employee.id;\n        }\n        // Find employee record for the request\n        const employee = employees.find(e => e.id === employeeId);\n        // Create request with proper structure\n        const request = {\n          id: requests.length + 1,\n          employeeId: employeeId,\n          type: body.type || 'Equipment',\n          status: 'Pending',\n          requestItems: body.items ? body.items.map(item => ({\n            name: item.name,\n            quantity: item.quantity || 1\n          })) : []\n        };\n        requests.push(request);\n        // Create workflow entry for request approval\n        workflows.push({\n          id: workflows.length + 1,\n          employeeId: employeeId,\n          type: 'Request Approval',\n          details: JSON.stringify({\n            requestId: request.id,\n            requestType: request.type,\n            requesterId: employeeId,\n            message: `Review ${request.type} request #${request.id} from Employee ID ${employee.employeeId}.`\n          }),\n          status: 'Pending'\n        });\n        return ok(request);\n      }\n      function updateRequest() {\n        const id = parseInt(path.split('/').pop());\n        const reqIndex = requests.findIndex(r => r.id === id);\n        if (reqIndex === -1) return error('Request not found');\n        // Log incoming request update\n        console.log('Updating request:', id, 'with data:', body);\n        // Preserve the employeeId\n        const employeeId = requests[reqIndex].employeeId;\n        const oldStatus = requests[reqIndex].status;\n        // Update the request - prioritize any provided fields or keep the existing values\n        requests[reqIndex] = {\n          id,\n          employeeId,\n          type: body.type || requests[reqIndex].type,\n          status: body.status || requests[reqIndex].status,\n          requestItems: body.requestItems ? body.requestItems.map(item => ({\n            name: item.name,\n            quantity: item.quantity || 1\n          })) : body.items ? body.items.map(item => ({\n            name: item.name,\n            quantity: item.quantity || 1\n          })) : requests[reqIndex].requestItems\n        };\n        console.log('Request updated:', requests[reqIndex]);\n        // Find employee info for the workflow\n        const employee = employees.find(e => e.id === employeeId);\n        if (!employee) return error('Employee not found');\n        // Create workflow entry if status changed\n        if (body.status && body.status !== oldStatus) {\n          workflows.push({\n            id: workflows.length + 1,\n            employeeId: employeeId,\n            type: 'Request Status Updated',\n            details: JSON.stringify({\n              requestId: id,\n              requestType: requests[reqIndex].type,\n              requesterId: employeeId,\n              message: `${requests[reqIndex].type} request #${id} from Employee ID ${employee.employeeId} was ${body.status.toLowerCase()}.`\n            }),\n            status: 'Completed'\n          });\n        }\n        // Create workflow for request edits if items changed\n        else if (body.items || body.requestItems) {\n          workflows.push({\n            id: workflows.length + 1,\n            employeeId: employeeId,\n            type: 'Request Approval',\n            details: JSON.stringify({\n              requestId: id,\n              requestType: requests[reqIndex].type,\n              requesterId: employeeId,\n              message: `Review updated ${requests[reqIndex].type} request #${id} from Employee ID ${employee.employeeId}.`\n            }),\n            status: 'Pending'\n          });\n        }\n        return ok(requests[reqIndex]);\n      }\n      function deleteRequest() {\n        const id = parseInt(path.split('/').pop());\n        requests = requests.filter(r => r.id !== id);\n        return ok({\n          message: 'Request deleted'\n        });\n      }\n      function getNextEmployeeId() {\n        console.log('Fake backend: Getting next employee ID');\n        // Find the highest employee ID number\n        let maxId = 0;\n        employees.forEach(emp => {\n          if (emp.employeeId && emp.employeeId.startsWith('EMP')) {\n            const idNum = parseInt(emp.employeeId.substring(3));\n            if (!isNaN(idNum) && idNum > maxId) {\n              maxId = idNum;\n            }\n          }\n        });\n        // Generate the next ID (current max + 1)\n        const nextId = maxId + 1;\n        const nextEmployeeId = 'EMP' + nextId.toString().padStart(3, '0');\n        console.log('Fake backend generated next employee ID:', nextEmployeeId);\n        return ok({\n          employeeId: nextEmployeeId\n        });\n      }\n      // Helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function forbidden() {\n        return throwError(() => ({\n          status: 403,\n          error: {\n            message: 'Forbidden'\n          }\n        }));\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          dateCreated,\n          isVerified,\n          status\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          dateCreated,\n          isVerified,\n          status\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAuthorized(role) {\n        const account = currentAccount();\n        if (!account) return false;\n        return account.role === role;\n      }\n      function idFromUrl() {\n        const urlParts = path.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function newAccountId() {\n        return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n      }\n      function currentAccount() {\n        // check if jwt token is in auth header\n        const authHeader = headers.get('Authorization');\n        if (!authHeader || !authHeader.startsWith('Bearer fake-jwt-token')) return;\n        // check if token is expired\n        const jwtToken = JSON.parse(atob(authHeader.split('.')[1]));\n        const tokenExpired = Date.now() > jwtToken.exp * 1000;\n        if (tokenExpired) return;\n        const account = accounts.find(x => x.id === jwtToken.id);\n        return account;\n      }\n      function generateJwtToken(account) {\n        // create token that expires in 15 minutes\n        const tokenPayload = {\n          exp: Math.round(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000),\n          id: account.id\n        };\n        return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n      }\n      function generateRefreshToken() {\n        const token = new Date().getTime().toString();\n        // add token cookie that expires in 7 days\n        const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();\n        document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\n        return token;\n      }\n      function getRefreshToken() {\n        // get refresh token from cookie\n        return (document.cookie.split(';').find(x => x.includes('fakeRefreshToken')) || '=').split('=')[1];\n      }\n      function authorize(requiredRole, success) {\n        if (!isAuthenticated()) return unauthorized();\n        if (requiredRole && !isAuthorized(requiredRole)) return forbidden();\n        return success();\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","mergeMap","materialize","dematerialize","Role","environment","accountsKey","accounts","JSON","parse","localStorage","getItem","employees","id","employeeId","userId","position","departmentId","hireDate","status","departments","name","description","employeeCount","workflows","type","details","requests","requestItems","quantity","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","apiUrl","path","startsWith","substring","length","pipe","handleRoute","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","forgotPassword","validateResetToken","resetPassword","getAccounts","match","getAccountById","createAccount","updateAccount","deleteAccount","authorize","getEmployees","getNextEmployeeId","Admin","createEmployee","getEmployeeById","getEmployeeWithDetails","updateEmployee","deleteEmployee","transferEmployee","getDepartments","createDepartment","getDepartmentById","updateDepartment","deleteDepartment","getEmployeeWorkflows","getAllWorkflows","createWorkflow","updateWorkflow","getRequests","getRequestsByEmployeeId","getRequestById","createRequest","updateRequest","deleteRequest","handle","email","password","account","find","x","error","isVerified","setTimeout","verifyUrl","location","origin","verificationToken","info","autoClose","refreshTokens","push","generateRefreshToken","setItem","stringify","ok","basicDetails","jwtToken","generateJwtToken","getRefreshToken","unauthorized","includes","filter","isAuthenticated","autoclose","newAccountId","role","User","dateCreated","Date","toISOString","getTime","toString","confirmPassword","token","resetToken","resetTokenExpires","now","resetUrl","map","idFromUrl","currentAccount","isAuthorized","params","Object","assign","employeesWithDetails","employee","department","d","user","a","Department","trim","nextId","padStart","parseInt","isNaN","userExists","some","split","task","pop","e","response","employeeIndex","findIndex","oldDepartmentId","oldDepartment","newDepartment","updatedEmployee","w","r","message","newDepartmentId","fromDepartment","toDepartment","toLowerCase","deptIndex","nameExists","hasEmployees","employeeWorkflows","workflow","workflowIndex","oldStatus","oldWorkflow","detailsText","console","log","requestId","detailsObj","boldMatch","plainMatch","hashMatch","requestIndex","requestsWithUserInfo","userEmail","userRole","userEmployee","employeeIdParam","URL","searchParams","get","filteredRequests","Employee","employeeExists","items","item","requestType","requesterId","reqIndex","maxId","forEach","emp","idNum","nextEmployeeId","forbidden","title","firstName","lastName","urlParts","Math","max","authHeader","atob","tokenExpired","exp","tokenPayload","round","btoa","expires","toUTCString","document","cookie","requiredRole","success","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\nimport { environment } from '@environments/environment';\n\n// array in local storage for accounts\nconst accountsKey = 'angular-10-registration-login-example-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// in-memory data\nlet employees = [\n    { id: 1, employeeId: 'EMP001', userId: 1, position: 'Developer', departmentId: 1, hireDate: '2025-01-01', status: 'Active' },\n    { id: 2, employeeId: 'EMP002', userId: 2, position: 'Designer', departmentId: 2, hireDate: '2025-02-01', status: 'Active' }\n];\n\nlet departments = [\n    { id: 1, name: 'Engineering', description: 'Software development team', employeeCount: 1 },\n    { id: 2, name: 'Marketing', description: 'Marketing team', employeeCount: 1 }\n];\n\nlet workflows = [\n    { id: 1, employeeId: 1, type: 'Onboarding', details: 'Task: Setup workstation', status: 'Pending' }\n];\n\nlet requests = [\n    { id: 1, employeeId: 1, type: 'Equipment', requestItems: [{ name: 'Laptop', quantity: 1 }, { name: 'Monitor', quantity: 2 }], status: 'Pending' },\n    { id: 2, employeeId: 1, type: 'Software', requestItems: [{ name: 'Visual Studio', quantity: 1 }, { name: 'Office 365', quantity: 1 }], status: 'Approved' },\n    { id: 3, employeeId: 2, type: 'Training', requestItems: [{ name: 'Adobe Illustrator Course', quantity: 1 }], status: 'Rejected' },\n    { id: 4, employeeId: 2, type: 'Equipment', requestItems: [{ name: 'Drawing Tablet', quantity: 1 }], status: 'Pending' }\n];\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        // Extract the path from the URL (remove the API prefix if present)\n        const apiUrl = environment.apiUrl;\n        const path = url.startsWith(apiUrl) ? url.substring(apiUrl.length) : url;\n\n        return of(null)\n            .pipe(mergeMap(() => handleRoute()))\n            .pipe(materialize())\n            .pipe(delay(500))\n            .pipe(dematerialize());\n\n        function handleRoute() {\n            switch (true) {\n                // Account endpoints\n                case path.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case path.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case path.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case path.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case path.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case path.endsWith('/accounts/forgot-password') && method === 'POST':\n                    return forgotPassword();\n                case path.endsWith('/accounts/validate-reset-token') && method === 'POST':\n                    return validateResetToken();\n                case path.endsWith('/accounts/reset-password') && method === 'POST':\n                    return resetPassword();\n                case path.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case path.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                case path.endsWith('/accounts') && method === 'POST':\n                    return createAccount();\n                case path.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n                    return updateAccount();\n                case path.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n                    return deleteAccount();\n                \n                // Employee endpoints\n                case path.endsWith('/employees') && method === 'GET':\n                    return authorize(null, () => getEmployees());\n                case path.endsWith('/employees/nextId') && method === 'GET':\n                    return authorize(null, () => getNextEmployeeId());\n                case path.endsWith('/employees') && method === 'POST':\n                    return authorize(Role.Admin, () => createEmployee());\n                case path.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return authorize(null, () => getEmployeeById());\n                case path.match(/\\/employees\\/\\d+\\/with-details$/) && method === 'GET':\n                    return authorize(null, () => getEmployeeWithDetails());\n                case path.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateEmployee());\n                case path.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n                    return authorize(Role.Admin, () => deleteEmployee());\n                case path.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'POST':\n                    return authorize(Role.Admin, () => transferEmployee());\n                \n                // Department endpoints\n                case path.endsWith('/departments') && method === 'GET':\n                    return authorize(null, () => getDepartments());\n                case path.endsWith('/departments') && method === 'POST':\n                    return authorize(Role.Admin, () => createDepartment());\n                case path.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return authorize(null, () => getDepartmentById());\n                case path.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateDepartment());\n                case path.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n                    return authorize(Role.Admin, () => deleteDepartment());\n                \n                // Workflow endpoints\n                case path.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return authorize(null, () => getEmployeeWorkflows());\n                case path.endsWith('/workflows') && method === 'GET':\n                    return authorize(null, () => getAllWorkflows());\n                case path.endsWith('/workflows') && method === 'POST':\n                    return authorize(Role.Admin, () => createWorkflow());\n                case path.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateWorkflow());\n                case path.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateWorkflow());\n                \n                // Request endpoints\n                case path.endsWith('/requests') && method === 'GET':\n                    return authorize(null, () => getRequests());\n                case path.match(/\\/requests\\?employeeId=\\d+$/) && method === 'GET':\n                    return authorize(null, () => getRequestsByEmployeeId());\n                case path.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return authorize(null, () => getRequestById());\n                case path.endsWith('/requests') && method === 'POST':\n                    return authorize(null, () => createRequest());\n                case path.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return authorize(Role.Admin, () => updateRequest());\n                case path.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n                    return authorize(Role.Admin, () => deleteRequest());\n                \n                default:\n                    // pass through any requests not handled above\n                    return next.handle(request);\n            }\n        }\n\n        // Account route functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) {\n                return error('Email does not exist');\n            }\n        \n            if (!account.isVerified) {\n                // Display verification email alert\n                setTimeout(() => {\n                    const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                    alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    `, { autoClose: false });\n                }, 1000);\n        \n                return error('Email is not yet verified');\n            }\n        \n            if (account.password !== password) {\n                return error('Incorrect password');\n            }\n        \n            if (account.status !== 'Active') {\n                return error('Account is inactive. Please contact support.');\n            }\n        \n            account.refreshTokens.push(generateRefreshToken());\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        \n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function refreshToken() {\n            const refreshToken = getRefreshToken();\n\n            if (!refreshToken) return unauthorized();\n\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            if (!account) return unauthorized();\n\n            // replace old refresh token with a new one and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            account.refreshTokens.push(generateRefreshToken());\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken();\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // first registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display verification email in alert\n            setTimeout(() => {\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoclose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function forgotPassword() {\n            const { email } = body;\n            const account = accounts.find(x => x.email === email);\n\n            // always return ok() response to prevent email enumeration\n            if (!account) return ok();\n\n            // create reset token that expires after 24 hours\n            account.resetToken = new Date().getTime().toString();\n            account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display password reset email in alert\n            setTimeout(() => {\n                const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\n                alertService.info(`\n                    <h4>Reset Password Email</h4>\n                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                    <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoClose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function validateResetToken() {\n            const { token } = body;\n            const account = accounts.find(x =>\n                !!x.resetToken &&\n                x.resetToken === token &&\n                new Date() < new Date(x.resetTokenExpires)\n            );\n\n            if (!account) return error(\"Invalid token\");\n\n            return ok();\n        }\n\n        function resetPassword() {\n            const { token, password } = body;\n            const account = accounts.find(x =>\n                !!x.resetToken && x.resetToken === token &&\n                new Date() < new Date(x.resetTokenExpires)\n            );\n\n            if (!account) return error('Invalid token');\n\n            // update password and remove reset token\n            account.password = password;\n            account.isVerified = true;\n            delete account.resetToken;\n            delete account.resetTokenExpires;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n        }\n\n        function createAccount() {\n            if (!isAuthorized(Role.Admin)) return unauthorized();\n\n            const account = body;\n            if (accounts.find(x => x.email === account.email)) {\n                return error(`Email ${account.email} is already registered`);\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            account.status = 'Inactive';\n            account.dateCreated = new Date().toISOString();\n            account.isVerified = true;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function updateAccount() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let params = body;\n            let account = accounts.find(x => x.id == idFromUrl());\n\n            // user accounts can update own profile and admin accounts can update all profiles\n            if (account.id != currentAccount().id && !isAuthorized(Role.Admin)) {\n                return unauthorized();\n            }\n\n            // only update password if included\n            if (!params.password) {\n                delete params.password;\n            }\n            // don't save confirm password\n            delete params.confirmPassword;\n\n            // update and save account\n            Object.assign(account, params);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok(basicDetails(account));\n        }\n\n        function deleteAccount() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can delete own account and admin accounts can delete any account\n            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n                return unauthorized();\n            }\n\n            // delete account then save\n            accounts = accounts.filter(x => x.id !== idFromUrl());\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        // Employee route functions\n        function getEmployees() {\n            // Enhance employees with department and user information\n            const employeesWithDetails = employees.map(employee => {\n                const department = departments.find(d => d.id === employee.departmentId);\n                const user = accounts.find(a => a.id === employee.userId);\n                \n                return {\n                    ...employee,\n                    Department: department ? { id: department.id, name: department.name } : null,\n                    User: user ? { id: user.id, email: user.email } : null\n                };\n            });\n            \n            return ok(employeesWithDetails);\n        }\n\n        function createEmployee() {\n            // Generate employee ID in format 'EMP' + padded number if not provided\n            let employeeId = body.employeeId;\n            if (!employeeId || !employeeId.trim()) {\n                const nextId = employees.length + 1;\n                employeeId = 'EMP' + nextId.toString().padStart(3, '0');\n            }\n            \n            // Verify the userId exists in accounts\n            const userId = parseInt(body.userId);\n            if (isNaN(userId)) {\n                return error('Please select a valid user');\n            }\n            \n            const userExists = accounts.some(a => a.id === userId);\n            if (!userExists) {\n                return error('User not found');\n            }\n            \n            // Verify the departmentId exists\n            const departmentId = parseInt(body.departmentId);\n            if (isNaN(departmentId)) {\n                return error('Please select a valid department');\n            }\n            \n            const department = departments.find(d => d.id === departmentId);\n            if (!department) {\n                return error('Department not found');\n            }\n            \n            // Create the employee with auto-generated ID\n            const nextId = employees.length + 1;\n            const employee = { \n                id: nextId, \n                employeeId: employeeId, \n                userId: userId,\n                departmentId: departmentId,\n                position: body.position || '',\n                hireDate: body.hireDate || new Date().toISOString().split('T')[0],\n                status: body.status || 'Active'\n            };\n            \n            // Add to employees array\n            employees.push(employee);\n            \n            // Update department employee count\n            department.employeeCount++;\n            \n            // Create onboarding workflow\n            workflows.push({\n                id: workflows.length + 1,\n                employeeId: nextId,\n                type: 'Onboarding',\n                details: JSON.stringify({\n                    task: 'Setup workstation',\n                    employeeId: employee.employeeId,\n                    position: employee.position\n                }),\n                status: 'Pending'\n            });\n            \n            return ok(employee);\n        }\n\n        function getEmployeeById() {\n            const id = parseInt(path.split('/').pop()!);\n            const employee = employees.find(e => e.id === id);\n            if (!employee) return error('Employee not found');\n            return ok(employee);\n        }\n        \n        function getEmployeeWithDetails() {\n            const id = parseInt(path.split('/').pop().split('/')[0]);\n            const employee = employees.find(e => e.id === id);\n            \n            if (!employee) return error('Employee not found');\n            \n            // Get user account details\n            const user = accounts.find(a => a.id === employee.userId);\n            \n            // Get department details\n            const department = departments.find(d => d.id === employee.departmentId);\n            \n            // Create a response with the related details\n            const response = {\n                ...employee,\n                User: user ? {\n                    id: user.id,\n                    email: user.email,\n                    role: user.role\n                } : null,\n                Department: department ? {\n                    id: department.id,\n                    name: department.name\n                } : null\n            };\n            \n            return ok(response);\n        }\n\n        function updateEmployee() {\n            const id = parseInt(path.split('/').pop()!);\n            const employeeIndex = employees.findIndex(e => e.id === id);\n            \n            if (employeeIndex === -1) return error('Employee not found');\n            \n            // Parse values to ensure they're numbers\n            let userId = body.userId;\n            if (userId && typeof userId === 'string') {\n                userId = parseInt(userId);\n            }\n            \n            let departmentId = body.departmentId;\n            if (departmentId && typeof departmentId === 'string') {\n                departmentId = parseInt(departmentId);\n            }\n            \n            // Check if user exists if userId is being updated\n            if (userId) {\n                const userExists = accounts.some(a => a.id === userId);\n                if (!userExists) {\n                    return error('User not found');\n                }\n            }\n            \n            // Check if department exists if departmentId is being updated\n            if (departmentId && departmentId !== employees[employeeIndex].departmentId) {\n                const oldDepartmentId = employees[employeeIndex].departmentId;\n                \n                const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n                const newDepartment = departments.find(d => d.id === departmentId);\n                \n                if (!newDepartment) {\n                    return error('Department not found');\n                }\n                \n                // Update department employee counts\n                if (oldDepartment) oldDepartment.employeeCount--;\n                newDepartment.employeeCount++;\n            }\n            \n            // Keep the employeeId unchanged\n            const employeeId = employees[employeeIndex].employeeId;\n            \n            // Create updated employee object with parsed values\n            const updatedEmployee = {\n                id,\n                employeeId,\n                userId: userId || employees[employeeIndex].userId,\n                departmentId: departmentId || employees[employeeIndex].departmentId,\n                position: body.position || employees[employeeIndex].position,\n                hireDate: body.hireDate || employees[employeeIndex].hireDate,\n                status: body.status || employees[employeeIndex].status\n            };\n            \n            // Update the employee\n            employees[employeeIndex] = updatedEmployee;\n            \n            return ok(updatedEmployee);\n        }\n\n        function deleteEmployee() {\n            const id = parseInt(path.split('/').pop()!);\n            const employee = employees.find(e => e.id === id);\n            \n            if (!employee) return error('Employee not found');\n            \n            // Update department employee count\n            const department = departments.find(d => d.id === employee.departmentId);\n            if (department) {\n                department.employeeCount--;\n            }\n            \n            // Delete related workflows\n            workflows = workflows.filter(w => w.employeeId !== id);\n            \n            // Delete related requests\n            requests = requests.filter(r => r.employeeId !== id);\n            \n            // Delete the employee\n            employees = employees.filter(e => e.id !== id);\n            \n            return ok({ message: 'Employee deleted' });\n        }\n\n        function transferEmployee() {\n            const id = parseInt(path.split('/')[2]);\n            const employee = employees.find(e => e.id === id);\n            if (!employee) return error('Employee not found');\n            \n            // Get department information\n            const oldDepartmentId = employee.departmentId;\n            const newDepartmentId = body.departmentId;\n            const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n            const newDepartment = departments.find(d => d.id === newDepartmentId);\n            \n            // Update employee's department\n            employee.departmentId = newDepartmentId;\n            \n            // Update department counts\n            if (oldDepartment) oldDepartment.employeeCount--;\n            if (newDepartment) newDepartment.employeeCount++;\n            \n            // Create transfer workflow\n            workflows.push({\n                id: workflows.length + 1,\n                employeeId: id,\n                type: 'Transfer',\n                details: JSON.stringify({\n                    task: 'Department transfer',\n                    fromDepartment: oldDepartment?.name || 'Unknown',\n                    toDepartment: newDepartment?.name || 'Unknown',\n                    employeeId: employee.employeeId\n                }),\n                status: 'Pending'\n            });\n            \n            return ok({ message: 'Employee transferred' });\n        }\n\n        // Department route functions\n        function getDepartments() {\n            return ok(departments);\n        }\n\n        function getDepartmentById() {\n            const id = parseInt(path.split('/').pop()!);\n            const department = departments.find(d => d.id === id);\n            \n            if (!department) return error('Department not found');\n            \n            return ok(department);\n        }\n\n        function createDepartment() {\n            // Check if department with same name already exists\n            if (departments.some(d => d.name.toLowerCase() === body.name.toLowerCase())) {\n                return error('Department with this name already exists');\n            }\n            \n            // Create department with initial employee count of 0\n            const department = { \n                id: departments.length + 1, \n                name: body.name,\n                description: body.description,\n                employeeCount: 0 \n            };\n            \n            departments.push(department);\n            return ok(department);\n        }\n\n        function updateDepartment() {\n            const id = parseInt(path.split('/').pop()!);\n            const deptIndex = departments.findIndex(d => d.id === id);\n            \n            if (deptIndex === -1) return error('Department not found');\n            \n            // Check if department with same name already exists (excluding current department)\n            if (body.name && body.name !== departments[deptIndex].name) {\n                const nameExists = departments.some(d => \n                    d.id !== id && \n                    d.name.toLowerCase() === body.name.toLowerCase()\n                );\n                \n                if (nameExists) {\n                    return error('Department with this name already exists');\n                }\n            }\n            \n            // Preserve the employee count\n            const employeeCount = departments[deptIndex].employeeCount;\n            \n            // Update department\n            departments[deptIndex] = {\n                id,\n                name: body.name || departments[deptIndex].name,\n                description: body.description || departments[deptIndex].description,\n                employeeCount\n            };\n            \n            return ok(departments[deptIndex]);\n        }\n\n        function deleteDepartment() {\n            const id = parseInt(path.split('/').pop()!);\n            const department = departments.find(d => d.id === id);\n            \n            if (!department) return error('Department not found');\n            \n            // Check if there are employees in this department\n            const hasEmployees = employees.some(e => e.departmentId === id);\n            if (hasEmployees) {\n                return error('Cannot delete department with employees. Transfer employees first.');\n            }\n            \n            // Delete the department\n            departments = departments.filter(d => d.id !== id);\n            \n            return ok({ message: 'Department deleted' });\n        }\n\n        // Workflow route functions\n        function getEmployeeWorkflows() {\n            const employeeId = parseInt(path.split('/').pop()!);\n            const employeeWorkflows = workflows.filter(w => w.employeeId === employeeId);\n            return ok(employeeWorkflows);\n        }\n\n        function getAllWorkflows() {\n            return ok(workflows);\n        }\n\n        function createWorkflow() {\n            const workflow = { id: workflows.length + 1, ...body };\n            workflows.push(workflow);\n            return ok(workflow);\n        }\n\n        function updateWorkflow() {\n            // Handle both direct update and status update endpoints\n            let id;\n            if (path.includes('/workflows/') && path.includes('/status')) {\n                // Extract ID from paths like /workflows/123/status\n                id = parseInt(path.split('/')[2]);\n            } else {\n                // Standard path like /workflows/123\n                id = parseInt(path.split('/').pop()!);\n            }\n            \n            const workflowIndex = workflows.findIndex(w => w.id === id);\n            \n            if (workflowIndex === -1) return error('Workflow not found');\n            \n            // Store previous status\n            const oldStatus = workflows[workflowIndex].status;\n            const oldWorkflow = { ...workflows[workflowIndex] };\n            \n            // Update workflow\n            workflows[workflowIndex] = {\n                ...workflows[workflowIndex],\n                ...body,\n                id // preserve id\n            };\n            \n            // Check if this is a request approval workflow and status changed\n            if ((workflows[workflowIndex].type === 'Request Approval' || \n                 workflows[workflowIndex].type.includes('Request')) && \n                body.status && \n                body.status !== oldStatus) {\n                \n                // Try to extract requestId from details field\n                const detailsText = workflows[workflowIndex].details || '';\n                console.log('Workflow details text:', detailsText);\n                \n                // Extract requestId - first try to parse as JSON\n                let requestId = null;\n                try {\n                    // Try to parse details as JSON\n                    if (detailsText.trim().startsWith('{')) {\n                        const detailsObj = JSON.parse(detailsText);\n                        if (detailsObj.requestId) {\n                            requestId = parseInt(detailsObj.requestId.toString());\n                            console.log('Extracted requestId from JSON:', requestId);\n                        }\n                    }\n                } catch (e) {\n                    console.log('Failed to parse details as JSON:', e);\n                }\n                \n                // If JSON parsing failed, try regex patterns\n                if (!requestId) {\n                    // Try matching standard format with HTML bold tags\n                    const boldMatch = detailsText.match(/<b>requestId:<\\/b>\\s*(\\d+)/i);\n                    if (boldMatch && boldMatch[1]) {\n                        requestId = parseInt(boldMatch[1]);\n                    }\n                    \n                    // Try matching without HTML tags\n                    if (!requestId) {\n                        const plainMatch = detailsText.match(/requestId:\\s*(\\d+)/i);\n                        if (plainMatch && plainMatch[1]) {\n                            requestId = parseInt(plainMatch[1]);\n                        }\n                    }\n                    \n                    // Try extracting from any #NUMBER pattern if nothing else worked\n                    if (!requestId) {\n                        const hashMatch = detailsText.match(/request\\s+#(\\d+)/i);\n                        if (hashMatch && hashMatch[1]) {\n                            requestId = parseInt(hashMatch[1]);\n                        }\n                    }\n                }\n                \n                console.log('Final extracted requestId:', requestId);\n                \n                if (requestId) {\n                    const requestIndex = requests.findIndex(r => r.id === requestId);\n                    \n                    if (requestIndex !== -1) {\n                        console.log('Found request at index:', requestIndex);\n                        // Update request status based on workflow status\n                        if (body.status === 'Approved') {\n                            requests[requestIndex].status = 'Approved';\n                            console.log('Updated request status to Approved');\n                        } else if (body.status === 'Rejected') {\n                            requests[requestIndex].status = 'Rejected';\n                            console.log('Updated request status to Rejected');\n                        } else if (body.status === 'Pending') {\n                            requests[requestIndex].status = 'Pending';\n                            console.log('Updated request status to Pending');\n                        }\n                    } else {\n                        console.log('Request not found with ID:', requestId);\n                    }\n                } else {\n                    console.log('Could not extract requestId from details:', detailsText);\n                }\n            }\n            \n            return ok(workflows[workflowIndex]);\n        }\n\n        // Request route functions\n        function getRequests() {\n            // Add employee and user information to requests\n            const requestsWithUserInfo = requests.map(request => {\n                const employee = employees.find(e => e.id === request.employeeId);\n                let userEmail = 'Unknown';\n                let userRole = 'Unknown';\n                \n                if (employee) {\n                    const user = accounts.find(a => a.id === employee.userId);\n                    if (user) {\n                        userEmail = user.email;\n                        userRole = user.role;\n                    }\n                }\n                \n                return {\n                    ...request,\n                    employee: employee ? { \n                        id: employee.id, \n                        employeeId: employee.employeeId \n                    } : null,\n                    userEmail,\n                    userRole\n                };\n            });\n            \n            // If user is not an admin, only return their own requests\n            const account = currentAccount();\n            if (account && account.role !== Role.Admin) {\n                const employee = employees.find(e => e.userId === account.id);\n                if (employee) {\n                    return ok(requestsWithUserInfo.filter(r => r.employeeId === employee.id));\n                }\n                return ok([]);\n            }\n            \n            return ok(requestsWithUserInfo);\n        }\n\n        function getRequestById() {\n            const id = parseInt(path.split('/').pop()!);\n            const request = requests.find(r => r.id === id);\n            \n            if (!request) return error('Request not found');\n            \n            // Get employee and user information\n            const employee = employees.find(e => e.id === request.employeeId);\n            let userEmail = 'Unknown';\n            let userRole = 'Unknown';\n            \n            if (employee) {\n                const user = accounts.find(a => a.id === employee.userId);\n                if (user) {\n                    userEmail = user.email;\n                    userRole = user.role;\n                }\n            }\n            \n            // Check if the current user is allowed to view this request\n            const account = currentAccount();\n            if (account && account.role !== Role.Admin) {\n                const userEmployee = employees.find(e => e.userId === account.id);\n                if (!userEmployee || userEmployee.id !== request.employeeId) {\n                    return error('You are not authorized to view this request');\n                }\n            }\n            \n            // Return request with user and employee info\n            return ok({\n                ...request,\n                employee: employee ? { \n                    id: employee.id, \n                    employeeId: employee.employeeId \n                } : null,\n                userEmail,\n                userRole\n            });\n        }\n\n        function getRequestsByEmployeeId() {\n            const employeeIdParam = new URL(url).searchParams.get('employeeId');\n            if (!employeeIdParam) return error('Employee ID is required');\n            \n            const employeeId = parseInt(employeeIdParam);\n            if (isNaN(employeeId)) return error('Invalid employee ID');\n            \n            // Check if employee exists\n            const employee = employees.find(e => e.id === employeeId);\n            if (!employee) return error('Employee not found');\n            \n            // Get user information\n            const user = accounts.find(a => a.id === employee.userId);\n            let userEmail = 'Unknown';\n            let userRole = 'Unknown';\n            \n            if (user) {\n                userEmail = user.email;\n                userRole = user.role;\n            }\n            \n            // Get department information\n            const department = departments.find(d => d.id === employee.departmentId);\n            \n            // Filter requests by employee ID\n            const filteredRequests = requests.filter(r => r.employeeId === employeeId).map(request => ({\n                ...request,\n                Employee: { \n                    ...employee,\n                    User: user ? {\n                        id: user.id,\n                        email: user.email,\n                        role: user.role\n                    } : null,\n                    Department: department ? {\n                        id: department.id,\n                        name: department.name\n                    } : null\n                },\n                userEmail,\n                userRole\n            }));\n            \n            return ok(filteredRequests);\n        }\n\n        function createRequest() {\n            const account = currentAccount();\n            if (!account) return unauthorized();\n            \n            // Use employeeId from body if provided (for admin users)\n            // Otherwise, find employee associated with current user\n            let employeeId;\n            if (body.employeeId && account.role === Role.Admin) {\n                // Admin users can create requests for any employee\n                employeeId = parseInt(body.employeeId);\n                \n                // Verify that the employee exists\n                const employeeExists = employees.some(e => e.id === employeeId);\n                if (!employeeExists) {\n                    return error('Selected employee not found');\n                }\n            } else {\n                // Regular users can only create requests for themselves\n                const employee = employees.find(e => e.userId === account.id);\n                if (!employee) {\n                    return error('No employee record found for current user');\n                }\n                employeeId = employee.id;\n            }\n            \n            // Find employee record for the request\n            const employee = employees.find(e => e.id === employeeId);\n            \n            // Create request with proper structure\n            const request = { \n                id: requests.length + 1,\n                employeeId: employeeId,\n                type: body.type || 'Equipment',\n                status: 'Pending',\n                requestItems: body.items ? body.items.map(item => ({\n                    name: item.name,\n                    quantity: item.quantity || 1\n                })) : []\n            };\n            \n            requests.push(request);\n            \n            // Create workflow entry for request approval\n            workflows.push({\n                id: workflows.length + 1,\n                employeeId: employeeId,\n                type: 'Request Approval',\n                details: JSON.stringify({\n                    requestId: request.id,\n                    requestType: request.type,\n                    requesterId: employeeId,\n                    message: `Review ${request.type} request #${request.id} from Employee ID ${employee.employeeId}.`\n                }),\n                status: 'Pending'\n            });\n            \n            return ok(request);\n        }\n\n        function updateRequest() {\n            const id = parseInt(path.split('/').pop()!);\n            const reqIndex = requests.findIndex(r => r.id === id);\n            \n            if (reqIndex === -1) return error('Request not found');\n            \n            // Log incoming request update\n            console.log('Updating request:', id, 'with data:', body);\n            \n            // Preserve the employeeId\n            const employeeId = requests[reqIndex].employeeId;\n            const oldStatus = requests[reqIndex].status;\n            \n            // Update the request - prioritize any provided fields or keep the existing values\n            requests[reqIndex] = { \n                id,\n                employeeId,\n                type: body.type || requests[reqIndex].type,\n                status: body.status || requests[reqIndex].status,\n                requestItems: body.requestItems ? body.requestItems.map(item => ({\n                    name: item.name,\n                    quantity: item.quantity || 1\n                })) : (body.items ? body.items.map(item => ({\n                    name: item.name,\n                    quantity: item.quantity || 1\n                })) : requests[reqIndex].requestItems)\n            };\n            \n            console.log('Request updated:', requests[reqIndex]);\n            \n            // Find employee info for the workflow\n            const employee = employees.find(e => e.id === employeeId);\n            if (!employee) return error('Employee not found');\n            \n            // Create workflow entry if status changed\n            if (body.status && body.status !== oldStatus) {\n                workflows.push({\n                    id: workflows.length + 1,\n                    employeeId: employeeId,\n                    type: 'Request Status Updated',\n                    details: JSON.stringify({\n                        requestId: id,\n                        requestType: requests[reqIndex].type,\n                        requesterId: employeeId,\n                        message: `${requests[reqIndex].type} request #${id} from Employee ID ${employee.employeeId} was ${body.status.toLowerCase()}.`\n                    }),\n                    status: 'Completed'\n                });\n            } \n            // Create workflow for request edits if items changed\n            else if (body.items || body.requestItems) {\n                workflows.push({\n                    id: workflows.length + 1,\n                    employeeId: employeeId,\n                    type: 'Request Approval',\n                    details: JSON.stringify({\n                        requestId: id,\n                        requestType: requests[reqIndex].type,\n                        requesterId: employeeId,\n                        message: `Review updated ${requests[reqIndex].type} request #${id} from Employee ID ${employee.employeeId}.`\n                    }),\n                    status: 'Pending'\n                });\n            }\n            \n            return ok(requests[reqIndex]);\n        }\n\n        function deleteRequest() {\n            const id = parseInt(path.split('/').pop()!);\n            requests = requests.filter(r => r.id !== id);\n            return ok({ message: 'Request deleted' });\n        }\n\n        function getNextEmployeeId() {\n            console.log('Fake backend: Getting next employee ID');\n            \n            // Find the highest employee ID number\n            let maxId = 0;\n            employees.forEach(emp => {\n                if (emp.employeeId && emp.employeeId.startsWith('EMP')) {\n                    const idNum = parseInt(emp.employeeId.substring(3));\n                    if (!isNaN(idNum) && idNum > maxId) {\n                        maxId = idNum;\n                    }\n                }\n            });\n            \n            // Generate the next ID (current max + 1)\n            const nextId = maxId + 1;\n            const nextEmployeeId = 'EMP' + nextId.toString().padStart(3, '0');\n            \n            console.log('Fake backend generated next employee ID:', nextEmployeeId);\n            return ok({ employeeId: nextEmployeeId });\n        }\n\n        // Helper functions\n        function ok(body?) {\n            return of(new HttpResponse({ status: 200, body }));\n        }\n\n        function error(message) {\n            return throwError(() => ({ error: { message } }));\n        }\n\n        function unauthorized() {\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }));\n        }\n\n        function forbidden() {\n            return throwError(() => ({ status: 403, error: { message: 'Forbidden' } }));\n        }\n\n        function basicDetails(account) {\n            const { id, title, firstName, lastName, email, role, dateCreated, isVerified, status } = account;\n            return { id, title, firstName, lastName, email, role, dateCreated, isVerified, status };\n        }\n\n        function isAuthenticated() {\n            return !!currentAccount();\n        }\n\n        function isAuthorized(role) {\n            const account = currentAccount();\n            if (!account) return false;\n            return account.role === role;\n        }\n\n        function idFromUrl() {\n            const urlParts = path.split('/');\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n\n        function newAccountId() {\n            return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n        }\n\n        function currentAccount() {\n            // check if jwt token is in auth header\n            const authHeader = headers.get('Authorization');\n            if (!authHeader || !authHeader.startsWith('Bearer fake-jwt-token')) return;\n\n            // check if token is expired\n            const jwtToken = JSON.parse(atob(authHeader.split('.')[1]));\n            const tokenExpired = Date.now() > (jwtToken.exp * 1000);\n            if (tokenExpired) return;\n\n            const account = accounts.find(x => x.id === jwtToken.id);\n            return account;\n        }\n\n        function generateJwtToken(account) {\n            // create token that expires in 15 minutes\n            const tokenPayload = {\n                exp: Math.round(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000),\n                id: account.id\n            };\n            return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n        }\n\n        function generateRefreshToken() {\n            const token = new Date().getTime().toString();\n\n            // add token cookie that expires in 7 days\n            const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();\n            document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\n            return token;\n        }\n\n        function getRefreshToken() {\n            // get refresh token from cookie\n            return (document.cookie.split(';').find(x => x.includes('fakeRefreshToken')) || '=').split('=')[1];\n        }\n\n        function authorize(requiredRole: Role | null, success: () => Observable<HttpEvent<any>>) {\n            if (!isAuthenticated()) return unauthorized();\n            if (requiredRole && !isAuthorized(requiredRole)) return forbidden();\n            return success();\n        }\n    }\n}\n\nexport const fakeBackendProvider = {\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}