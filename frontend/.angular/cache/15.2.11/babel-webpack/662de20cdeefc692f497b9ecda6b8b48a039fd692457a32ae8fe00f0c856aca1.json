{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services/request.service\";\nimport * as i4 from \"@app/_services/employee.service\";\nimport * as i5 from \"@app/_services/alert.service\";\nfunction AddEditRequestComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction AddEditRequestComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13)(2, \"div\", 14)(3, \"label\", 5);\n    i0.ɵɵtext(4, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 15);\n    i0.ɵɵlistener(\"ngModelChange\", function AddEditRequestComponent_div_18_Template_input_ngModelChange_5_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const item_r2 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(item_r2.name = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 14)(7, \"label\", 5);\n    i0.ɵɵtext(8, \"Quantity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"input\", 16);\n    i0.ɵɵlistener(\"ngModelChange\", function AddEditRequestComponent_div_18_Template_input_ngModelChange_9_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const item_r2 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(item_r2.quantity = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\", 17)(11, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function AddEditRequestComponent_div_18_Template_button_click_11_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.removeItem(i_r3));\n    });\n    i0.ɵɵtext(12, \"Remove\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngModel\", item_r2.name);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", item_r2.quantity);\n  }\n}\nexport let AddEditRequestComponent = /*#__PURE__*/(() => {\n  class AddEditRequestComponent {\n    // For dynamic items, request.items will be managed by a FormArray\n    constructor(formBuilder, route, router, requestService,\n    // Use RequestService\n    employeeService,\n    // Use EmployeeService\n    alertService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.requestService = requestService;\n      this.employeeService = employeeService;\n      this.alertService = alertService;\n      this.id = null;\n      this.loading = false;\n      this.submitted = false;\n      this.employees = []; // For the employee dropdown\n    }\n\n    ngOnInit() {\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      // Initialize the form structure\n      this.form = this.formBuilder.group({\n        type: ['Equipment', Validators.required],\n        employeeId: [null, Validators.required],\n        requestItems: this.formBuilder.array([], Validators.required) // Array for items\n      });\n\n      this.loadEmployeesForDropdown(); // Load employees for the dropdown\n      if (!this.isAddMode && this.id) {\n        this.loadRequestData();\n      } else {\n        // For add mode, add one default item if desired\n        this.addItem();\n      }\n    }\n    // Convenience getter for easy access to form fields in template\n    get f() {\n      return this.form.controls;\n    }\n    // Convenience getter for requestItems FormArray\n    get requestItems() {\n      return this.form.get('requestItems');\n    }\n    loadEmployeesForDropdown() {\n      this.employeeService.getAll() // Assuming getAll returns a list of employees\n      .pipe(first()).subscribe({\n        next: employees => {\n          // Map to a simpler structure if needed, or use employees directly if they have id and a display name\n          this.employees = employees.map(emp => ({\n            id: emp.id,\n            employeeId: emp.employeeId,\n            fullName: `${emp.firstName || ''} ${emp.lastName || ''}`.trim() || emp.email // Construct full name or use email\n          }));\n        },\n\n        error: err => {\n          var _a;\n          this.alertService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.message || 'Failed to load employees');\n        }\n      });\n    }\n    loadRequestData() {\n      if (!this.id) return;\n      this.loading = true;\n      this.requestService.getById(this.id) // Use RequestService\n      .pipe(first()).subscribe({\n        next: request => {\n          this.form.patchValue({\n            type: request.type,\n            employeeId: request.employeeId\n          });\n          // Clear existing items and populate with fetched items\n          this.requestItems.clear();\n          request.requestItems.forEach(item => {\n            this.requestItems.push(this.createItemFormGroup(item.name, item.quantity));\n          });\n          this.loading = false;\n        },\n        error: err => {\n          var _a;\n          this.alertService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.message || 'Failed to load request');\n          this.loading = false;\n        }\n      });\n    }\n    createItemFormGroup(name = '', quantity = 1) {\n      return this.formBuilder.group({\n        name: [name, Validators.required],\n        quantity: [quantity, [Validators.required, Validators.min(1)]]\n      });\n    }\n    addItem() {\n      this.requestItems.push(this.createItemFormGroup());\n    }\n    removeItem(index) {\n      this.requestItems.removeAt(index);\n    }\n    onSubmit() {\n      var _a;\n      this.submitted = true;\n      this.alertService.clear();\n      if (this.form.invalid) {\n        // Mark all fields as touched to show validation errors\n        this.form.markAllAsTouched();\n        // If requestItems is empty after trying to submit, show specific error\n        if (this.requestItems.length === 0 && ((_a = this.form.get('requestItems')) === null || _a === void 0 ? void 0 : _a.hasError('required'))) {\n          this.alertService.error('At least one item is required.');\n        }\n        return;\n      }\n      if (this.loading) return;\n      this.loading = true;\n      const requestData = this.form.value;\n      if (this.isAddMode) {\n        this.createRequest(requestData);\n      } else if (this.id) {\n        this.updateRequest(this.id, requestData);\n      }\n    }\n    createRequest(requestData) {\n      this.requestService.create(requestData) // Use RequestService\n      .pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request created successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/admin/requests']); // Adjust path as needed\n        },\n\n        error: err => {\n          var _a;\n          this.alertService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.message || 'Failed to create request');\n          this.loading = false;\n        }\n      });\n    }\n    updateRequest(id, requestData) {\n      this.requestService.update(id, requestData) // Use RequestService\n      .pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request updated successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/admin/requests']); // Adjust path as needed\n        },\n\n        error: err => {\n          var _a;\n          this.alertService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.message || 'Failed to update request');\n          this.loading = false;\n        }\n      });\n    }\n    onCancel() {\n      this.router.navigate(['/admin/requests']); // Adjust path as needed\n    }\n  }\n\n  AddEditRequestComponent.ɵfac = function AddEditRequestComponent_Factory(t) {\n    return new (t || AddEditRequestComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.RequestService), i0.ɵɵdirectiveInject(i4.EmployeeService), i0.ɵɵdirectiveInject(i5.AlertService));\n  };\n  AddEditRequestComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditRequestComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 26,\n    vars: 4,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"mb-3\"], [1, \"form-label\"], [1, \"form-select\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"border p-2 mb-2\", 4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"text-center\"], [1, \"btn\", \"btn-primary\", \"me-2\", 3, \"click\"], [1, \"alert\", \"alert-danger\"], [1, \"border\", \"p-2\", \"mb-2\"], [1, \"row\"], [1, \"col-md-5\"], [\"type\", \"text\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"number\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"col-md-2\", \"d-flex\", \"align-items-end\"], [1, \"btn\", \"btn-danger\", 3, \"click\"]],\n    template: function AddEditRequestComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtemplate(4, AddEditRequestComponent_div_4_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n        i0.ɵɵtext(7, \"Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"select\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function AddEditRequestComponent_Template_select_ngModelChange_8_listener($event) {\n          return ctx.request.type = $event;\n        });\n        i0.ɵɵelementStart(9, \"option\");\n        i0.ɵɵtext(10, \"Equipment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"option\");\n        i0.ɵɵtext(12, \"Leave\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"option\");\n        i0.ɵɵtext(14, \"Resources\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(15, \"div\", 4)(16, \"label\", 5);\n        i0.ɵɵtext(17, \"Items\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, AddEditRequestComponent_div_18_Template, 13, 2, \"div\", 7);\n        i0.ɵɵelementStart(19, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function AddEditRequestComponent_Template_button_click_19_listener() {\n          return ctx.addItem();\n        });\n        i0.ɵɵtext(20, \"Add Item\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 9)(22, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function AddEditRequestComponent_Template_button_click_22_listener() {\n          return ctx.save();\n        });\n        i0.ɵɵtext(23, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function AddEditRequestComponent_Template_button_click_24_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵtext(25, \"Cancel\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.id ? \"Edit\" : \"Add\", \" Request\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.request.type);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngForOf\", ctx.request.items);\n      }\n    },\n    encapsulation: 2\n  });\n  return AddEditRequestComponent;\n})();","map":{"version":3,"mappings":"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","names":["Validators","first","i0","AddEditRequestComponent","constructor","formBuilder","route","router","requestService","employeeService","alertService","ngOnInit","id","snapshot","params","isAddMode","form","group","type","required","employeeId","requestItems","array","loadEmployeesForDropdown","loadRequestData","addItem","f","controls","get","getAll","pipe","subscribe","next","employees","map","emp","fullName","firstName","lastName","trim","email","error","err","message","loading","getById","request","patchValue","clear","forEach","item","push","createItemFormGroup","name","quantity","min","removeItem","index","removeAt","onSubmit","submitted","invalid","markAllAsTouched","length","hasError","requestData","value","createRequest","updateRequest","create","success","keepAfterRouteChange","navigate","update","onCancel","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\requests\\add-edit.component.ts","E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\requests\\add-edit.component.html"],"sourcesContent":["// src/app/requests/add-edit.component.ts\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, FormArray, Validators, AbstractControl } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n// Assuming you'll have dedicated services\r\nimport { RequestService } from '@app/_services/request.service'; // Create this service\r\nimport { EmployeeService } from '@app/_services/employee.service'; // Create or use existing\r\nimport { AlertService } from '@app/_services/alert.service';\r\n\r\nimport { AppRequest, EmployeeForDropdown } from '../_helpers/fake-backend'; // Adjust path to your models\r\n\r\n@Component({\r\n  templateUrl: 'add-edit.component.html',\r\n  // Add styleUrls if needed\r\n})\r\nexport class AddEditRequestComponent implements OnInit {\r\n  form!: FormGroup;\r\n  id: string | null = null;\r\n  isAddMode!: boolean;\r\n  loading = false;\r\n  submitted = false;\r\n\r\n  employees: EmployeeForDropdown[] = []; // For the employee dropdown\r\n\r\n  // For dynamic items, request.items will be managed by a FormArray\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private requestService: RequestService,     // Use RequestService\r\n    private employeeService: EmployeeService,   // Use EmployeeService\r\n    private alertService: AlertService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.id = this.route.snapshot.params['id'];\r\n    this.isAddMode = !this.id;\r\n\r\n    // Initialize the form structure\r\n    this.form = this.formBuilder.group({\r\n      type: ['Equipment', Validators.required], // Default to 'Equipment'\r\n      employeeId: [null, Validators.required],  // Employee ID\r\n      requestItems: this.formBuilder.array([], Validators.required) // Array for items\r\n    });\r\n\r\n    this.loadEmployeesForDropdown(); // Load employees for the dropdown\r\n\r\n    if (!this.isAddMode && this.id) {\r\n      this.loadRequestData();\r\n    } else {\r\n      // For add mode, add one default item if desired\r\n      this.addItem();\r\n    }\r\n  }\r\n\r\n  // Convenience getter for easy access to form fields in template\r\n  get f(): { [key: string]: AbstractControl } { return this.form.controls; }\r\n  // Convenience getter for requestItems FormArray\r\n  get requestItems(): FormArray {\r\n    return this.form.get('requestItems') as FormArray;\r\n  }\r\n\r\n  loadEmployeesForDropdown() {\r\n    this.employeeService.getAll() // Assuming getAll returns a list of employees\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (employees) => {\r\n          // Map to a simpler structure if needed, or use employees directly if they have id and a display name\r\n          this.employees = employees.map(emp => ({\r\n            id: emp.id, // The actual ID to store\r\n            employeeId: emp.employeeId, // The display ID like \"EMP001\"\r\n            fullName: `${emp.firstName || ''} ${emp.lastName || ''}`.trim() || emp.email // Construct full name or use email\r\n          }));\r\n        },\r\n        error: (err: HttpErrorResponse) => {\r\n          this.alertService.error(err.error?.message || err.message || 'Failed to load employees');\r\n        }\r\n      });\r\n  }\r\n\r\n  loadRequestData() {\r\n    if (!this.id) return;\r\n    this.loading = true;\r\n    this.requestService.getById(this.id) // Use RequestService\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (request: AppRequest) => {\r\n          this.form.patchValue({\r\n            type: request.type,\r\n            employeeId: request.employeeId\r\n          });\r\n          // Clear existing items and populate with fetched items\r\n          this.requestItems.clear();\r\n          request.requestItems.forEach(item => {\r\n            this.requestItems.push(this.createItemFormGroup(item.name, item.quantity));\r\n          });\r\n          this.loading = false;\r\n        },\r\n        error: (err: HttpErrorResponse) => {\r\n          this.alertService.error(err.error?.message || err.message || 'Failed to load request');\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  createItemFormGroup(name: string = '', quantity: number = 1): FormGroup {\r\n    return this.formBuilder.group({\r\n      name: [name, Validators.required],\r\n      quantity: [quantity, [Validators.required, Validators.min(1)]]\r\n    });\r\n  }\r\n\r\n  addItem() {\r\n    this.requestItems.push(this.createItemFormGroup());\r\n  }\r\n\r\n  removeItem(index: number) {\r\n    this.requestItems.removeAt(index);\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    this.alertService.clear();\r\n\r\n    if (this.form.invalid) {\r\n      // Mark all fields as touched to show validation errors\r\n      this.form.markAllAsTouched();\r\n      // If requestItems is empty after trying to submit, show specific error\r\n      if (this.requestItems.length === 0 && this.form.get('requestItems')?.hasError('required')) {\r\n        this.alertService.error('At least one item is required.');\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this.loading) return;\r\n\r\n    this.loading = true;\r\n    const requestData: AppRequest = this.form.value as AppRequest;\r\n\r\n    if (this.isAddMode) {\r\n      this.createRequest(requestData);\r\n    } else if (this.id) {\r\n      this.updateRequest(this.id, requestData);\r\n    }\r\n  }\r\n\r\n  private createRequest(requestData: AppRequest) {\r\n    this.requestService.create(requestData) // Use RequestService\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: () => {\r\n          this.alertService.success('Request created successfully', { keepAfterRouteChange: true });\r\n          this.router.navigate(['/admin/requests']); // Adjust path as needed\r\n        },\r\n        error: (err: HttpErrorResponse) => {\r\n          this.alertService.error(err.error?.message || err.message || 'Failed to create request');\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  private updateRequest(id: string, requestData: AppRequest) {\r\n    this.requestService.update(id, requestData) // Use RequestService\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: () => {\r\n          this.alertService.success('Request updated successfully', { keepAfterRouteChange: true });\r\n          this.router.navigate(['/admin/requests']); // Adjust path as needed\r\n        },\r\n        error: (err: HttpErrorResponse) => {\r\n          this.alertService.error(err.error?.message || err.message || 'Failed to update request');\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onCancel() {\r\n    this.router.navigate(['/admin/requests']); // Adjust path as needed\r\n  }\r\n}","<div class=\"card\">\r\n  <div class=\"card-header\">{{id ? 'Edit' : 'Add'}} Request</div>\r\n  <div class=\"card-body\">\r\n    <div class=\"alert alert-danger\" *ngIf=\"errorMessage\">{{errorMessage}}</div>\r\n\r\n    <div class=\"mb-3\">\r\n      <label class=\"form-label\">Type</label>\r\n      <select class=\"form-select\" [(ngModel)]=\"request.type\">\r\n        <option>Equipment</option>\r\n        <option>Leave</option>\r\n        <option>Resources</option>\r\n      </select>\r\n    </div>\r\n\r\n    <div class=\"mb-3\">\r\n      <label class=\"form-label\">Items</label>\r\n      <div *ngFor=\"let item of request.items; let i = index\" class=\"border p-2 mb-2\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-5\">\r\n            <label class=\"form-label\">Name</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"item.name\">\r\n          </div>\r\n          <div class=\"col-md-5\">\r\n            <label class=\"form-label\">Quantity</label>\r\n            <input type=\"number\" class=\"form-control\" [(ngModel)]=\"item.quantity\">\r\n          </div>\r\n          <div class=\"col-md-2 d-flex align-items-end\">\r\n            <button class=\"btn btn-danger\" (click)=\"removeItem(i)\">Remove</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button class=\"btn btn-secondary\" (click)=\"addItem()\">Add Item</button>\r\n    </div>\r\n\r\n    <div class=\"text-center\">\r\n      <button class=\"btn btn-primary me-2\" (click)=\"save()\">Save</button>\r\n      <button class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\r\n    </div>\r\n  </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}