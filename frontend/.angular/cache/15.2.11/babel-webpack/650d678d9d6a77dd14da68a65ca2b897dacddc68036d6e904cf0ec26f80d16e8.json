{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.refreshTokenValue = null;\n      // Add to AccountService\n      this.departmentsUrl = `${environment.apiUrl}/departments`;\n      // Add to AccountService\n      this.employeesUrl = `${environment.apiUrl}/employees`;\n      this.requestsUrl = `${environment.apiUrl}/requests`;\n      this.workflowsUrl = `${environment.apiUrl}/workflows`;\n      this.accountSubject = new BehaviorSubject(null);\n      this.account = this.accountSubject.asObservable();\n    }\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n    login(email, password) {\n      return this.http.post(`${baseUrl}/authenticate`, {\n        email,\n        password\n      }, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.accountSubject.next(account);\n        if (account.refreshToken) {\n          this.refreshTokenValue = account.refreshToken;\n        }\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n    logout() {\n      this.http.post(`${baseUrl}/revoke-token`, {\n        token: this.refreshTokenValue\n      }, {\n        withCredentials: true\n      }).subscribe();\n      this.stopRefreshTokenTimer();\n      this.refreshTokenValue = null;\n      this.accountSubject.next(null);\n      this.router.navigate(['/account/login']);\n    }\n    refreshToken() {\n      // Send the token in the request body since cookies may not work across domains\n      return this.http.post(`${baseUrl}/refresh-token`, {\n        token: this.refreshTokenValue\n      }, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.accountSubject.next(account);\n        if (account.refreshToken) {\n          this.refreshTokenValue = account.refreshToken;\n        }\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n    register(account) {\n      return this.http.post(`${baseUrl}/register`, account);\n    }\n    verifyEmail(token) {\n      return this.http.post(`${baseUrl}/verify-email`, {\n        token\n      });\n    }\n    forgotPassword(email) {\n      return this.http.post(`${baseUrl}/forgot-password`, {\n        email\n      });\n    }\n    validateResetToken(token) {\n      return this.http.post(`${baseUrl}/validate-reset-token`, {\n        token\n      });\n    }\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(`${baseUrl}/reset-password`, {\n        token,\n        password,\n        confirmPassword\n      });\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    getDepartmentById(id) {\n      return this.http.get(`${this.departmentsUrl}/${id}`);\n    }\n    createDepartment(params) {\n      return this.http.post(this.departmentsUrl, params);\n    }\n    updateDepartment(id, params) {\n      return this.http.put(`${this.departmentsUrl}/${id}`, params);\n    }\n    getAllDepartments() {\n      return this.http.get(this.departmentsUrl);\n    }\n    deleteDepartment(id) {\n      return this.http.delete(`${this.departmentsUrl}/${id}`);\n    }\n    getAllUsers() {\n      return this.http.get(`${baseUrl}`).pipe(map(accounts => {\n        console.log('Fetched accounts:', accounts);\n        return accounts.map(account => ({\n          id: account.id,\n          email: account.email,\n          role: account.role,\n          fullName: `${account.firstName || ''} ${account.lastName || ''}`.trim()\n        }));\n      }));\n    }\n    getEmployeeById(id) {\n      return this.http.get(`${this.employeesUrl}/${id}`);\n    }\n    createEmployee(params) {\n      return this.http.post(this.employeesUrl, params);\n    }\n    updateEmployee(id, params) {\n      return this.http.put(`${this.employeesUrl}/${id}`, params);\n    }\n    deleteEmployee(id) {\n      return this.http.delete(`${this.employeesUrl}/${id}`);\n    }\n    getRequestById(id) {\n      return this.http.get(`${this.requestsUrl}/${id}`);\n    }\n    createRequest(params) {\n      return this.http.post(this.requestsUrl, params);\n    }\n    updateRequest(id, params) {\n      return this.http.put(`${this.requestsUrl}/${id}`, params);\n    }\n    getAllRequests() {\n      return this.http.get(this.requestsUrl);\n    }\n    deleteRequest(id) {\n      return this.http.delete(`${this.requestsUrl}/${id}`);\n    }\n    getEmployeeWorkflows(employeeId) {\n      return this.http.get(`${this.workflowsUrl}/employee/${employeeId}`);\n    }\n    updateWorkflowStatus(workflowId, params) {\n      return this.http.put(`${this.workflowsUrl}/${workflowId}/status`, params);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n        var _a;\n        // update the current account if it was updated\n        if (account.id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          // publish updated account to subscribers\n          const updatedAccount = Object.assign(Object.assign({}, this.accountValue), account);\n          this.accountSubject.next(updatedAccount);\n        }\n        return account;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(map(x => {\n        var _a;\n        // auto logout if the logged in account deleted their own record\n        if (id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          this.logout();\n        }\n        return x;\n      }));\n    }\n    getAccountByUserId(userId) {\n      if (userId === undefined || userId === null) {\n        return undefined;\n      }\n      // In the context of the FakeBackend, all \"accounts\" are stored in localStorage\n      // under the key used by the FakeBackendInterceptor.\n      const accountsKey = 'accounts'; // Define the key used in localStorage\n      const allAccountsFromStorage = JSON.parse(localStorage.getItem(accountsKey) || '[]');\n      // The 'userId' in your Employee model is meant to link to the 'id' of an Account.\n      return allAccountsFromStorage.find(acc => Number(acc.id) === Number(userId));\n    }\n    startRefreshTokenTimer() {\n      // parse json object from base64 encoded jwt token\n      const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\n      // set a timeout to refresh the token a minute before it expires\n      const expires = new Date(jwtToken.exp * 1000);\n      const timeout = expires.getTime() - Date.now() - 60 * 1000;\n      this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n    stopRefreshTokenTimer() {\n      clearTimeout(this.refreshTokenTimeout);\n    }\n    getNextEmployeeId() {\n      return this.http.get(`${this.employeesUrl}/nextId`);\n    }\n  }\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}