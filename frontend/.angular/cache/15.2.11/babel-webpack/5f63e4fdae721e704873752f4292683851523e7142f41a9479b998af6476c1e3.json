{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services/request.service\";\nimport * as i4 from \"@app/_services/employee.service\";\nimport * as i5 from \"@app/_services/alert.service\";\nfunction RequestAddEditComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction RequestAddEditComponent_option_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", user_r3.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(user_r3.email);\n  }\n}\nfunction RequestAddEditComponent_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const dept_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", dept_r4.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(dept_r4.name);\n  }\n}\nexport let RequestAddEditComponent = /*#__PURE__*/(() => {\n  class RequestAddEditComponent {\n    // For dynamic items, request.items will be managed by a FormArray\n    constructor(formBuilder, route, router, requestService,\n    // Use RequestService\n    employeeService,\n    // Use EmployeeService\n    alertService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.requestService = requestService;\n      this.employeeService = employeeService;\n      this.alertService = alertService;\n      this.id = null;\n      this.loading = false;\n      this.submitted = false;\n      this.employees = []; // For the employee dropdown\n    }\n\n    ngOnInit() {\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      // Initialize the form structure\n      this.form = this.formBuilder.group({\n        type: ['Equipment', Validators.required],\n        employeeId: [null, Validators.required],\n        requestItems: this.formBuilder.array([], Validators.required) // Array for items\n      });\n\n      this.loadEmployeesForDropdown(); // Load employees for the dropdown\n      if (!this.isAddMode && this.id) {\n        this.loadRequestData();\n      } else {\n        // For add mode, add one default item if desired\n        this.addItem();\n      }\n    }\n    // Convenience getter for easy access to form fields in template\n    get f() {\n      return this.form.controls;\n    }\n    // Convenience getter for requestItems FormArray\n    get requestItems() {\n      return this.form.get('requestItems');\n    }\n    loadEmployeesForDropdown() {\n      this.employeeService.getAll() // Assuming getAll returns a list of employees\n      .pipe(first()).subscribe({\n        next: employees => {\n          // Map to a simpler structure if needed, or use employees directly if they have id and a display name\n          this.employees = employees.map(emp => ({\n            id: emp.id,\n            employeeId: emp.employeeId // The display ID like \"EMP001\"\n          }));\n        },\n\n        error: err => {\n          var _a;\n          this.alertService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.message || 'Failed to load employees');\n        }\n      });\n    }\n    loadRequestData() {\n      if (!this.id) return;\n      this.loading = true;\n      this.requestService.getById(this.id) // Use RequestService\n      .pipe(first()).subscribe({\n        next: request => {\n          this.form.patchValue({\n            type: request.type,\n            employeeId: request.employeeId\n          });\n          // Clear existing items and populate with fetched items\n          this.requestItems.clear();\n          request.requestItems.forEach(item => {\n            this.requestItems.push(this.createItemFormGroup(item.name, item.quantity));\n          });\n          this.loading = false;\n        },\n        error: err => {\n          var _a;\n          this.alertService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.message || 'Failed to load request');\n          this.loading = false;\n        }\n      });\n    }\n    createItemFormGroup(name = '', quantity = 1) {\n      return this.formBuilder.group({\n        name: [name, Validators.required],\n        quantity: [quantity, [Validators.required, Validators.min(1)]]\n      });\n    }\n    addItem() {\n      this.requestItems.push(this.createItemFormGroup());\n    }\n    removeItem(index) {\n      this.requestItems.removeAt(index);\n    }\n    onSubmit() {\n      var _a;\n      this.submitted = true;\n      this.alertService.clear();\n      if (this.form.invalid) {\n        // Mark all fields as touched to show validation errors\n        this.form.markAllAsTouched();\n        // If requestItems is empty after trying to submit, show specific error\n        if (this.requestItems.length === 0 && ((_a = this.form.get('requestItems')) === null || _a === void 0 ? void 0 : _a.hasError('required'))) {\n          this.alertService.error('At least one item is required.');\n        }\n        return;\n      }\n      if (this.loading) return;\n      this.loading = true;\n      const requestData = this.form.value;\n      if (this.isAddMode) {\n        this.createRequest(requestData);\n      } else if (this.id) {\n        this.updateRequest(this.id, requestData);\n      }\n    }\n    createRequest(requestData) {\n      this.requestService.create(requestData) // Use RequestService\n      .pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request created successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/admin/requests']); // Adjust path as needed\n        },\n\n        error: err => {\n          var _a;\n          this.alertService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.message || 'Failed to create request');\n          this.loading = false;\n        }\n      });\n    }\n    updateRequest(id, requestData) {\n      this.requestService.update(id, requestData) // Use RequestService\n      .pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request updated successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/admin/requests']); // Adjust path as needed\n        },\n\n        error: err => {\n          var _a;\n          this.alertService.error(((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.message || 'Failed to update request');\n          this.loading = false;\n        }\n      });\n    }\n    onCancel() {\n      this.router.navigate(['/admin/requests']); // Adjust path as needed\n    }\n  }\n\n  RequestAddEditComponent.ɵfac = function RequestAddEditComponent_Factory(t) {\n    return new (t || RequestAddEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.RequestService), i0.ɵɵdirectiveInject(i4.EmployeeService), i0.ɵɵdirectiveInject(i5.AlertService));\n  };\n  RequestAddEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RequestAddEditComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 40,\n    vars: 11,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"mb-3\"], [1, \"form-label\"], [\"type\", \"text\", 1, \"form-control\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [1, \"form-select\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"date\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"text-center\"], [1, \"btn\", \"btn-primary\", \"me-2\", 3, \"click\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"alert\", \"alert-danger\"], [3, \"value\"]],\n    template: function RequestAddEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtemplate(4, RequestAddEditComponent_div_4_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n        i0.ɵɵtext(7, \"Employee ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function RequestAddEditComponent_Template_input_ngModelChange_8_listener($event) {\n          return ctx.employee.employeeId = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 4)(10, \"label\", 5);\n        i0.ɵɵtext(11, \"User\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"select\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function RequestAddEditComponent_Template_select_ngModelChange_12_listener($event) {\n          return ctx.employee.userId = $event;\n        });\n        i0.ɵɵtemplate(13, RequestAddEditComponent_option_13_Template, 2, 2, \"option\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 4)(15, \"label\", 5);\n        i0.ɵɵtext(16, \"Position\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function RequestAddEditComponent_Template_input_ngModelChange_17_listener($event) {\n          return ctx.employee.position = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 4)(19, \"label\", 5);\n        i0.ɵɵtext(20, \"Department\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"select\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function RequestAddEditComponent_Template_select_ngModelChange_21_listener($event) {\n          return ctx.employee.departmentId = $event;\n        });\n        i0.ɵɵtemplate(22, RequestAddEditComponent_option_22_Template, 2, 2, \"option\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(23, \"div\", 4)(24, \"label\", 5);\n        i0.ɵɵtext(25, \"Hire Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function RequestAddEditComponent_Template_input_ngModelChange_26_listener($event) {\n          return ctx.employee.hireDate = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(27, \"div\", 4)(28, \"label\", 5);\n        i0.ɵɵtext(29, \"Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"select\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function RequestAddEditComponent_Template_select_ngModelChange_30_listener($event) {\n          return ctx.employee.status = $event;\n        });\n        i0.ɵɵelementStart(31, \"option\");\n        i0.ɵɵtext(32, \"Active\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"option\");\n        i0.ɵɵtext(34, \"Inactive\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(35, \"div\", 11)(36, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function RequestAddEditComponent_Template_button_click_36_listener() {\n          return ctx.save();\n        });\n        i0.ɵɵtext(37, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function RequestAddEditComponent_Template_button_click_38_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵtext(39, \"Cancel\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.id ? \"Edit\" : \"Add\", \" Employee\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.employee.employeeId)(\"disabled\", !!ctx.id);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.employee.userId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.users);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.employee.position);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.employee.departmentId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.departments);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.employee.hireDate);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.employee.status);\n      }\n    },\n    encapsulation: 2\n  });\n  return RequestAddEditComponent;\n})();","map":{"version":3,"mappings":"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","names":["Validators","first","i0","RequestAddEditComponent","constructor","formBuilder","route","router","requestService","employeeService","alertService","ngOnInit","id","snapshot","params","isAddMode","form","group","type","required","employeeId","requestItems","array","loadEmployeesForDropdown","loadRequestData","addItem","f","controls","get","getAll","pipe","subscribe","next","employees","map","emp","error","err","message","loading","getById","request","patchValue","clear","forEach","item","push","createItemFormGroup","name","quantity","min","removeItem","index","removeAt","onSubmit","submitted","invalid","markAllAsTouched","length","hasError","requestData","value","createRequest","updateRequest","create","success","keepAfterRouteChange","navigate","update","onCancel","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\employees\\add-edit.component.ts","E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\employees\\add-edit.component.html"],"sourcesContent":["// src/app/requests/add-edit.component.ts\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, FormArray, Validators, AbstractControl } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n// Assuming you'll have dedicated services\r\nimport { RequestService } from '@app/_services/request.service'; // Create this service\r\nimport { EmployeeService } from '@app/_services/employee.service'; // Create or use existing\r\nimport { AlertService } from '@app/_services/alert.service';\r\n\r\nimport { AppRequest, EmployeeForDropdown } from '../_helpers/fake-backend'; // Adjust path to your models\r\n\r\n@Component({\r\n    templateUrl: 'add-edit.component.html',\r\n    // Add styleUrls if needed\r\n})\r\nexport class RequestAddEditComponent implements OnInit {\r\n    form!: FormGroup;\r\n    id: string | null = null;\r\n    isAddMode!: boolean;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    employees: EmployeeForDropdown[] = []; // For the employee dropdown\r\n\r\n    // For dynamic items, request.items will be managed by a FormArray\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private requestService: RequestService,     // Use RequestService\r\n        private employeeService: EmployeeService,   // Use EmployeeService\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.id = this.route.snapshot.params['id'];\r\n        this.isAddMode = !this.id;\r\n\r\n        // Initialize the form structure\r\n        this.form = this.formBuilder.group({\r\n            type: ['Equipment', Validators.required], // Default to 'Equipment'\r\n            employeeId: [null, Validators.required],  // Employee ID\r\n            requestItems: this.formBuilder.array([], Validators.required) // Array for items\r\n        });\r\n\r\n        this.loadEmployeesForDropdown(); // Load employees for the dropdown\r\n\r\n        if (!this.isAddMode && this.id) {\r\n            this.loadRequestData();\r\n        } else {\r\n            // For add mode, add one default item if desired\r\n            this.addItem();\r\n        }\r\n    }\r\n\r\n    // Convenience getter for easy access to form fields in template\r\n    get f(): { [key: string]: AbstractControl } { return this.form.controls; }\r\n    // Convenience getter for requestItems FormArray\r\n    get requestItems(): FormArray {\r\n        return this.form.get('requestItems') as FormArray;\r\n    }\r\n\r\n    loadEmployeesForDropdown() {\r\n        this.employeeService.getAll() // Assuming getAll returns a list of employees\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: (employees) => {\r\n                    // Map to a simpler structure if needed, or use employees directly if they have id and a display name\r\n                    this.employees = employees.map(emp => ({\r\n                        id: emp.id, // The actual ID to store\r\n                        employeeId: emp.employeeId // The display ID like \"EMP001\"\r\n                    }));\r\n                },\r\n                error: (err: HttpErrorResponse) => {\r\n                    this.alertService.error(err.error?.message || err.message || 'Failed to load employees');\r\n                }\r\n            });\r\n    }\r\n\r\n    loadRequestData() {\r\n        if (!this.id) return;\r\n        this.loading = true;\r\n        this.requestService.getById(this.id) // Use RequestService\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: (request: AppRequest) => {\r\n                    this.form.patchValue({\r\n                        type: request.type,\r\n                        employeeId: request.employeeId\r\n                    });\r\n                    // Clear existing items and populate with fetched items\r\n                    this.requestItems.clear();\r\n                    request.requestItems.forEach(item => {\r\n                        this.requestItems.push(this.createItemFormGroup(item.name, item.quantity));\r\n                    });\r\n                    this.loading = false;\r\n                },\r\n                error: (err: HttpErrorResponse) => {\r\n                    this.alertService.error(err.error?.message || err.message || 'Failed to load request');\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    createItemFormGroup(name: string = '', quantity: number = 1): FormGroup {\r\n        return this.formBuilder.group({\r\n            name: [name, Validators.required],\r\n            quantity: [quantity, [Validators.required, Validators.min(1)]]\r\n        });\r\n    }\r\n\r\n    addItem() {\r\n        this.requestItems.push(this.createItemFormGroup());\r\n    }\r\n\r\n    removeItem(index: number) {\r\n        this.requestItems.removeAt(index);\r\n    }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n        this.alertService.clear();\r\n\r\n        if (this.form.invalid) {\r\n            // Mark all fields as touched to show validation errors\r\n            this.form.markAllAsTouched();\r\n            // If requestItems is empty after trying to submit, show specific error\r\n            if (this.requestItems.length === 0 && this.form.get('requestItems')?.hasError('required')) {\r\n                this.alertService.error('At least one item is required.');\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (this.loading) return;\r\n\r\n        this.loading = true;\r\n        const requestData: AppRequest = this.form.value as AppRequest;\r\n\r\n        if (this.isAddMode) {\r\n            this.createRequest(requestData);\r\n        } else if (this.id) {\r\n            this.updateRequest(this.id, requestData);\r\n        }\r\n    }\r\n\r\n    private createRequest(requestData: AppRequest) {\r\n        this.requestService.create(requestData) // Use RequestService\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Request created successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['/admin/requests']); // Adjust path as needed\r\n                },\r\n                error: (err: HttpErrorResponse) => {\r\n                    this.alertService.error(err.error?.message || err.message || 'Failed to create request');\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    private updateRequest(id: string, requestData: AppRequest) {\r\n        this.requestService.update(id, requestData) // Use RequestService\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Request updated successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['/admin/requests']); // Adjust path as needed\r\n                },\r\n                error: (err: HttpErrorResponse) => {\r\n                    this.alertService.error(err.error?.message || err.message || 'Failed to update request');\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    onCancel() {\r\n        this.router.navigate(['/admin/requests']); // Adjust path as needed\r\n    }\r\n}","<div class=\"card\">\r\n    <div class=\"card-header\">{{id ? 'Edit' : 'Add'}} Employee</div>\r\n    <!--<div class=\"card-header\">{{(id ? 'Edit' : 'Add')}} Employee</div>-->\r\n    <div class=\"card-body\">\r\n        <div class=\"alert alert-danger\" *ngIf=\"errorMessage\">{{errorMessage}}</div>\r\n        \r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Employee ID</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"employee.employeeId\" [disabled]=\"!!id\">\r\n        </div>\r\n        \r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">User</label>\r\n            <select class=\"form-select\" [(ngModel)]=\"employee.userId\">\r\n                <option *ngFor=\"let user of users\" [value]=\"user.id\">{{user.email}}</option>\r\n            </select>\r\n        </div>\r\n        \r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Position</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"employee.position\">\r\n        </div>\r\n        \r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Department</label>\r\n            <select class=\"form-select\" [(ngModel)]=\"employee.departmentId\">\r\n                <option *ngFor=\"let dept of departments\" [value]=\"dept.id\">{{dept.name}}</option>\r\n            </select>\r\n        </div>\r\n        \r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Hire Date</label>\r\n            <input type=\"date\" class=\"form-control\" [(ngModel)]=\"employee.hireDate\">\r\n        </div>\r\n        \r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Status</label>\r\n            <select class=\"form-select\" [(ngModel)]=\"employee.status\">\r\n                <option>Active</option>\r\n                <option>Inactive</option>\r\n            </select>\r\n        </div>\r\n        \r\n        <div class=\"text-center\">\r\n            <button class=\"btn btn-primary me-2\" (click)=\"save()\">Save</button>\r\n            <button class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\r\n        </div>\r\n    </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}