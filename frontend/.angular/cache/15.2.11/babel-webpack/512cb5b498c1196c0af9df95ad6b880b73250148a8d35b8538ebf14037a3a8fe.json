{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport { WorkflowStatus } from '@app/_models/workflow';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"confirmModal\"];\nfunction ListWorkflowComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"for Employee \", ctx_r0.employeeDetails.employeeId, \"\");\n  }\n}\nfunction ListWorkflowComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" - All Workflows\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelement(1, \"span\", 10);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_7_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No workflows found for this employee.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_7_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No workflows found.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, ListWorkflowComponent_div_7_p_1_Template, 2, 0, \"p\", 2);\n    i0.ɵɵtemplate(2, ListWorkflowComponent_div_7_p_2_Template, 2, 0, \"p\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.employeeIdFromQuery);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.employeeIdFromQuery);\n  }\n}\nfunction ListWorkflowComponent_div_8_th_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1, \"Actions\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\")(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const entry_r16 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", entry_r16.key, \":\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", entry_r16.value, \"\");\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_ng_container_1_Template, 5, 2, \"ng-container\", 14);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const workflow_r11 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r14.getDetailsAsObject(workflow_r11.details));\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ListWorkflowComponent_div_8_tr_12_ng_container_4_ng_container_1_Template, 2, 1, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const workflow_r11 = i0.ɵɵnextContext().$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !(workflow_r11.type === \"Request Approval\" && ctx_r12.isTaskOnlyWorkflow(workflow_r11.details)));\n  }\n}\nfunction ListWorkflowComponent_div_8_tr_12_td_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\")(1, \"select\", 16);\n    i0.ɵɵlistener(\"ngModelChange\", function ListWorkflowComponent_div_8_tr_12_td_8_Template_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const workflow_r11 = i0.ɵɵnextContext().$implicit;\n      return i0.ɵɵresetView(workflow_r11.status = $event);\n    })(\"ngModelChange\", function ListWorkflowComponent_div_8_tr_12_td_8_Template_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const workflow_r11 = i0.ɵɵnextContext().$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onStatusSelected(workflow_r11, $event));\n    });\n    i0.ɵɵelementStart(2, \"option\", 17);\n    i0.ɵɵtext(3, \"Pending\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"option\", 17);\n    i0.ɵɵtext(5, \"Approved \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"option\", 17);\n    i0.ɵɵtext(7, \"Rejected \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const workflow_r11 = i0.ɵɵnextContext().$implicit;\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", workflow_r11.status)(\"disabled\", workflow_r11.status === ctx_r13.WorkflowStatus.Completed || workflow_r11.status === ctx_r13.WorkflowStatus.Rejected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngValue\", ctx_r13.WorkflowStatus.Pending);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngValue\", ctx_r13.WorkflowStatus.Approved);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngValue\", ctx_r13.WorkflowStatus.Rejected);\n  }\n}\nconst _c1 = function (a0, a1, a2) {\n  return {\n    \"bg-warning text-dark\": a0,\n    \"bg-success\": a1,\n    \"bg-danger\": a2\n  };\n};\nfunction ListWorkflowComponent_div_8_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtemplate(4, ListWorkflowComponent_div_8_tr_12_ng_container_4_Template, 2, 1, \"ng-container\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"span\", 15);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(8, ListWorkflowComponent_div_8_tr_12_td_8_Template, 8, 5, \"td\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const workflow_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(workflow_r11.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", workflow_r11.details);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(5, _c1, workflow_r11.status === ctx_r10.WorkflowStatus.Pending || workflow_r11.status === ctx_r10.WorkflowStatus.ForReviewing, workflow_r11.status === ctx_r10.WorkflowStatus.Completed || workflow_r11.status === ctx_r10.WorkflowStatus.Approved, workflow_r11.status === ctx_r10.WorkflowStatus.Rejected));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", workflow_r11.status, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.isAdmin);\n  }\n}\nfunction ListWorkflowComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"table\", 13)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Details\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, ListWorkflowComponent_div_8_th_10_Template, 2, 0, \"th\", 2);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, ListWorkflowComponent_div_8_tr_12_Template, 9, 9, \"tr\", 14);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.isAdmin);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.workflows);\n  }\n}\nfunction ListWorkflowComponent_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function ListWorkflowComponent_button_10_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r25.goBackToEmployees());\n    });\n    i0.ɵɵtext(1, \"Back to Employees \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function ListWorkflowComponent_button_11_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r27.goBackToAdminDashboard());\n    });\n    i0.ɵɵtext(1, \"Back to Admin Dashboard\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let ListWorkflowComponent = /*#__PURE__*/(() => {\n  class ListWorkflowComponent {\n    constructor(workflowService, alertService, accountService, employeeService, route, router) {\n      var _a;\n      this.workflowService = workflowService;\n      this.alertService = alertService;\n      this.accountService = accountService;\n      this.employeeService = employeeService;\n      this.route = route;\n      this.router = router;\n      this.workflows = [];\n      this.loading = false;\n      this.currentAccount = null;\n      this.isAdmin = false;\n      this.employeeId = null;\n      this.displayEmployeeId = null;\n      this.confirmMessage = '';\n      this.notFound = false;\n      this.pendingStatusChange = null;\n      this.employeeIdFromQuery = null;\n      this.employeeDetails = null;\n      this.statusUpdateWorkflow = null;\n      // Make enum available in template\n      this.WorkflowStatus = WorkflowStatus;\n      this.Role = Role;\n      this.subscriptions = [];\n      this.currentAccount = this.accountService.accountValue;\n      this.isAdmin = ((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n    }\n    ngOnDestroy() {\n      // Unsubscribe from all subscriptions to prevent memory leaks\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n    ngOnInit() {\n      this.queryParamsSubscription = this.route.queryParams.subscribe(params => {\n        this.employeeIdFromQuery = params['employeeId'];\n        this.workflows = [];\n        this.employeeDetails = null;\n        if (this.employeeIdFromQuery) {\n          this.loadEmployeeDetails(this.employeeIdFromQuery);\n          this.loadWorkflowsForEmployee(this.employeeIdFromQuery);\n        } else if (this.isAdmin) {\n          this.loadAllWorkflows();\n        } else {\n          const currentEmployeeId = this.employeeId;\n          if (currentEmployeeId) {\n            this.employeeIdFromQuery = String(currentEmployeeId);\n            this.loadEmployeeDetails(String(currentEmployeeId));\n            this.loadWorkflowsForEmployee(String(currentEmployeeId));\n          } else {\n            this.alertService.info(\"No employee specified, and your account is not linked to an employee record.\");\n            this.loading = false;\n          }\n        }\n      });\n    }\n    loadEmployeeDetails(employeeId) {\n      this.employeeService.getById(employeeId).pipe(first()).subscribe({\n        next: employee => this.employeeDetails = employee,\n        error: err => this.alertService.error(this.formatError(err, 'Failed to load employee details'))\n      });\n    }\n    loadWorkflowsForEmployee(employeeId) {\n      this.loading = true;\n      this.workflowService.getByEmployeeId(employeeId).pipe(first()).subscribe({\n        next: workflows => {\n          this.workflows = this.sortWorkflows(workflows);\n          this.loading = false;\n        },\n        error: err => {\n          this.alertService.error(this.formatError(err, `Failed to load workflows for employee ${employeeId}`));\n          this.workflows = [];\n          this.loading = false;\n        }\n      });\n    }\n    loadAllWorkflows() {\n      this.loading = true;\n      this.workflowService.getAll().pipe(first()).subscribe({\n        next: workflows => {\n          this.workflows = this.sortWorkflows(workflows);\n          this.loading = false;\n        },\n        error: err => {\n          this.alertService.error(this.formatError(err, 'Failed to load all workflows'));\n          this.workflows = [];\n          this.loading = false;\n        }\n      });\n    }\n    sortWorkflows(workflows) {\n      return workflows.sort((a, b) => {\n        const dateA = new Date(a.datetimecreated || 0).getTime();\n        const dateB = new Date(b.datetimecreated || 0).getTime();\n        return dateB - dateA;\n      });\n    }\n    onStatusSelected(workflow, newStatus) {\n      console.log(`Status change selected for workflow ${workflow.id} to ${newStatus}`);\n      this.updateWorkflowStatus(workflow, newStatus);\n    }\n    updateWorkflowStatus(workflow, newStatus) {\n      if (!workflow || !workflow.id) return;\n      this.workflowService.changeStatus(workflow.id, newStatus).pipe(first()).subscribe({\n        next: updatedWorkflow => {\n          const index = this.workflows.findIndex(w => w.id === updatedWorkflow.id);\n          if (index !== -1) {\n            this.workflows[index] = Object.assign(Object.assign({}, this.workflows[index]), updatedWorkflow);\n          }\n          this.alertService.success('Workflow status updated successfully!');\n        },\n        error: err => {\n          this.alertService.error(this.formatError(err, 'Failed to update workflow status'));\n        }\n      });\n    }\n    openStatusChangeModal(id, status) {\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      this.pendingStatusChange = {\n        id,\n        status\n      };\n      this.confirmMessage = `Are you sure you want to mark this workflow ${status === WorkflowStatus.ForReviewing ? 'for review' : 'as completed'}?`;\n      this.confirmModal.show();\n    }\n    onStatusChangeConfirmed() {\n      if (!this.pendingStatusChange) return;\n      const {\n        id,\n        status\n      } = this.pendingStatusChange;\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      workflow.isUpdating = true;\n      this.workflowService.changeStatus(id, status).pipe(first()).subscribe({\n        next: () => {\n          workflow.status = status;\n          workflow.isUpdating = false;\n          this.alertService.success('Workflow status updated successfully');\n        },\n        error: error => {\n          this.alertService.error(error);\n          workflow.isUpdating = false;\n        }\n      });\n      this.pendingStatusChange = null;\n    }\n    deleteWorkflow(id) {\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      if (confirm('Are you sure you want to delete this workflow?')) {\n        workflow.isDeleting = true;\n        this.workflowService.delete(id).pipe(first()).subscribe({\n          next: () => {\n            this.workflows = this.workflows.filter(x => x.id !== id);\n            this.alertService.success('Workflow deleted successfully');\n          },\n          error: error => {\n            this.alertService.error(error);\n            workflow.isDeleting = false;\n          }\n        });\n      }\n    }\n    getDetailsAsObject(details) {\n      // If details is a string, try to parse it as JSON first\n      if (typeof details === 'string') {\n        try {\n          details = JSON.parse(details);\n        } catch (e) {\n          // If parsing fails, just return the string as a single \"task\" entry\n          return [{\n            key: 'task',\n            value: details\n          }];\n        }\n      }\n      // For Request Approval workflows, format in the standard way\n      if (details && details.requestId && details.requestType && details.requesterId && details.message) {\n        return [{\n          key: 'requestId',\n          value: details.requestId\n        }, {\n          key: 'requestType',\n          value: details.requestType\n        }, {\n          key: 'requesterId',\n          value: details.requesterId\n        }, {\n          key: 'message',\n          value: details.message\n        }];\n      }\n      // For task-based workflows, show only the task if not a Request Approval workflow\n      if (details && details.task && Object.keys(details).length === 1) {\n        return [{\n          key: 'task',\n          value: details.task\n        }];\n      }\n      // Return the details as key-value pairs for other cases\n      return Object.entries(details || {}).filter(([key]) => key !== 'task') // Filter out task if it exists along with other fields\n      .map(([key, value]) => ({\n        key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value\n      }));\n    }\n    isPendingOrReviewing(status) {\n      return status === WorkflowStatus.Pending || status === WorkflowStatus.ForReviewing;\n    }\n    isCompletedOrApproved(status) {\n      return status === WorkflowStatus.Completed || status === WorkflowStatus.Approved;\n    }\n    isRejected(status) {\n      return status === WorkflowStatus.Rejected;\n    }\n    canChangeStatus(status) {\n      return !(status === WorkflowStatus.Completed || status === WorkflowStatus.Rejected);\n    }\n    goBackToEmployees() {\n      this.router.navigate(['/admin/employees']);\n    }\n    goBackToAdminDashboard() {\n      this.router.navigate(['/admin']); // Or your main admin overview page\n    }\n\n    formatError(error, defaultMessage) {\n      var _a;\n      if (error instanceof HttpErrorResponse) {\n        return ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || error.message || defaultMessage;\n      }\n      return error.message || defaultMessage;\n    }\n    // Check if workflow details only contain a task field\n    isTaskOnlyWorkflow(details) {\n      if (typeof details === 'string') {\n        try {\n          details = JSON.parse(details);\n        } catch (e) {\n          // If can't parse as JSON, it's likely just a string task\n          return true;\n        }\n      }\n      // If it has only a task property and no others, it's a task-only workflow\n      return details && details.task && Object.keys(details).length === 1 && !details.requestId && !details.requestType && !details.requesterId && !details.message;\n    }\n  }\n  ListWorkflowComponent.ɵfac = function ListWorkflowComponent_Factory(t) {\n    return new (t || ListWorkflowComponent)(i0.ɵɵdirectiveInject(i1.WorkflowService), i0.ɵɵdirectiveInject(i1.AlertService), i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i1.EmployeeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  ListWorkflowComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListWorkflowComponent,\n    selectors: [[\"ng-component\"]],\n    viewQuery: function ListWorkflowComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.confirmModal = _t.first);\n      }\n    },\n    decls: 12,\n    vars: 7,\n    consts: [[1, \"card\"], [1, \"card-header\"], [4, \"ngIf\"], [1, \"card-body\"], [\"class\", \"text-center\", 4, \"ngIf\"], [\"class\", \"text-center text-muted\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [1, \"mt-3\", \"text-end\"], [\"class\", \"btn btn-secondary\", 3, \"click\", 4, \"ngIf\"], [1, \"text-center\"], [1, \"spinner-border\", \"spinner-border-lg\", \"align-center\"], [1, \"text-center\", \"text-muted\"], [1, \"table-responsive\"], [1, \"table\", \"table-striped\", \"align-middle\"], [4, \"ngFor\", \"ngForOf\"], [1, \"badge\", 3, \"ngClass\"], [1, \"form-select\", \"form-select-sm\", \"d-inline-block\", \"w-auto\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [3, \"ngValue\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n    template: function ListWorkflowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Workflows \");\n        i0.ɵɵtemplate(3, ListWorkflowComponent_span_3_Template, 2, 1, \"span\", 2);\n        i0.ɵɵtemplate(4, ListWorkflowComponent_span_4_Template, 2, 0, \"span\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵtemplate(6, ListWorkflowComponent_div_6_Template, 2, 0, \"div\", 4);\n        i0.ɵɵtemplate(7, ListWorkflowComponent_div_7_Template, 3, 2, \"div\", 5);\n        i0.ɵɵtemplate(8, ListWorkflowComponent_div_8_Template, 13, 2, \"div\", 6);\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵtemplate(10, ListWorkflowComponent_button_10_Template, 2, 0, \"button\", 8);\n        i0.ɵɵtemplate(11, ListWorkflowComponent_button_11_Template, 2, 0, \"button\", 8);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.employeeDetails);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.employeeIdFromQuery && ctx.isAdmin);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading && (ctx.workflows == null ? null : ctx.workflows.length) === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading && (ctx.workflows == null ? null : ctx.workflows.length) > 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.employeeIdFromQuery);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.employeeIdFromQuery && ctx.isAdmin);\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgModel],\n    encapsulation: 2\n  });\n  return ListWorkflowComponent;\n})();","map":{"version":3,"mappings":"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","names":["first","Role","WorkflowStatus","HttpErrorResponse","i0","ListWorkflowComponent","constructor","workflowService","alertService","accountService","employeeService","route","router","currentAccount","accountValue","isAdmin","role","Admin","ngOnDestroy","subscriptions","forEach","sub","unsubscribe","ngOnInit","queryParamsSubscription","queryParams","subscribe","params","employeeIdFromQuery","workflows","employeeDetails","loadEmployeeDetails","loadWorkflowsForEmployee","loadAllWorkflows","currentEmployeeId","employeeId","String","info","loading","getById","pipe","next","employee","error","err","formatError","getByEmployeeId","sortWorkflows","getAll","sort","a","b","dateA","Date","datetimecreated","getTime","dateB","onStatusSelected","workflow","newStatus","console","log","id","updateWorkflowStatus","changeStatus","updatedWorkflow","index","findIndex","w","success","openStatusChangeModal","status","find","x","pendingStatusChange","confirmMessage","ForReviewing","confirmModal","show","onStatusChangeConfirmed","isUpdating","deleteWorkflow","confirm","isDeleting","delete","filter","getDetailsAsObject","details","JSON","parse","e","key","value","requestId","requestType","requesterId","message","task","Object","keys","length","entries","map","stringify","isPendingOrReviewing","Pending","isCompletedOrApproved","Completed","Approved","isRejected","Rejected","canChangeStatus","goBackToEmployees","navigate","goBackToAdminDashboard","defaultMessage","isTaskOnlyWorkflow","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\workflows\\list.component.ts","C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\workflows\\list.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\nimport { WorkflowService, AlertService, AccountService, EmployeeService } from '@app/_services';\r\nimport { Account, Role } from '@app/_models';\r\nimport { WorkflowStatus, Workflow } from '@app/_models/workflow';\r\nimport { ConfirmModalComponent } from './confirm-modal.component';\r\nimport { Employee } from '@app/_models/employee';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({ templateUrl: 'list.component.html' })\r\nexport class ListWorkflowComponent implements OnInit, OnDestroy {\r\n  @ViewChild('confirmModal') confirmModal!: ConfirmModalComponent;\r\n  workflows: Workflow[] = [];\r\n  loading = false;\r\n  currentAccount: Account | null = null;\r\n  isAdmin = false;\r\n  employeeId: string | null = null;\r\n  displayEmployeeId: string | null = null;\r\n  confirmMessage: string = '';\r\n  notFound = false;\r\n  private pendingStatusChange: { id: string; status: WorkflowStatus } | null = null;\r\n  employeeIdFromQuery: string | null = null;\r\n  employeeDetails: Employee | null = null;\r\n\r\n  private queryParamsSubscription!: Subscription;\r\n  private statusUpdateWorkflow: Workflow | null = null;\r\n  // Make enum available in template\r\n  WorkflowStatus = WorkflowStatus;\r\n  Role = Role;\r\n\r\n  constructor(\r\n    private workflowService: WorkflowService,\r\n    private alertService: AlertService,\r\n    private accountService: AccountService,\r\n    private employeeService: EmployeeService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {\r\n    this.currentAccount = this.accountService.accountValue;\r\n    this.isAdmin = this.currentAccount?.role === Role.Admin;\r\n  }\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  ngOnDestroy(): void {\r\n    // Unsubscribe from all subscriptions to prevent memory leaks\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.queryParamsSubscription = this.route.queryParams.subscribe(params => {\r\n      this.employeeIdFromQuery = params['employeeId'];\r\n      this.workflows = [];\r\n      this.employeeDetails = null;\r\n\r\n      if (this.employeeIdFromQuery) {\r\n        this.loadEmployeeDetails(this.employeeIdFromQuery);\r\n        this.loadWorkflowsForEmployee(this.employeeIdFromQuery);\r\n      } else if (this.isAdmin) {\r\n        this.loadAllWorkflows();\r\n      } else {\r\n\r\n        const currentEmployeeId = this.employeeId;\r\n        if (currentEmployeeId) {\r\n          this.employeeIdFromQuery = String(currentEmployeeId);\r\n          this.loadEmployeeDetails(String(currentEmployeeId));\r\n          this.loadWorkflowsForEmployee(String(currentEmployeeId));\r\n        } else {\r\n          this.alertService.info(\"No employee specified, and your account is not linked to an employee record.\");\r\n          this.loading = false;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  loadEmployeeDetails(employeeId: string) {\r\n    this.employeeService.getById(employeeId)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (employee) => this.employeeDetails = employee,\r\n        error: (err) => this.alertService.error(this.formatError(err, 'Failed to load employee details'))\r\n      });\r\n  }\r\n\r\n  loadWorkflowsForEmployee(employeeId: string) {\r\n    this.loading = true;\r\n    this.workflowService.getByEmployeeId(employeeId)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (workflows) => {\r\n          this.workflows = this.sortWorkflows(workflows);\r\n          this.loading = false;\r\n        },\r\n        error: (err) => {\r\n          this.alertService.error(this.formatError(err, `Failed to load workflows for employee ${employeeId}`));\r\n          this.workflows = [];\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  loadAllWorkflows() {\r\n    this.loading = true;\r\n    this.workflowService.getAll()\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (workflows) => {\r\n          this.workflows = this.sortWorkflows(workflows);\r\n          this.loading = false;\r\n        },\r\n        error: (err) => {\r\n          this.alertService.error(this.formatError(err, 'Failed to load all workflows'));\r\n          this.workflows = [];\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  private sortWorkflows(workflows: Workflow[]): Workflow[] {\r\n    return workflows.sort((a, b) => {\r\n      const dateA = new Date(a.datetimecreated || 0).getTime();\r\n      const dateB = new Date(b.datetimecreated || 0).getTime();\r\n      return dateB - dateA;\r\n    });\r\n  }\r\n\r\n  onStatusSelected(workflow: Workflow, newStatus: WorkflowStatus | string) {\r\n    console.log(`Status change selected for workflow ${workflow.id} to ${newStatus}`);\r\n    this.updateWorkflowStatus(workflow, newStatus as WorkflowStatus);\r\n  }\r\n\r\n  updateWorkflowStatus(workflow: Workflow, newStatus: WorkflowStatus) {\r\n    if (!workflow || !workflow.id) return;\r\n    this.workflowService.changeStatus(workflow.id, newStatus)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (updatedWorkflow) => {\r\n          const index = this.workflows.findIndex(w => w.id === updatedWorkflow.id);\r\n          if (index !== -1) {\r\n            this.workflows[index] = { ...this.workflows[index], ...updatedWorkflow };\r\n          }\r\n          this.alertService.success('Workflow status updated successfully!');\r\n        },\r\n        error: (err) => {\r\n          this.alertService.error(this.formatError(err, 'Failed to update workflow status'));\r\n        }\r\n      });\r\n  }\r\n\r\n  openStatusChangeModal(id: string, status: WorkflowStatus) {\r\n    const workflow = this.workflows.find(x => x.id === id);\r\n    if (!workflow) return;\r\n\r\n    this.pendingStatusChange = { id, status };\r\n    this.confirmMessage = `Are you sure you want to mark this workflow ${status === WorkflowStatus.ForReviewing ? 'for review' : 'as completed'}?`;\r\n    this.confirmModal.show();\r\n  }\r\n\r\n  onStatusChangeConfirmed() {\r\n    if (!this.pendingStatusChange) return;\r\n\r\n    const { id, status } = this.pendingStatusChange;\r\n    const workflow = this.workflows.find(x => x.id === id);\r\n    if (!workflow) return;\r\n\r\n    workflow.isUpdating = true;\r\n    this.workflowService.changeStatus(id, status)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: () => {\r\n          workflow.status = status;\r\n          workflow.isUpdating = false;\r\n          this.alertService.success('Workflow status updated successfully');\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n          workflow.isUpdating = false;\r\n        }\r\n      });\r\n\r\n    this.pendingStatusChange = null;\r\n  }\r\n\r\n  deleteWorkflow(id: string) {\r\n    const workflow = this.workflows.find(x => x.id === id);\r\n    if (!workflow) return;\r\n\r\n    if (confirm('Are you sure you want to delete this workflow?')) {\r\n      workflow.isDeleting = true;\r\n      this.workflowService.delete(id)\r\n        .pipe(first())\r\n        .subscribe({\r\n          next: () => {\r\n            this.workflows = this.workflows.filter(x => x.id !== id);\r\n            this.alertService.success('Workflow deleted successfully');\r\n          },\r\n          error: error => {\r\n            this.alertService.error(error);\r\n            workflow.isDeleting = false;\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  getDetailsAsObject(details: any): { key: string, value: any }[] {\r\n    // If details is a string, try to parse it as JSON first\r\n    if (typeof details === 'string') {\r\n      try {\r\n        details = JSON.parse(details);\r\n      } catch (e) {\r\n        // If parsing fails, just return the string as a single \"task\" entry\r\n        return [{ key: 'task', value: details }];\r\n      }\r\n    }\r\n    \r\n    // For Request Approval workflows, format in the standard way\r\n    if (details && details.requestId && details.requestType && details.requesterId && details.message) {\r\n      return [\r\n        { key: 'requestId', value: details.requestId },\r\n        { key: 'requestType', value: details.requestType },\r\n        { key: 'requesterId', value: details.requesterId },\r\n        { key: 'message', value: details.message }\r\n      ];\r\n    }\r\n    \r\n    // For task-based workflows, show only the task if not a Request Approval workflow\r\n    if (details && details.task && Object.keys(details).length === 1) {\r\n      return [{ key: 'task', value: details.task }];\r\n    }\r\n    \r\n    // Return the details as key-value pairs for other cases\r\n    return Object.entries(details || {})\r\n      .filter(([key]) => key !== 'task') // Filter out task if it exists along with other fields\r\n      .map(([key, value]) => ({ \r\n        key, \r\n        value: typeof value === 'object' ? JSON.stringify(value) : value \r\n      }));\r\n  }\r\n\r\n  isPendingOrReviewing(status: string): boolean {\r\n    return status === WorkflowStatus.Pending || status === WorkflowStatus.ForReviewing;\r\n  }\r\n\r\n  isCompletedOrApproved(status: string): boolean {\r\n    return status === WorkflowStatus.Completed || status === WorkflowStatus.Approved;\r\n  }\r\n\r\n  isRejected(status: string): boolean {\r\n    return status === WorkflowStatus.Rejected;\r\n  }\r\n\r\n  canChangeStatus(status: string): boolean {\r\n    return !(status === WorkflowStatus.Completed || status === WorkflowStatus.Rejected);\r\n  }\r\n\r\n  goBackToEmployees() {\r\n    this.router.navigate(['/admin/employees']);\r\n  }\r\n  goBackToAdminDashboard() {\r\n    this.router.navigate(['/admin']); // Or your main admin overview page\r\n  }\r\n\r\n  private formatError(error: HttpErrorResponse | Error, defaultMessage: string): string {\r\n    if (error instanceof HttpErrorResponse) {\r\n      return error.error?.message || error.message || defaultMessage;\r\n    }\r\n    return error.message || defaultMessage;\r\n  }\r\n\r\n  // Check if workflow details only contain a task field\r\n  isTaskOnlyWorkflow(details: any): boolean {\r\n    if (typeof details === 'string') {\r\n      try {\r\n        details = JSON.parse(details);\r\n      } catch (e) {\r\n        // If can't parse as JSON, it's likely just a string task\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // If it has only a task property and no others, it's a task-only workflow\r\n    return details && \r\n           details.task && \r\n           Object.keys(details).length === 1 && \r\n           !details.requestId && \r\n           !details.requestType && \r\n           !details.requesterId && \r\n           !details.message;\r\n  }\r\n} ","<div class=\"card\">\n  <div class=\"card-header\">\n    Workflows\n    <span *ngIf=\"employeeDetails\">for Employee {{ employeeDetails.employeeId }}</span>\n    <span *ngIf=\"!employeeIdFromQuery && isAdmin\"> - All Workflows</span>\n  </div>\n  <div class=\"card-body\">\n    <div *ngIf=\"loading\" class=\"text-center\">\n      <span class=\"spinner-border spinner-border-lg align-center\"></span>\n    </div>\n\n    <div *ngIf=\"!loading && workflows?.length === 0\" class=\"text-center text-muted\">\n      <p *ngIf=\"employeeIdFromQuery\">No workflows found for this employee.</p>\n      <p *ngIf=\"!employeeIdFromQuery\">No workflows found.</p>\n    </div>\n\n    <div *ngIf=\"!loading && workflows?.length > 0\" class=\"table-responsive\">\n      <table class=\"table table-striped align-middle\">\n        <thead>\n          <tr>\n            <th>Type</th>\n            <th>Details</th>\n            <th>Status</th>\n            <th *ngIf=\"isAdmin\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let workflow of workflows\">\n            <td>{{ workflow.type }}</td>\n            <td>\n              <ng-container *ngIf=\"workflow.details\">\n                <ng-container *ngIf=\"!(workflow.type === 'Request Approval' && isTaskOnlyWorkflow(workflow.details))\">\n                  <ng-container *ngFor=\"let entry of getDetailsAsObject(workflow.details)\">\n                    <div><b>{{ entry.key }}:</b> {{ entry.value }}</div>\n                  </ng-container>\n                </ng-container>\n              </ng-container>\n            </td>\n            <td>\n              <span class=\"badge\" [ngClass]=\"{\n                  'bg-warning text-dark': workflow.status === WorkflowStatus.Pending || workflow.status === WorkflowStatus.ForReviewing,\n                  'bg-success': workflow.status === WorkflowStatus.Completed || workflow.status === WorkflowStatus.Approved,\n                  'bg-danger': workflow.status === WorkflowStatus.Rejected\n                }\">\n                {{ workflow.status }}\n              </span>\n            </td>\n            <td *ngIf=\"isAdmin\">\n              <select class=\"form-select form-select-sm d-inline-block w-auto\" [(ngModel)]=\"workflow.status\"\n                (ngModelChange)=\"onStatusSelected(workflow, $event)\"\n                [disabled]=\"workflow.status === WorkflowStatus.Completed || workflow.status === WorkflowStatus.Rejected\">\n                <option [ngValue]=\"WorkflowStatus.Pending\">Pending</option>\n                <option [ngValue]=\"WorkflowStatus.Approved\">Approved\n                </option>\n                <option [ngValue]=\"WorkflowStatus.Rejected\">Rejected\n                </option>\n              </select>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"mt-3 text-end\">\n      <button class=\"btn btn-secondary\" (click)=\"goBackToEmployees()\" *ngIf=\"employeeIdFromQuery\">Back to Employees\n        </button>\n      <button class=\"btn btn-secondary\" (click)=\"goBackToAdminDashboard()\" *ngIf=\"!employeeIdFromQuery && isAdmin\">Back\n        to Admin Dashboard</button>\n    </div>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}