{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first, switchMap, catchError } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { Role } from '@app/_models';\nimport { RequestStatus } from '@app/_models/request';\nimport { WorkflowStatus, WorkflowType } from '@app/_models/workflow';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services/request.service\";\nimport * as i4 from \"@app/_services/employee.service\";\nimport * as i5 from \"@app/_services/workflow.service\";\nimport * as i6 from \"@app/_services/alert.service\";\nimport * as i7 from \"@app/_services/account.service\";\nimport * as i8 from \"@angular/common\";\nfunction RequestAddEditComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtext(1, \" At least one item is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestAddEditComponent_div_16_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Type is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestAddEditComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtemplate(1, RequestAddEditComponent_div_16_div_1_Template, 2, 0, \"div\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.type.errors.required);\n  }\n}\nfunction RequestAddEditComponent_option_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const emp_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", emp_r7.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", emp_r7.employeeId, \" \");\n  }\n}\nfunction RequestAddEditComponent_div_24_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Employee is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestAddEditComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtemplate(1, RequestAddEditComponent_div_24_div_1_Template, 2, 0, \"div\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.f.employeeId.errors.required);\n  }\n}\nfunction RequestAddEditComponent_div_29_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Item name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestAddEditComponent_div_29_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtemplate(1, RequestAddEditComponent_div_29_div_6_div_1_Template, 2, 0, \"div\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const itemGroup_r9 = i0.ɵɵnextContext().$implicit;\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = itemGroup_r9.get(\"name\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n  }\n}\nfunction RequestAddEditComponent_div_29_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Quantity is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestAddEditComponent_div_29_div_11_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Quantity must be at least 1\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestAddEditComponent_div_29_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtemplate(1, RequestAddEditComponent_div_29_div_11_div_1_Template, 2, 0, \"div\", 26);\n    i0.ɵɵtemplate(2, RequestAddEditComponent_div_29_div_11_div_2_Template, 2, 0, \"div\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const itemGroup_r9 = i0.ɵɵnextContext().$implicit;\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = itemGroup_r9.get(\"quantity\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = itemGroup_r9.get(\"quantity\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.min);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nfunction RequestAddEditComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 27)(1, \"div\", 28)(2, \"div\", 29)(3, \"label\", 30);\n    i0.ɵɵtext(4, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 31);\n    i0.ɵɵtemplate(6, RequestAddEditComponent_div_29_div_6_Template, 2, 1, \"div\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 29)(8, \"label\", 30);\n    i0.ɵɵtext(9, \"Quantity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 32);\n    i0.ɵɵtemplate(11, RequestAddEditComponent_div_29_div_11_Template, 3, 2, \"div\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 33)(13, \"label\", 34);\n    i0.ɵɵtext(14, \"\\u00A0\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 35);\n    i0.ɵɵlistener(\"click\", function RequestAddEditComponent_div_29_Template_button_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const i_r10 = restoredCtx.index;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.removeItem(i_r10));\n    });\n    i0.ɵɵtext(16, \" Remove \");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const itemGroup_r9 = ctx.$implicit;\n    const i_r10 = ctx.index;\n    const ctx_r4 = i0.ɵɵnextContext();\n    let tmp_3_0;\n    let tmp_4_0;\n    let tmp_7_0;\n    let tmp_8_0;\n    i0.ɵɵproperty(\"formGroupName\", i_r10);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"itemName-\", i_r10, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"itemName-\", i_r10, \"\");\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx_r4.submitted && ((tmp_3_0 = itemGroup_r9.get(\"name\")) == null ? null : tmp_3_0.errors)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.submitted && ((tmp_4_0 = itemGroup_r9.get(\"name\")) == null ? null : tmp_4_0.errors));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"itemQuantity-\", i_r10, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"itemQuantity-\", i_r10, \"\");\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx_r4.submitted && ((tmp_7_0 = itemGroup_r9.get(\"quantity\")) == null ? null : tmp_7_0.errors)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.submitted && ((tmp_8_0 = itemGroup_r9.get(\"quantity\")) == null ? null : tmp_8_0.errors));\n  }\n}\nfunction RequestAddEditComponent_span_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 36);\n  }\n}\nexport let RequestAddEditComponent = /*#__PURE__*/(() => {\n  class RequestAddEditComponent {\n    constructor(formBuilder, route, router, requestService, employeeService, workflowService,\n    // Injected\n    alertService, accountService // Injected\n    ) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.requestService = requestService;\n      this.employeeService = employeeService;\n      this.workflowService = workflowService;\n      this.alertService = alertService;\n      this.accountService = accountService;\n      this.id = null;\n      this.loading = false;\n      this.submitted = false;\n      this.employeesForDropdown = []; // For the employee dropdown\n      this.currentAccount = this.accountService.accountValue; // Initialize currentAccount\n    }\n\n    ngOnInit() {\n      var _a, _b;\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      // Check for employeeId in query params\n      const employeeIdFromQuery = this.route.snapshot.queryParams['employeeId'];\n      this.form = this.formBuilder.group({\n        type: ['Equipment', Validators.required],\n        // Don't pre-fill employeeId when in add mode unless it's in query params\n        employeeId: [null, Validators.required],\n        requestItems: this.formBuilder.array([], [Validators.required, Validators.minLength(1)]) // Ensure at least one item\n      });\n\n      this.loadEmployeesForDropdown(employeeIdFromQuery);\n      if (!this.isAddMode && this.id) {\n        this.loadRequestData();\n      } else {\n        // For add mode, add one default item if desired (or leave empty for user to add)\n        if (this.requestItems.length === 0) {\n          // Add item only if array is empty\n          this.addItem();\n        }\n      }\n      // If in add mode and current user is NOT an admin AND their employeeId is set, disable the field.\n      // This means non-admins can only create requests for themselves.\n      if (this.isAddMode && ((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.role) !== Role.Admin && ((_b = this.currentAccount) === null || _b === void 0 ? void 0 : _b.id) && !employeeIdFromQuery) {\n        const currentEmpForDropdown = this.employeesForDropdown.find(e => {\n          var _a;\n          return e.id === Number((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.id);\n        });\n        if (currentEmpForDropdown) {\n          this.form.patchValue({\n            employeeId: currentEmpForDropdown.id\n          });\n          this.f.employeeId.disable();\n        }\n      }\n    }\n    // Convenience getters\n    get f() {\n      return this.form.controls;\n    }\n    get requestItems() {\n      return this.form.get('requestItems');\n    }\n    loadEmployeesForDropdown(employeeIdFromQuery) {\n      this.employeeService.getAll().pipe(first()).subscribe({\n        next: employees => {\n          var _a, _b, _c;\n          this.employeesForDropdown = employees.map(emp => {\n            // Attempt to get linked account for full name\n            // This assumes EmployeeService.getAll() returns Employee objects that might\n            // have a userId to link to an Account, or AccountService can fetch by userId.\n            // Or, your Employee model might already include firstName/lastName.\n            const linkedAccount = this.accountService.getAccountByUserId(Number(emp.id)); // You'll need this helper\n            return {\n              id: Number(emp.id),\n              employeeId: emp.employeeId,\n              userId: Number(emp.id) // Ensure userId is a number\n            };\n          });\n          // If employeeId is in query params, pre-select and possibly disable it\n          if (employeeIdFromQuery) {\n            const selectedEmp = this.employeesForDropdown.find(e => e.id === Number(employeeIdFromQuery));\n            if (selectedEmp) {\n              this.form.patchValue({\n                employeeId: selectedEmp.id\n              });\n              // Disable field if not admin (non-admins can't change the employee)\n              if (((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.role) !== Role.Admin) {\n                this.f.employeeId.disable();\n              }\n            }\n          }\n          // Only auto-select for non-admins who should only create requests for themselves\n          else if (this.isAddMode && ((_b = this.currentAccount) === null || _b === void 0 ? void 0 : _b.role) !== Role.Admin && ((_c = this.currentAccount) === null || _c === void 0 ? void 0 : _c.id)) {\n            const currentEmpForDropdown = this.employeesForDropdown.find(e => {\n              var _a;\n              return e.id === Number((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.id);\n            });\n            if (currentEmpForDropdown) {\n              this.form.patchValue({\n                employeeId: currentEmpForDropdown.id\n              });\n              this.f.employeeId.disable();\n            }\n          }\n        },\n        error: err => {\n          this.alertService.error(this.formatError(err, 'Failed to load employees for dropdown'));\n        }\n      });\n    }\n    loadRequestData() {\n      if (!this.id) return;\n      this.loading = true;\n      this.requestService.getById(this.id).pipe(first()).subscribe(request => {\n        var _a, _b, _c;\n        const appRequest = request;\n        this.form.patchValue({\n          type: appRequest.type,\n          employeeId: appRequest.employeeId // This should be the Employee.id\n        });\n\n        this.requestItems.clear();\n        appRequest.requestItems.forEach(item => {\n          this.requestItems.push(this.createItemFormGroup(item.name, item.quantity));\n        });\n        this.loading = false;\n        // If editing and current user is not an admin, disable employeeId field\n        // (assuming they can only edit requests they created or are assigned to them in some way)\n        if (((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.role) !== Role.Admin && appRequest.employeeId !== Number((_b = this.currentAccount) === null || _b === void 0 ? void 0 : _b.id)) {\n          this.f.employeeId.disable(); // Or other logic based on who can edit what\n        } else if (((_c = this.currentAccount) === null || _c === void 0 ? void 0 : _c.role) !== Role.Admin) {\n          this.f.employeeId.disable(); // If non-admin can only edit their own, and it is their own\n        }\n      }, err => {\n        this.alertService.error(this.formatError(err, 'Failed to load request data'));\n        this.loading = false;\n      });\n    }\n    createItemFormGroup(name = '', quantity = 1) {\n      return this.formBuilder.group({\n        name: [name, Validators.required],\n        quantity: [quantity, [Validators.required, Validators.min(1)]]\n      });\n    }\n    addItem() {\n      this.requestItems.push(this.createItemFormGroup());\n    }\n    removeItem(index) {\n      this.requestItems.removeAt(index);\n    }\n    onSubmit() {\n      this.submitted = true;\n      this.alertService.clear();\n      if (this.form.invalid) {\n        this.form.markAllAsTouched();\n        if (this.requestItems.length === 0) {\n          this.alertService.error('At least one item is required.');\n        }\n        return;\n      }\n      if (this.loading) return;\n      this.loading = true;\n      const formValue = this.form.getRawValue();\n      const requestData = {\n        type: formValue.type,\n        employeeId: Number(formValue.employeeId),\n        requestItems: formValue.requestItems.map(item => ({\n          name: item.name,\n          type: formValue.type,\n          quantity: item.quantity,\n          status: RequestStatus.Draft\n        })),\n        status: 'Pending Approval',\n        description: `Request for ${formValue.type}`,\n        requestNumber: `REQ-${Date.now()}`\n      };\n      if (this.isAddMode) {\n        this.createRequestWithWorkflow(requestData);\n      } else if (this.id) {\n        this.updateRequest(this.id, requestData);\n      }\n    }\n    createRequestWithWorkflow(requestData) {\n      this.requestService.create(requestData).pipe(first(), switchMap(createdRequest => {\n        if (!createdRequest || createdRequest.id === undefined || createdRequest.employeeId === null || createdRequest.employeeId === undefined) {\n          // If request creation failed or didn't return expected data, throw an error to be caught by catchError\n          return throwError(() => new Error('Request creation failed or did not return an ID. Cannot create workflow.'));\n        }\n        // Get details of the employee who made the request for the workflow details\n        const employeeWhoMadeRequest = this.employeesForDropdown.find(e => e.id === createdRequest.employeeId);\n        const requesterName = employeeWhoMadeRequest ? `${employeeWhoMadeRequest.employeeId}` : `Employee ID ${createdRequest.employeeId}`;\n        const itemsSummary = createdRequest.requestItems.map(it => `${it.name} (x${it.quantity})`).join(', ');\n        // --- !!! IMPORTANT: Determine Approver Logic !!! ---\n        // This is a placeholder. You need logic to find the correct approver's Employee ID.\n        // It could be based on department, role, a predefined matrix, or a default Admin.\n        // For this example, let's assume an Admin (employeeId 1) needs to approve.\n        const approverEmployeeId = 1; // <<< --- REPLACE WITH YOUR ACTUAL APPROVER LOGIC\n        if (!this.employeesForDropdown.find(e => e.id === approverEmployeeId)) {\n          console.warn(`Approver with employeeId ${approverEmployeeId} not found in dropdown list. Workflow might be unassigned or assigned incorrectly.`);\n        }\n        const workflowData = {\n          employeeId: approverEmployeeId,\n          type: WorkflowType.RequestApproval,\n          details: {\n            task: `Request from ${requesterName} - Review ${createdRequest.type} request #${createdRequest.id} for items: ${itemsSummary}.`\n          },\n          status: WorkflowStatus.Pending,\n          originatingRequestId: createdRequest.id\n        };\n        return this.workflowService.create(workflowData);\n      }), catchError(err => {\n        this.alertService.error(this.formatError(err, 'Failed to submit request or create approval workflow.'));\n        this.loading = false;\n        return of(null); // Completes the observable chain gracefully after an error\n      })).subscribe({\n        next: workflow => {\n          if (workflow) {\n            // Check if workflow creation was successful (not caught by catchError)\n            this.alertService.success('Request submitted and approval workflow created!', {\n              keepAfterRouteChange: true\n            });\n            this.router.navigate(['/admin/requests']); // Adjust path to your requests list\n          }\n          // Loading is set to false in catchError or here\n          this.loading = false;\n        },\n        // error is handled by catchError, no separate error handler needed here for the main subscription\n        complete: () => {\n          if (this.loading) {\n            this.loading = false;\n          }\n        }\n      });\n    }\n    updateRequest(id, requestData) {\n      // If updating a request also needs workflow changes (e.g., re-approval), add logic here.\n      // For now, this just updates the request itself. The workflow would be separate.\n      this.requestService.update(id, requestData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request updated successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/admin/requests']); // Adjust path\n        },\n\n        error: err => {\n          this.alertService.error(this.formatError(err, 'Failed to update request'));\n          this.loading = false;\n        },\n        complete: () => {\n          this.loading = false;\n        }\n      });\n    }\n    onCancel() {\n      // Navigate based on add/edit mode to go \"back\" appropriately\n      if (this.isAddMode) {\n        this.router.navigate(['../'], {\n          relativeTo: this.route\n        }); // If /admin/requests/add -> /admin/requests\n      } else {\n        this.router.navigate(['../../'], {\n          relativeTo: this.route\n        }); // If /admin/requests/edit/1 -> /admin/requests\n      }\n      // Or a fixed path: this.router.navigate(['/admin/requests']);\n    }\n\n    formatError(error, defaultMessage) {\n      var _a;\n      if (error instanceof HttpErrorResponse) {\n        return ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || error.message || defaultMessage;\n      }\n      return error.message || defaultMessage;\n    }\n  }\n  RequestAddEditComponent.ɵfac = function RequestAddEditComponent_Factory(t) {\n    return new (t || RequestAddEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.RequestService), i0.ɵɵdirectiveInject(i4.EmployeeService), i0.ɵɵdirectiveInject(i5.WorkflowService), i0.ɵɵdirectiveInject(i6.AlertService), i0.ɵɵdirectiveInject(i7.AccountService));\n  };\n  RequestAddEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RequestAddEditComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 38,\n    vars: 18,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [\"class\", \"alert alert-danger mt-2\", 4, \"ngIf\"], [1, \"mb-3\"], [\"for\", \"type\", 1, \"form-label\"], [\"id\", \"type\", \"formControlName\", \"type\", 1, \"form-select\", 3, \"ngClass\"], [\"value\", \"Equipment\"], [\"value\", \"Leave\"], [\"value\", \"Resources\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"employeeId\", 1, \"form-label\"], [\"id\", \"employeeId\", \"formControlName\", \"employeeId\", 1, \"form-select\", 3, \"ngClass\"], [3, \"ngValue\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-label\"], [\"formArrayName\", \"requestItems\"], [\"class\", \"border p-3 mb-3 rounded\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", \"mt-2\", 3, \"click\"], [1, \"text-center\", \"mt-4\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"me-2\", 3, \"disabled\"], [\"class.bind\", \"'spinner-border spinner-border-sm me-1'\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\", \"click\"], [1, \"alert\", \"alert-danger\", \"mt-2\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"border\", \"p-3\", \"mb-3\", \"rounded\", 3, \"formGroupName\"], [1, \"row\", \"align-items-center\"], [1, \"col-md-5\"], [1, \"form-label\", \"small\", 3, \"for\"], [\"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\", \"form-control-sm\", 3, \"id\", \"ngClass\"], [\"type\", \"number\", \"formControlName\", \"quantity\", 1, \"form-control\", \"form-control-sm\", 3, \"id\", \"ngClass\"], [1, \"col-md-2\"], [1, \"form-label\", \"small\", \"d-block\"], [\"type\", \"button\", \"title\", \"Remove Item\", 1, \"btn\", \"btn-danger\", \"btn-sm\", \"w-100\", 3, \"click\"], [\"class.bind\", \"'spinner-border spinner-border-sm me-1'\"]],\n    template: function RequestAddEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function RequestAddEditComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtemplate(5, RequestAddEditComponent_div_5_Template, 2, 0, \"div\", 4);\n        i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n        i0.ɵɵtext(8, \"Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"select\", 7)(10, \"option\", 8);\n        i0.ɵɵtext(11, \"Equipment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"option\", 9);\n        i0.ɵɵtext(13, \"Leave\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"option\", 10);\n        i0.ɵɵtext(15, \"Resources\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(16, RequestAddEditComponent_div_16_Template, 2, 1, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 5)(18, \"label\", 12);\n        i0.ɵɵtext(19, \"Employee\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"select\", 13)(21, \"option\", 14);\n        i0.ɵɵtext(22, \"-- Select Employee --\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(23, RequestAddEditComponent_option_23_Template, 2, 2, \"option\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(24, RequestAddEditComponent_div_24_Template, 2, 1, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 5)(26, \"label\", 16);\n        i0.ɵɵtext(27, \"Items\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 17);\n        i0.ɵɵtemplate(29, RequestAddEditComponent_div_29_Template, 17, 13, \"div\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"button\", 19);\n        i0.ɵɵlistener(\"click\", function RequestAddEditComponent_Template_button_click_30_listener() {\n          return ctx.addItem();\n        });\n        i0.ɵɵtext(31, \"Add Item\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(32, \"div\", 20)(33, \"button\", 21);\n        i0.ɵɵtemplate(34, RequestAddEditComponent_span_34_Template, 1, 0, \"span\", 22);\n        i0.ɵɵtext(35);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"button\", 23);\n        i0.ɵɵlistener(\"click\", function RequestAddEditComponent_Template_button_click_36_listener() {\n          return ctx.onCancel();\n        });\n        i0.ɵɵtext(37, \"Cancel\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        let tmp_2_0;\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.isAddMode ? \"Add\" : \"Edit\", \" Request\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.requestItems.length === 0 && ((tmp_2_0 = ctx.form.get(\"requestItems\")) == null ? null : tmp_2_0.hasError(\"required\")));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(14, _c0, ctx.submitted && ctx.f.type.errors));\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.type.errors);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(16, _c0, ctx.submitted && ctx.f.employeeId.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngValue\", null);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.employeesForDropdown);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.employeeId.errors);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.requestItems.controls);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.isAddMode ? \"Create\" : \"Save Changes\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n      }\n    },\n    dependencies: [i8.NgClass, i8.NgForOf, i8.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName],\n    encapsulation: 2\n  });\n  return RequestAddEditComponent;\n})();","map":{"version":3,"mappings":"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","names":["Validators","first","switchMap","catchError","HttpErrorResponse","of","throwError","Role","RequestStatus","WorkflowStatus","WorkflowType","i0","RequestAddEditComponent","constructor","formBuilder","route","router","requestService","employeeService","workflowService","alertService","accountService","currentAccount","accountValue","ngOnInit","id","snapshot","params","isAddMode","employeeIdFromQuery","queryParams","form","group","type","required","employeeId","requestItems","array","minLength","loadEmployeesForDropdown","loadRequestData","length","addItem","role","Admin","currentEmpForDropdown","employeesForDropdown","find","e","Number","patchValue","f","disable","controls","get","getAll","pipe","subscribe","next","employees","map","emp","linkedAccount","getAccountByUserId","userId","selectedEmp","error","err","formatError","loading","getById","request","appRequest","clear","forEach","item","push","createItemFormGroup","name","quantity","min","removeItem","index","removeAt","onSubmit","submitted","invalid","markAllAsTouched","formValue","getRawValue","requestData","status","Draft","description","requestNumber","Date","now","createRequestWithWorkflow","updateRequest","create","createdRequest","undefined","Error","employeeWhoMadeRequest","requesterName","itemsSummary","it","join","approverEmployeeId","console","warn","workflowData","RequestApproval","details","task","Pending","originatingRequestId","workflow","success","keepAfterRouteChange","navigate","complete","update","onCancel","relativeTo","defaultMessage","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\requests\\add-edit.component.ts","C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\requests\\add-edit.component.html"],"sourcesContent":["// src/app/requests/add-edit.component.ts\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, FormArray, Validators, AbstractControl } from '@angular/forms';\r\nimport { first, switchMap, catchError } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { of, throwError } from 'rxjs';\r\n\r\nimport { RequestService } from '@app/_services/request.service';\r\nimport { EmployeeService } from '@app/_services/employee.service';\r\nimport { AlertService } from '@app/_services/alert.service';\r\nimport { WorkflowService } from '@app/_services/workflow.service';\r\nimport { AccountService } from '@app/_services/account.service';\r\nimport { Account, Role } from '@app/_models';\r\nimport { AppRequest, RequestStatus } from '@app/_models/request';\r\nimport { Workflow, WorkflowStatus, WorkflowType } from '@app/_models/workflow';\r\nimport { Employee } from '@app/_models/employee';\r\n\r\n\r\nexport interface EmployeeForDropdown {\r\n  id: number;\r\n  employeeId: string;\r\n  userId?: number;\r\n}\r\n\r\n\r\n@Component({\r\n  templateUrl: 'add-edit.component.html',\r\n})\r\nexport class RequestAddEditComponent implements OnInit {\r\n  form!: FormGroup;\r\n  id: string | null = null;\r\n  isAddMode!: boolean;\r\n  loading = false;\r\n  submitted = false;\r\n  currentAccount: Account | null;\r\n\r\n  employeesForDropdown: EmployeeForDropdown[] = []; // For the employee dropdown\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private requestService: RequestService,\r\n    private employeeService: EmployeeService,\r\n    private workflowService: WorkflowService, // Injected\r\n    private alertService: AlertService,\r\n    private accountService: AccountService    // Injected\r\n  ) {\r\n    this.currentAccount = this.accountService.accountValue; // Initialize currentAccount\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.id = this.route.snapshot.params['id'];\r\n    this.isAddMode = !this.id;\r\n\r\n    // Check for employeeId in query params\r\n    const employeeIdFromQuery = this.route.snapshot.queryParams['employeeId'];\r\n\r\n    this.form = this.formBuilder.group({\r\n      type: ['Equipment', Validators.required],\r\n      // Don't pre-fill employeeId when in add mode unless it's in query params\r\n      employeeId: [null, Validators.required],\r\n      requestItems: this.formBuilder.array([], [Validators.required, Validators.minLength(1)]) // Ensure at least one item\r\n    });\r\n\r\n    this.loadEmployeesForDropdown(employeeIdFromQuery);\r\n\r\n    if (!this.isAddMode && this.id) {\r\n      this.loadRequestData();\r\n    } else {\r\n      // For add mode, add one default item if desired (or leave empty for user to add)\r\n      if (this.requestItems.length === 0) { // Add item only if array is empty\r\n        this.addItem();\r\n      }\r\n    }\r\n\r\n    // If in add mode and current user is NOT an admin AND their employeeId is set, disable the field.\r\n    // This means non-admins can only create requests for themselves.\r\n    if (this.isAddMode && this.currentAccount?.role !== Role.Admin && this.currentAccount?.id && !employeeIdFromQuery) {\r\n      const currentEmpForDropdown = this.employeesForDropdown.find(e => e.id === Number(this.currentAccount?.id));\r\n      if (currentEmpForDropdown) {\r\n        this.form.patchValue({ employeeId: currentEmpForDropdown.id });\r\n        this.f.employeeId.disable();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Convenience getters\r\n  get f(): { [key: string]: AbstractControl } { return this.form.controls; }\r\n  get requestItems(): FormArray { return this.form.get('requestItems') as FormArray; }\r\n\r\n  loadEmployeesForDropdown(employeeIdFromQuery?: string) {\r\n    this.employeeService.getAll()\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (employees: Employee[]) => { // Expect full Employee objects from service\r\n          this.employeesForDropdown = employees.map(emp => {\r\n            // Attempt to get linked account for full name\r\n            // This assumes EmployeeService.getAll() returns Employee objects that might\r\n            // have a userId to link to an Account, or AccountService can fetch by userId.\r\n            // Or, your Employee model might already include firstName/lastName.\r\n            const linkedAccount = this.accountService.getAccountByUserId(Number(emp.id)); // You'll need this helper\r\n            return {\r\n              id: Number(emp.id), // Ensure id is a number\r\n              employeeId: emp.employeeId, // Display ID like \"EMP001\"\r\n              userId: Number(emp.id) // Ensure userId is a number\r\n            };\r\n          });\r\n\r\n          // If employeeId is in query params, pre-select and possibly disable it\r\n          if (employeeIdFromQuery) {\r\n            const selectedEmp = this.employeesForDropdown.find(e => e.id === Number(employeeIdFromQuery));\r\n            if (selectedEmp) {\r\n              this.form.patchValue({ employeeId: selectedEmp.id });\r\n              \r\n              // Disable field if not admin (non-admins can't change the employee)\r\n              if (this.currentAccount?.role !== Role.Admin) {\r\n                this.f.employeeId.disable();\r\n              }\r\n            }\r\n          }\r\n          // Only auto-select for non-admins who should only create requests for themselves\r\n          else if (this.isAddMode && this.currentAccount?.role !== Role.Admin && this.currentAccount?.id) {\r\n            const currentEmpForDropdown = this.employeesForDropdown.find(e => e.id === Number(this.currentAccount?.id));\r\n            if (currentEmpForDropdown) {\r\n              this.form.patchValue({ employeeId: currentEmpForDropdown.id });\r\n              this.f.employeeId.disable();\r\n            }\r\n          }\r\n        },\r\n        error: (err: HttpErrorResponse) => {\r\n          this.alertService.error(this.formatError(err, 'Failed to load employees for dropdown'));\r\n        }\r\n      });\r\n  }\r\n\r\n  loadRequestData() {\r\n    if (!this.id) return;\r\n    this.loading = true;\r\n    this.requestService.getById(this.id)\r\n      .pipe(first())\r\n      .subscribe(\r\n        (request: any) => { // Accept any, then cast to AppRequest\r\n          const appRequest = request as AppRequest;\r\n          this.form.patchValue({\r\n            type: appRequest.type,\r\n            employeeId: appRequest.employeeId // This should be the Employee.id\r\n          });\r\n          this.requestItems.clear();\r\n          appRequest.requestItems.forEach((item: { name: string, quantity: number }) => {\r\n            this.requestItems.push(this.createItemFormGroup(item.name, item.quantity));\r\n          });\r\n          this.loading = false;\r\n\r\n          // If editing and current user is not an admin, disable employeeId field\r\n          // (assuming they can only edit requests they created or are assigned to them in some way)\r\n          if (this.currentAccount?.role !== Role.Admin && appRequest.employeeId !== Number(this.currentAccount?.id)) {\r\n            this.f.employeeId.disable(); // Or other logic based on who can edit what\r\n          } else if (this.currentAccount?.role !== Role.Admin) {\r\n            this.f.employeeId.disable(); // If non-admin can only edit their own, and it is their own\r\n          }\r\n        },\r\n        (err: HttpErrorResponse) => {\r\n          this.alertService.error(this.formatError(err, 'Failed to load request data'));\r\n          this.loading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  createItemFormGroup(name: string = '', quantity: number = 1): FormGroup {\r\n    return this.formBuilder.group({\r\n      name: [name, Validators.required],\r\n      quantity: [quantity, [Validators.required, Validators.min(1)]]\r\n    });\r\n  }\r\n\r\n  addItem() {\r\n    this.requestItems.push(this.createItemFormGroup());\r\n  }\r\n\r\n  removeItem(index: number) {\r\n    this.requestItems.removeAt(index);\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    this.alertService.clear();\r\n\r\n    if (this.form.invalid) {\r\n      this.form.markAllAsTouched();\r\n      if (this.requestItems.length === 0) {\r\n        this.alertService.error('At least one item is required.');\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this.loading) return;\r\n    this.loading = true;\r\n\r\n    const formValue = this.form.getRawValue();\r\n    const requestData: AppRequest = {\r\n      type: formValue.type,\r\n      employeeId: Number(formValue.employeeId),\r\n      requestItems: formValue.requestItems.map((item: any) => ({\r\n        name: item.name,\r\n        type: formValue.type,\r\n        quantity: item.quantity,\r\n        status: RequestStatus.Draft\r\n      })),\r\n      status: 'Pending Approval',\r\n      description: `Request for ${formValue.type}`,\r\n      requestNumber: `REQ-${Date.now()}`\r\n    };\r\n\r\n    if (this.isAddMode) {\r\n      this.createRequestWithWorkflow(requestData);\r\n    } else if (this.id) {\r\n      this.updateRequest(this.id, requestData);\r\n    }\r\n  }\r\n\r\n  private createRequestWithWorkflow(requestData: AppRequest) {\r\n    this.requestService.create(requestData).pipe(\r\n      first(),\r\n      switchMap((createdRequest: AppRequest) => {\r\n        if (!createdRequest || createdRequest.id === undefined || createdRequest.employeeId === null || createdRequest.employeeId === undefined) {\r\n          // If request creation failed or didn't return expected data, throw an error to be caught by catchError\r\n          return throwError(() => new Error('Request creation failed or did not return an ID. Cannot create workflow.'));\r\n        }\r\n\r\n        // Get details of the employee who made the request for the workflow details\r\n        const employeeWhoMadeRequest = this.employeesForDropdown.find(e => e.id === createdRequest.employeeId);\r\n        const requesterName = employeeWhoMadeRequest\r\n          ? `${employeeWhoMadeRequest.employeeId}`\r\n          : `Employee ID ${createdRequest.employeeId}`;\r\n\r\n        const itemsSummary = createdRequest.requestItems.map(it => `${it.name} (x${it.quantity})`).join(', ');\r\n\r\n        // --- !!! IMPORTANT: Determine Approver Logic !!! ---\r\n        // This is a placeholder. You need logic to find the correct approver's Employee ID.\r\n        // It could be based on department, role, a predefined matrix, or a default Admin.\r\n        // For this example, let's assume an Admin (employeeId 1) needs to approve.\r\n        const approverEmployeeId = 1; // <<< --- REPLACE WITH YOUR ACTUAL APPROVER LOGIC\r\n        if (!this.employeesForDropdown.find(e => e.id === approverEmployeeId)) {\r\n          console.warn(`Approver with employeeId ${approverEmployeeId} not found in dropdown list. Workflow might be unassigned or assigned incorrectly.`);\r\n        }\r\n\r\n        const workflowData: Partial<Workflow> = {\r\n          employeeId: approverEmployeeId, // ID of the employee who needs to ACTION this workflow\r\n          type: WorkflowType.RequestApproval,\r\n          details: {\r\n            task: `Request from ${requesterName} - Review ${createdRequest.type} request #${createdRequest.id} for items: ${itemsSummary}.`,\r\n          },\r\n          status: WorkflowStatus.Pending, // From your WorkflowStatus enum\r\n          originatingRequestId: createdRequest.id,\r\n        };\r\n        return this.workflowService.create(workflowData);\r\n      }),\r\n      catchError(err => {\r\n        this.alertService.error(this.formatError(err, 'Failed to submit request or create approval workflow.'));\r\n        this.loading = false;\r\n        return of(null); // Completes the observable chain gracefully after an error\r\n      })\r\n    )\r\n      .subscribe({\r\n        next: (workflow) => {\r\n          if (workflow) { // Check if workflow creation was successful (not caught by catchError)\r\n            this.alertService.success('Request submitted and approval workflow created!', { keepAfterRouteChange: true });\r\n            this.router.navigate(['/admin/requests']); // Adjust path to your requests list\r\n          }\r\n          // Loading is set to false in catchError or here\r\n          this.loading = false;\r\n        },\r\n        // error is handled by catchError, no separate error handler needed here for the main subscription\r\n        complete: () => { // Ensure loading is false if observable completes without error but also without next\r\n          if (this.loading) { this.loading = false; }\r\n        }\r\n      });\r\n  }\r\n\r\n  private updateRequest(id: string, requestData: AppRequest) {\r\n    // If updating a request also needs workflow changes (e.g., re-approval), add logic here.\r\n    // For now, this just updates the request itself. The workflow would be separate.\r\n    this.requestService.update(id, requestData)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: () => {\r\n          this.alertService.success('Request updated successfully', { keepAfterRouteChange: true });\r\n          this.router.navigate(['/admin/requests']); // Adjust path\r\n        },\r\n        error: (err: HttpErrorResponse) => {\r\n          this.alertService.error(this.formatError(err, 'Failed to update request'));\r\n          this.loading = false;\r\n        },\r\n        complete: () => {\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onCancel() {\r\n    // Navigate based on add/edit mode to go \"back\" appropriately\r\n    if (this.isAddMode) {\r\n      this.router.navigate(['../'], { relativeTo: this.route }); // If /admin/requests/add -> /admin/requests\r\n    } else {\r\n      this.router.navigate(['../../'], { relativeTo: this.route }); // If /admin/requests/edit/1 -> /admin/requests\r\n    }\r\n    // Or a fixed path: this.router.navigate(['/admin/requests']);\r\n  }\r\n\r\n  private formatError(error: HttpErrorResponse | Error, defaultMessage: string): string {\r\n    if (error instanceof HttpErrorResponse) {\r\n      return error.error?.message || error.message || defaultMessage;\r\n    }\r\n    return error.message || defaultMessage;\r\n  }\r\n}","<div class=\"card\">\n  <div class=\"card-header\">{{ isAddMode ? 'Add' : 'Edit' }} Request</div>\n  <div class=\"card-body\">\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n\n      <!-- Global form errors can be shown here via AlertService or a dedicated error display -->\n      <!-- <alert></alert> --> <!-- Your global alert component -->\n      <div *ngIf=\"submitted && requestItems.length === 0 && form.get('requestItems')?.hasError('required')\"\n        class=\"alert alert-danger mt-2\">\n        At least one item is required.\n      </div>\n\n\n      <div class=\"mb-3\">\n        <label for=\"type\" class=\"form-label\">Type</label>\n        <select id=\"type\" formControlName=\"type\" class=\"form-select\"\n          [ngClass]=\"{ 'is-invalid': submitted && f.type.errors }\">\n          <option value=\"Equipment\">Equipment</option>\n          <option value=\"Leave\">Leave</option>\n          <option value=\"Resources\">Resources</option>\n          <!-- Add more types as needed -->\n        </select>\n        <div *ngIf=\"submitted && f.type.errors\" class=\"invalid-feedback\">\n          <div *ngIf=\"f.type.errors.required\">Type is required</div>\n        </div>\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"employeeId\" class=\"form-label\">Employee</label>\n        <select id=\"employeeId\" formControlName=\"employeeId\" class=\"form-select\"\n          [ngClass]=\"{ 'is-invalid': submitted && f.employeeId.errors }\">\n          <option [ngValue]=\"null\">-- Select Employee --</option>\n          <option *ngFor=\"let emp of employeesForDropdown\" [ngValue]=\"emp.id\">\n            {{ emp.employeeId }}\n          </option>\n        </select>\n        <div *ngIf=\"submitted && f.employeeId.errors\" class=\"invalid-feedback\">\n          <div *ngIf=\"f.employeeId.errors.required\">Employee is required</div>\n        </div>\n      </div>\n\n      <div class=\"mb-3\">\n        <label class=\"form-label\">Items</label>\n        <div formArrayName=\"requestItems\">\n          <div *ngFor=\"let itemGroup of requestItems.controls; let i = index\" [formGroupName]=\"i\"\n            class=\"border p-3 mb-3 rounded\">\n            <div class=\"row align-items-center\">\n              <div class=\"col-md-5\">\n                <label for=\"itemName-{{i}}\" class=\"form-label small\">Name</label>\n                <input type=\"text\" id=\"itemName-{{i}}\" formControlName=\"name\" class=\"form-control form-control-sm\"\n                  [ngClass]=\"{ 'is-invalid': submitted && itemGroup.get('name')?.errors }\">\n                <div *ngIf=\"submitted && itemGroup.get('name')?.errors\" class=\"invalid-feedback\">\n                  <div *ngIf=\"itemGroup.get('name')?.errors?.required\">Item name is required</div>\n                </div>\n              </div>\n              <div class=\"col-md-5\">\n                <label for=\"itemQuantity-{{i}}\" class=\"form-label small\">Quantity</label>\n                <input type=\"number\" id=\"itemQuantity-{{i}}\" formControlName=\"quantity\"\n                  class=\"form-control form-control-sm\"\n                  [ngClass]=\"{ 'is-invalid': submitted && itemGroup.get('quantity')?.errors }\">\n                <div *ngIf=\"submitted && itemGroup.get('quantity')?.errors\" class=\"invalid-feedback\">\n                  <div *ngIf=\"itemGroup.get('quantity')?.errors?.required\">Quantity is required</div>\n                  <div *ngIf=\"itemGroup.get('quantity')?.errors?.min\">Quantity must be at least 1</div>\n                </div>\n              </div>\n              <div class=\"col-md-2\">\n                <label class=\"form-label small d-block\">&nbsp;</label>\n                <button type=\"button\" class=\"btn btn-danger btn-sm w-100\" (click)=\"removeItem(i)\" title=\"Remove Item\">\n                  Remove\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <button type=\"button\" class=\"btn btn-secondary btn-sm mt-2\" (click)=\"addItem()\">Add Item</button>\n      </div>\n\n      <div class=\"text-center mt-4\">\n        <button type=\"submit\" [disabled]=\"loading\" class=\"btn btn-primary me-2\">\n          <span *ngIf=\"loading\" class.bind=\"'spinner-border spinner-border-sm me-1'\"></span>\n          {{ isAddMode ? 'Create' : 'Save Changes' }}\n        </button>\n        <button type=\"button\" [disabled]=\"loading\" class=\"btn btn-secondary\" (click)=\"onCancel()\">Cancel</button>\n      </div>\n    </form>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}