{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction TransferModalComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelement(1, \"span\", 20);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransferModalComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.error);\n  }\n}\nfunction TransferModalComponent_option_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const dept_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", dept_r4.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(dept_r4.name);\n  }\n}\nfunction TransferModalComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 23);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"show d-block\": a0\n  };\n};\nexport let TransferModalComponent = /*#__PURE__*/(() => {\n  class TransferModalComponent {\n    constructor(employeeService, departmentService, alertService) {\n      this.employeeService = employeeService;\n      this.departmentService = departmentService;\n      this.alertService = alertService;\n      this.transferComplete = new EventEmitter();\n      this.departments = [];\n      this.currentDepartmentName = '';\n      this.isOpen = false;\n      this.loading = false;\n      this.error = '';\n    }\n    ngOnInit() {\n      // Load departments on init\n      this.loadDepartments();\n    }\n    open(employeeId) {\n      this.employeeId = employeeId;\n      this.loading = true;\n      this.error = '';\n      this.isOpen = true;\n      console.log('Opening transfer modal for employee:', employeeId);\n      // Load employee details\n      this.employeeService.getById(employeeId).pipe(first()).subscribe({\n        next: employee => {\n          this.employee = employee;\n          this.departmentId = Number(employee.departmentId);\n          console.log('Employee loaded:', {\n            id: employee.id,\n            employeeId: employee.employeeId,\n            departmentId: employee.departmentId\n          });\n          // Find current department name\n          const currentDept = this.departments.find(d => d.id === Number(employee.departmentId));\n          this.currentDepartmentName = currentDept ? currentDept.name : 'Unknown';\n          console.log('Current department:', {\n            id: employee.departmentId,\n            name: this.currentDepartmentName,\n            departmentsLoaded: this.departments.length\n          });\n          this.loading = false;\n        },\n        error: error => {\n          this.error = error;\n          this.loading = false;\n        }\n      });\n    }\n    close() {\n      this.isOpen = false;\n    }\n    loadDepartments() {\n      this.departmentService.getAll().pipe(first()).subscribe({\n        next: departments => {\n          this.departments = departments;\n          console.log('Departments loaded:', departments.map(d => ({\n            id: d.id,\n            name: d.name\n          })));\n        },\n        error: error => this.error = error\n      });\n    }\n    transfer() {\n      if (!this.employee || !this.departmentId) {\n        this.error = 'Employee or department not selected';\n        return;\n      }\n      // Ensure departmentId is a number\n      const numericDeptId = Number(this.departmentId);\n      // Check if it's a valid number\n      if (isNaN(numericDeptId)) {\n        this.error = 'Invalid department ID';\n        console.error('Invalid department ID:', this.departmentId);\n        return;\n      }\n      console.log('Transfer request:', {\n        employee: this.employee.id,\n        employeeId: this.employee.employeeId,\n        oldDepartmentId: this.employee.departmentId,\n        newDepartmentId: numericDeptId\n      });\n      // Prevent transferring to the same department\n      if (Number(this.employee.departmentId) === numericDeptId) {\n        this.error = 'Employee is already in this department';\n        return;\n      }\n      // Find the new department name for the message\n      const newDepartment = this.departments.find(d => d.id === numericDeptId);\n      const newDepartmentName = newDepartment ? newDepartment.name : 'Unknown';\n      this.loading = true;\n      this.error = '';\n      this.employeeService.transfer(this.employee.id.toString(), numericDeptId).pipe(first()).subscribe({\n        next: response => {\n          console.log('Transfer successful:', response);\n          // Display the message from the backend\n          this.alertService.success(response.message || 'Employee transferred successfully');\n          this.transferComplete.emit();\n          this.close();\n          this.loading = false;\n        },\n        error: error => {\n          var _a;\n          console.error('Transfer error:', error);\n          this.error = typeof error === 'string' ? error : error.message || ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || 'Error transferring employee';\n          this.loading = false;\n        }\n      });\n    }\n  }\n  TransferModalComponent.ɵfac = function TransferModalComponent_Factory(t) {\n    return new (t || TransferModalComponent)(i0.ɵɵdirectiveInject(i1.EmployeeService), i0.ɵɵdirectiveInject(i1.DepartmentService), i0.ɵɵdirectiveInject(i1.AlertService));\n  };\n  TransferModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TransferModalComponent,\n    selectors: [[\"app-transfer-modal\"]],\n    inputs: {\n      employeeId: \"employeeId\"\n    },\n    outputs: {\n      transferComplete: \"transferComplete\"\n    },\n    decls: 27,\n    vars: 11,\n    consts: [[\"tabindex\", \"-1\", \"role\", \"dialog\", 1, \"modal\", \"fade\", 3, \"ngClass\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"btn-close\", 3, \"click\"], [\"aria-hidden\", \"true\"], [1, \"modal-body\"], [\"class\", \"text-center\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"mb-3\"], [1, \"form-label\"], [\"type\", \"text\", \"readonly\", \"\", 1, \"form-control\", 3, \"value\"], [1, \"form-select\", 3, \"ngModel\", \"ngModelChange\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-warning\", 3, \"disabled\", \"click\"], [\"class\", \"modal-backdrop fade show\", 4, \"ngIf\"], [1, \"text-center\"], [1, \"spinner-border\", \"spinner-border-sm\"], [1, \"alert\", \"alert-danger\"], [3, \"ngValue\"], [1, \"modal-backdrop\", \"fade\", \"show\"]],\n    template: function TransferModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h5\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function TransferModalComponent_Template_button_click_6_listener() {\n          return ctx.close();\n        });\n        i0.ɵɵelementStart(7, \"span\", 6);\n        i0.ɵɵtext(8, \"\\u00D7\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵtemplate(10, TransferModalComponent_div_10_Template, 2, 0, \"div\", 8);\n        i0.ɵɵtemplate(11, TransferModalComponent_div_11_Template, 2, 1, \"div\", 9);\n        i0.ɵɵelementStart(12, \"div\", 10)(13, \"label\", 11);\n        i0.ɵɵtext(14, \"Current Department\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 10)(17, \"label\", 11);\n        i0.ɵɵtext(18, \"New Department\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"select\", 13);\n        i0.ɵɵlistener(\"ngModelChange\", function TransferModalComponent_Template_select_ngModelChange_19_listener($event) {\n          return ctx.departmentId = $event;\n        });\n        i0.ɵɵtemplate(20, TransferModalComponent_option_20_Template, 2, 2, \"option\", 14);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(21, \"div\", 15)(22, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function TransferModalComponent_Template_button_click_22_listener() {\n          return ctx.close();\n        });\n        i0.ɵɵtext(23, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"button\", 17);\n        i0.ɵɵlistener(\"click\", function TransferModalComponent_Template_button_click_24_listener() {\n          return ctx.transfer();\n        });\n        i0.ɵɵtext(25, \"Transfer\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵtemplate(26, TransferModalComponent_div_26_Template, 1, 0, \"div\", 18);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.isOpen));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\"Transfer Employee: \", ctx.employee == null ? null : ctx.employee.employeeId, \"\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"value\", ctx.currentDepartmentName);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.departmentId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.departments);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOpen);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\".btn-close[_ngcontent-%COMP%] {\\n            background: none;\\n            border: none;\\n            font-size: 1.5rem;\\n            font-weight: 700;\\n            line-height: 1;\\n            color: #000;\\n            opacity: 0.5;\\n            padding: 0.25rem 0.5rem;\\n            margin: -0.25rem -0.5rem -0.25rem auto;\\n        }\\n        \\n        .btn-close[_ngcontent-%COMP%]:hover {\\n            color: #000;\\n            opacity: 0.75;\\n        }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZW1wbG95ZWVzL3RyYW5zZmVyLW1vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO1FBQ1E7WUFDSSxnQkFBZ0I7WUFDaEIsWUFBWTtZQUNaLGlCQUFpQjtZQUNqQixnQkFBZ0I7WUFDaEIsY0FBYztZQUNkLFdBQVc7WUFDWCxZQUFZO1lBQ1osdUJBQXVCO1lBQ3ZCLHNDQUFzQztRQUMxQzs7UUFFQTtZQUNJLFdBQVc7WUFDWCxhQUFhO1FBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICAgIC5idG4tY2xvc2Uge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxO1xuICAgICAgICAgICAgY29sb3I6ICMwMDA7XG4gICAgICAgICAgICBvcGFjaXR5OiAwLjU7XG4gICAgICAgICAgICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTtcbiAgICAgICAgICAgIG1hcmdpbjogLTAuMjVyZW0gLTAuNXJlbSAtMC4yNXJlbSBhdXRvO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAuYnRuLWNsb3NlOmhvdmVyIHtcbiAgICAgICAgICAgIGNvbG9yOiAjMDAwO1xuICAgICAgICAgICAgb3BhY2l0eTogMC43NTtcbiAgICAgICAgfVxuICAgICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n  return TransferModalComponent;\n})();","map":{"version":3,"mappings":"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","names":["EventEmitter","first","i0","TransferModalComponent","constructor","employeeService","departmentService","alertService","ngOnInit","loadDepartments","open","employeeId","loading","error","isOpen","console","log","getById","pipe","subscribe","next","employee","departmentId","Number","id","currentDept","departments","find","d","currentDepartmentName","name","departmentsLoaded","length","close","getAll","map","transfer","numericDeptId","isNaN","oldDepartmentId","newDepartmentId","newDepartment","newDepartmentName","toString","response","success","message","transferComplete","emit","selectors","inputs","outputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\employees\\transfer-modal.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { first } from 'rxjs/operators';\r\nimport { EmployeeService, DepartmentService, AlertService } from '@app/_services';\r\n\r\n@Component({\r\n    selector: 'app-transfer-modal',\r\n    template: `\r\n        <div class=\"modal fade\" [ngClass]=\"{ 'show d-block': isOpen }\" tabindex=\"-1\" role=\"dialog\">\r\n            <div class=\"modal-dialog\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\">Transfer Employee: {{employee?.employeeId}}</h5>\r\n                        <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"close()\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n                        <div *ngIf=\"loading\" class=\"text-center\">\r\n                            <span class=\"spinner-border spinner-border-sm\"></span>\r\n                        </div>\r\n                        <div *ngIf=\"error\" class=\"alert alert-danger\">{{error}}</div>\r\n                        <div class=\"mb-3\">\r\n                            <label class=\"form-label\">Current Department</label>\r\n                            <input type=\"text\" class=\"form-control\" [value]=\"currentDepartmentName\" readonly>\r\n                        </div>\r\n                        <div class=\"mb-3\">\r\n                            <label class=\"form-label\">New Department</label>\r\n                            <select class=\"form-select\" [(ngModel)]=\"departmentId\">\r\n                                <option *ngFor=\"let dept of departments\" [ngValue]=\"dept.id\">{{dept.name}}</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\" (click)=\"close()\">Cancel</button>\r\n                        <button type=\"button\" class=\"btn btn-warning\" (click)=\"transfer()\" [disabled]=\"loading\">Transfer</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-backdrop fade show\" *ngIf=\"isOpen\"></div>\r\n    `,\r\n    styles: [`\r\n        .btn-close {\r\n            background: none;\r\n            border: none;\r\n            font-size: 1.5rem;\r\n            font-weight: 700;\r\n            line-height: 1;\r\n            color: #000;\r\n            opacity: 0.5;\r\n            padding: 0.25rem 0.5rem;\r\n            margin: -0.25rem -0.5rem -0.25rem auto;\r\n        }\r\n        \r\n        .btn-close:hover {\r\n            color: #000;\r\n            opacity: 0.75;\r\n        }\r\n    `]\r\n})\r\nexport class TransferModalComponent implements OnInit {\r\n    @Input() employeeId: string;\r\n    @Output() transferComplete = new EventEmitter<void>();\r\n    \r\n    employee: any;\r\n    departments: any[] = [];\r\n    departmentId: number;\r\n    currentDepartmentName: string = '';\r\n    isOpen = false;\r\n    loading = false;\r\n    error = '';\r\n\r\n    constructor(\r\n        private employeeService: EmployeeService,\r\n        private departmentService: DepartmentService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        // Load departments on init\r\n        this.loadDepartments();\r\n    }\r\n\r\n    open(employeeId: string) {\r\n        this.employeeId = employeeId;\r\n        this.loading = true;\r\n        this.error = '';\r\n        this.isOpen = true;\r\n        \r\n        console.log('Opening transfer modal for employee:', employeeId);\r\n        \r\n        // Load employee details\r\n        this.employeeService.getById(employeeId)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: (employee) => {\r\n                    this.employee = employee;\r\n                    this.departmentId = Number(employee.departmentId);\r\n                    \r\n                    console.log('Employee loaded:', {\r\n                        id: employee.id,\r\n                        employeeId: employee.employeeId,\r\n                        departmentId: employee.departmentId\r\n                    });\r\n                    \r\n                    // Find current department name\r\n                    const currentDept = this.departments.find(d => d.id === Number(employee.departmentId));\r\n                    this.currentDepartmentName = currentDept ? currentDept.name : 'Unknown';\r\n                    \r\n                    console.log('Current department:', {\r\n                        id: employee.departmentId,\r\n                        name: this.currentDepartmentName,\r\n                        departmentsLoaded: this.departments.length\r\n                    });\r\n                    \r\n                    this.loading = false;\r\n                },\r\n                error: error => {\r\n                    this.error = error;\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    close() {\r\n        this.isOpen = false;\r\n    }\r\n\r\n    loadDepartments() {\r\n        this.departmentService.getAll()\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: departments => {\r\n                    this.departments = departments;\r\n                    console.log('Departments loaded:', departments.map(d => ({ id: d.id, name: d.name })));\r\n                },\r\n                error: error => this.error = error\r\n            });\r\n    }\r\n\r\n    transfer() {\r\n        if (!this.employee || !this.departmentId) {\r\n            this.error = 'Employee or department not selected';\r\n            return;\r\n        }\r\n        \r\n        // Ensure departmentId is a number\r\n        const numericDeptId = Number(this.departmentId);\r\n        \r\n        // Check if it's a valid number\r\n        if (isNaN(numericDeptId)) {\r\n            this.error = 'Invalid department ID';\r\n            console.error('Invalid department ID:', this.departmentId);\r\n            return;\r\n        }\r\n        \r\n        console.log('Transfer request:', {\r\n            employee: this.employee.id,\r\n            employeeId: this.employee.employeeId,\r\n            oldDepartmentId: this.employee.departmentId,\r\n            newDepartmentId: numericDeptId\r\n        });\r\n        \r\n        // Prevent transferring to the same department\r\n        if (Number(this.employee.departmentId) === numericDeptId) {\r\n            this.error = 'Employee is already in this department';\r\n            return;\r\n        }\r\n        \r\n        // Find the new department name for the message\r\n        const newDepartment = this.departments.find(d => d.id === numericDeptId);\r\n        const newDepartmentName = newDepartment ? newDepartment.name : 'Unknown';\r\n        \r\n        this.loading = true;\r\n        this.error = '';\r\n        \r\n        this.employeeService.transfer(this.employee.id.toString(), numericDeptId)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: (response) => {\r\n                    console.log('Transfer successful:', response);\r\n                    // Display the message from the backend\r\n                    this.alertService.success(response.message || 'Employee transferred successfully');\r\n                    this.transferComplete.emit();\r\n                    this.close();\r\n                    this.loading = false;\r\n                },\r\n                error: error => {\r\n                    console.error('Transfer error:', error);\r\n                    this.error = typeof error === 'string' ? error : \r\n                               error.message || error.error?.message || 'Error transferring employee';\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}