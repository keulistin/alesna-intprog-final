{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services/account.service\";\nimport * as i4 from \"@app/_services/alert.service\";\nimport * as i5 from \"@angular/common\";\nfunction AddEditEmployeeComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction AddEditEmployeeComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1, \" No users available. Please create users first. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditEmployeeComponent_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", user_r4.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", user_r4.email || \"Unknown Email\", \" (\", user_r4.role === \"Admin\" ? \"Admin User\" : \"Normal User\", \") \");\n  }\n}\nfunction AddEditEmployeeComponent_option_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const dept_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", dept_r5.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(dept_r5.name);\n  }\n}\nexport let AddEditEmployeeComponent = /*#__PURE__*/(() => {\n  class AddEditEmployeeComponent {\n    constructor(formBuilder, route, router, accountService, alertService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.accountService = accountService;\n      this.alertService = alertService;\n      this.employee = {\n        employeeId: '',\n        userId: null,\n        position: '',\n        departmentId: null,\n        hireDate: null,\n        status: 'Active'\n      };\n      this.users = [];\n      this.departments = [];\n      this.errorMessage = '';\n      this.loading = false;\n      this.submitted = false;\n    }\n    ngOnInit() {\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      // Initialize the form with validation\n      this.form = this.formBuilder.group({\n        employeeId: ['', Validators.required],\n        userId: [null, Validators.required],\n        position: ['', Validators.required],\n        departmentId: [null, Validators.required],\n        hireDate: [null, Validators.required],\n        status: ['Active', Validators.required]\n      });\n      // Load users and departments\n      this.loadUsers();\n      this.loadDepartments();\n      if (this.isAddMode) {\n        // Fetch and pre-fill the next employeeId\n        this.accountService.getNextEmployeeId().pipe(first()).subscribe({\n          next: res => {\n            this.form.patchValue({\n              employeeId: res.employeeId\n            });\n          },\n          error: error => {\n            this.errorMessage = 'Failed to fetch next Employee ID';\n          }\n        });\n      } else {\n        this.loadEmployee();\n      }\n    }\n    // Convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    loadUsers() {\n      this.accountService.getAllUsers().pipe(first()).subscribe({\n        next: users => {\n          console.log('Loaded users:', users);\n          if (Array.isArray(users)) {\n            this.users = users;\n          } else {\n            console.error('Expected users to be an array but got:', typeof users);\n            this.errorMessage = 'Error loading users data';\n            this.users = [];\n          }\n        },\n        error: error => {\n          console.error('Error loading users:', error);\n          this.errorMessage = 'Error loading users data';\n        }\n      });\n    }\n    loadDepartments() {\n      this.accountService.getAllDepartments().pipe(first()).subscribe(departments => this.departments = departments);\n    }\n    loadEmployee() {\n      this.loading = true;\n      this.accountService.getEmployeeById(this.id).pipe(first()).subscribe({\n        next: employee => {\n          this.form.patchValue(employee);\n          this.loading = false;\n        },\n        error: error => {\n          this.errorMessage = error;\n          this.loading = false;\n        }\n      });\n    }\n    save() {\n      this.submitted = true;\n      this.alertService.clear();\n      // Stop here if form is invalid\n      if (this.form.invalid) {\n        return;\n      }\n      if (this.loading) {\n        return;\n      }\n      this.loading = true;\n      if (this.isAddMode) {\n        this.createEmployee();\n      } else {\n        this.updateEmployee();\n      }\n    }\n    createEmployee() {\n      this.accountService.createEmployee(this.form.value).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Employee created successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../'], {\n            relativeTo: this.route\n          });\n        },\n        error: error => {\n          this.errorMessage = error;\n          this.loading = false;\n        }\n      });\n    }\n    updateEmployee() {\n      this.accountService.updateEmployee(this.id, this.form.value).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Employee updated successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../../'], {\n            relativeTo: this.route\n          });\n        },\n        error: error => {\n          this.errorMessage = error;\n          this.loading = false;\n        }\n      });\n    }\n    cancel() {\n      if (this.isAddMode) {\n        this.router.navigate(['../'], {\n          relativeTo: this.route\n        });\n      } else {\n        this.router.navigate(['../../'], {\n          relativeTo: this.route\n        });\n      }\n    }\n  }\n  AddEditEmployeeComponent.ɵfac = function AddEditEmployeeComponent_Factory(t) {\n    return new (t || AddEditEmployeeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i4.AlertService));\n  };\n  AddEditEmployeeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditEmployeeComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 43,\n    vars: 13,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"mb-3\"], [1, \"form-label\"], [\"type\", \"text\", 1, \"form-control\", 3, \"ngModel\", \"readonly\", \"ngModelChange\"], [\"class\", \"alert alert-warning\", 4, \"ngIf\"], [1, \"form-select\", 3, \"ngModel\", \"disabled\", \"ngModelChange\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"form-select\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"date\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"text-center\"], [1, \"btn\", \"btn-primary\", \"me-2\", 3, \"click\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"alert\", \"alert-danger\"], [1, \"alert\", \"alert-warning\"], [3, \"value\"]],\n    template: function AddEditEmployeeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtemplate(4, AddEditEmployeeComponent_div_4_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n        i0.ɵɵtext(7, \"Employee ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function AddEditEmployeeComponent_Template_input_ngModelChange_8_listener($event) {\n          return ctx.employee.employeeId = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 4)(10, \"label\", 5);\n        i0.ɵɵtext(11, \"User\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(12, AddEditEmployeeComponent_div_12_Template, 2, 0, \"div\", 7);\n        i0.ɵɵelementStart(13, \"select\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function AddEditEmployeeComponent_Template_select_ngModelChange_13_listener($event) {\n          return ctx.employee.userId = $event;\n        });\n        i0.ɵɵelementStart(14, \"option\", 9);\n        i0.ɵɵtext(15, \"-- Select User --\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, AddEditEmployeeComponent_option_16_Template, 2, 3, \"option\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"div\", 4)(18, \"label\", 5);\n        i0.ɵɵtext(19, \"Position\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"input\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function AddEditEmployeeComponent_Template_input_ngModelChange_20_listener($event) {\n          return ctx.employee.position = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 4)(22, \"label\", 5);\n        i0.ɵɵtext(23, \"Department\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"select\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function AddEditEmployeeComponent_Template_select_ngModelChange_24_listener($event) {\n          return ctx.employee.departmentId = $event;\n        });\n        i0.ɵɵtemplate(25, AddEditEmployeeComponent_option_25_Template, 2, 2, \"option\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"div\", 4)(27, \"label\", 5);\n        i0.ɵɵtext(28, \"Hire Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"input\", 13);\n        i0.ɵɵlistener(\"ngModelChange\", function AddEditEmployeeComponent_Template_input_ngModelChange_29_listener($event) {\n          return ctx.employee.hireDate = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(30, \"div\", 4)(31, \"label\", 5);\n        i0.ɵɵtext(32, \"Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"select\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function AddEditEmployeeComponent_Template_select_ngModelChange_33_listener($event) {\n          return ctx.employee.status = $event;\n        });\n        i0.ɵɵelementStart(34, \"option\");\n        i0.ɵɵtext(35, \"Active\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"option\");\n        i0.ɵɵtext(37, \"Inactive\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(38, \"div\", 14)(39, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function AddEditEmployeeComponent_Template_button_click_39_listener() {\n          return ctx.save();\n        });\n        i0.ɵɵtext(40, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function AddEditEmployeeComponent_Template_button_click_41_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵtext(42, \"Cancel\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.id ? \"Edit\" : \"Add\", \" Employee\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.employee.employeeId)(\"readonly\", !ctx.isAddMode);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.users.length === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.employee.userId)(\"disabled\", ctx.users.length === 0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.users);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.employee.position);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.employee.departmentId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.departments);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.employee.hireDate);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.employee.status);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgModel],\n    encapsulation: 2\n  });\n  return AddEditEmployeeComponent;\n})();","map":{"version":3,"mappings":"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","names":["first","Validators","i0","AddEditEmployeeComponent","constructor","formBuilder","route","router","accountService","alertService","employeeId","userId","position","departmentId","hireDate","status","ngOnInit","id","snapshot","params","isAddMode","form","group","required","loadUsers","loadDepartments","getNextEmployeeId","pipe","subscribe","next","res","patchValue","error","errorMessage","loadEmployee","f","controls","getAllUsers","users","console","log","Array","isArray","getAllDepartments","departments","loading","getEmployeeById","employee","save","submitted","clear","invalid","createEmployee","updateEmployee","value","success","keepAfterRouteChange","navigate","relativeTo","cancel","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\employees\\add-edit.component.ts","C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\employees\\add-edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { first } from 'rxjs/operators';\nimport { AccountService } from '@app/_services/account.service';\nimport { AlertService } from '@app/_services/alert.service';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\n\n@Component({\n    templateUrl: 'add-edit.component.html'\n})\nexport class AddEditEmployeeComponent implements OnInit {\n    form!: FormGroup;\n    employee: any = {\n        employeeId: '',\n        userId: null,\n        position: '',\n        departmentId: null,\n        hireDate: null,\n        status: 'Active'\n    };\n    users: any[] = [];\n    departments: any[] = [];\n    id: string;\n    isAddMode: boolean;\n    errorMessage: string = '';\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        this.id = this.route.snapshot.params['id'];\n        this.isAddMode = !this.id;\n\n        // Initialize the form with validation\n        this.form = this.formBuilder.group({\n            employeeId: ['', Validators.required],\n            userId: [null, Validators.required],\n            position: ['', Validators.required],\n            departmentId: [null, Validators.required],\n            hireDate: [null, Validators.required],\n            status: ['Active', Validators.required]\n        });\n\n        // Load users and departments\n        this.loadUsers();\n        this.loadDepartments();\n\n        if (this.isAddMode) {\n            // Fetch and pre-fill the next employeeId\n            this.accountService.getNextEmployeeId()\n                .pipe(first())\n                .subscribe({\n                    next: (res) => {\n                        this.form.patchValue({ employeeId: res.employeeId });\n                    },\n                    error: (error) => {\n                        this.errorMessage = 'Failed to fetch next Employee ID';\n                    }\n                });\n        } else {\n            this.loadEmployee();\n        }\n    }\n\n    // Convenience getter for easy access to form fields\n    get f(): { [key: string]: AbstractControl } { return this.form.controls; }\n\n    loadUsers() {\n        this.accountService.getAllUsers()\n            .pipe(first())\n            .subscribe({\n                next: (users) => {\n                    console.log('Loaded users:', users);\n                    if (Array.isArray(users)) {\n                        this.users = users;\n                    } else {\n                        console.error('Expected users to be an array but got:', typeof users);\n                        this.errorMessage = 'Error loading users data';\n                        this.users = [];\n                    }\n                },\n                error: (error) => {\n                    console.error('Error loading users:', error);\n                    this.errorMessage = 'Error loading users data';\n                }\n            });\n    }\n\n    loadDepartments() {\n        this.accountService.getAllDepartments()\n            .pipe(first())\n            .subscribe(departments => this.departments = departments);\n    }\n\n    loadEmployee() {\n        this.loading = true;\n        this.accountService.getEmployeeById(this.id)\n            .pipe(first())\n            .subscribe({\n                next: (employee) => {\n                    this.form.patchValue(employee);\n                    this.loading = false;\n                },\n                error: (error) => {\n                    this.errorMessage = error;\n                    this.loading = false;\n                }\n            });\n    }\n\n    save() {\n        this.submitted = true;\n        this.alertService.clear();\n\n        // Stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        if (this.loading) {\n            return;\n        }\n\n        this.loading = true;\n        if (this.isAddMode) {\n            this.createEmployee();\n        } else {\n            this.updateEmployee();\n        }\n    }\n\n    private createEmployee() {\n        this.accountService.createEmployee(this.form.value)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.alertService.success('Employee created successfully', { keepAfterRouteChange: true });\n                    this.router.navigate(['../'], { relativeTo: this.route });\n                },\n                error: (error) => {\n                    this.errorMessage = error;\n                    this.loading = false;\n                }\n            });\n    }\n\n    private updateEmployee() {\n        this.accountService.updateEmployee(this.id, this.form.value)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.alertService.success('Employee updated successfully', { keepAfterRouteChange: true });\n                    this.router.navigate(['../../'], { relativeTo: this.route });\n                },\n                error: (error) => {\n                    this.errorMessage = error;\n                    this.loading = false;\n                }\n            });\n    }\n\n    cancel() {\n        if (this.isAddMode) {\n            this.router.navigate(['../'], { relativeTo: this.route });\n        } else {\n            this.router.navigate(['../../'], { relativeTo: this.route });\n        }\n    }\n}","<div class=\"card\">\r\n    <div class=\"card-header\">{{id ? 'Edit' : 'Add'}} Employee</div>\r\n    <!--<div class=\"card-header\">{{(id ? 'Edit' : 'Add')}} Employee</div>-->\r\n    <div class=\"card-body\">\r\n        <div class=\"alert alert-danger\" *ngIf=\"errorMessage\">{{errorMessage}}</div>\r\n\r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Employee ID</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"employee.employeeId\" [readonly]=\"!isAddMode\">\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">User</label>\r\n            <div *ngIf=\"users.length === 0\" class=\"alert alert-warning\">\r\n                No users available. Please create users first.\r\n            </div>\r\n            <select class=\"form-select\" [(ngModel)]=\"employee.userId\" [disabled]=\"users.length === 0\">\r\n                <option value=\"\">-- Select User --</option>\r\n                <option *ngFor=\"let user of users\" [value]=\"user.id\">\r\n                    {{user.email || 'Unknown Email'}} ({{user.role === 'Admin' ? 'Admin User' : 'Normal User'}})\r\n                </option>\r\n            </select>\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Position</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"employee.position\">\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Department</label>\r\n            <select class=\"form-select\" [(ngModel)]=\"employee.departmentId\">\r\n                <option *ngFor=\"let dept of departments\" [value]=\"dept.id\">{{dept.name}}</option>\r\n            </select>\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Hire Date</label>\r\n            <input type=\"date\" class=\"form-control\" [(ngModel)]=\"employee.hireDate\">\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Status</label>\r\n            <select class=\"form-select\" [(ngModel)]=\"employee.status\">\r\n                <option>Active</option>\r\n                <option>Inactive</option>\r\n            </select>\r\n        </div>\r\n\r\n        <div class=\"text-center\">\r\n            <button class=\"btn btn-primary me-2\" (click)=\"save()\">Save</button>\r\n            <button class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\r\n        </div>\r\n    </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}