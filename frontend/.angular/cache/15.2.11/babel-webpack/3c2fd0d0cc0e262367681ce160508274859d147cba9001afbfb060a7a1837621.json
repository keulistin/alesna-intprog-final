{"ast":null,"code":"import { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let WorkflowService = /*#__PURE__*/(() => {\n  class WorkflowService {\n    constructor(http) {\n      this.http = http;\n    }\n    getAll() {\n      return this.http.get(`${environment.apiUrl}/workflows`);\n    }\n    getById(id) {\n      return this.http.get(`${environment.apiUrl}/workflows/${id}`);\n    }\n    getByEmployeeId(employeeId) {\n      return this.http.get(`${environment.apiUrl}/workflows/employee/${employeeId}`);\n    }\n    getByRequestId(requestId) {\n      return this.http.get(`${environment.apiUrl}/workflows/request/${requestId}`);\n    }\n    create(workflow) {\n      return this.http.post(`${environment.apiUrl}/workflows`, workflow);\n    }\n    update(id, params) {\n      return this.http.put(`${environment.apiUrl}/workflows/${id}`, params);\n    }\n    changeStatus(id, status, comments = '') {\n      return this.http.put(`${environment.apiUrl}/workflows/${id}/status`, {\n        status,\n        comments\n      });\n    }\n    // New method to update both workflow and request status\n    updateWorkflowAndRequestStatus(workflowId, status, requestId) {\n      // First update the workflow\n      return this.http.put(`${environment.apiUrl}/workflows/${workflowId}`, {\n        status,\n        updateRequest: true,\n        requestId // Include requestId if provided\n      });\n    }\n\n    delete(id) {\n      return this.http.delete(`${environment.apiUrl}/workflows/${id}`);\n    }\n    deleteItem(itemId) {\n      return this.http.delete(`${environment.apiUrl}/workflows/items/${itemId}`);\n    }\n  }\n  WorkflowService.ɵfac = function WorkflowService_Factory(t) {\n    return new (t || WorkflowService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  WorkflowService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WorkflowService,\n    factory: WorkflowService.ɵfac,\n    providedIn: 'root'\n  });\n  return WorkflowService;\n})();","map":{"version":3,"mappings":"AAIA,SAASA,WAAW,QAAQ,2BAA2B;;;AAIvD,WAAaC,eAAe;EAAtB,MAAOA,eAAe;IACxBC,YAAoBC,IAAgB;MAAhB,SAAI,GAAJA,IAAI;IAAgB;IAExCC,MAAM;MACF,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAa,GAAGL,WAAW,CAACM,MAAM,YAAY,CAAC;IACvE;IAEAC,OAAO,CAACC,EAAU;MACd,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAW,GAAGL,WAAW,CAACM,MAAM,cAAcE,EAAE,EAAE,CAAC;IAC3E;IAEAC,eAAe,CAACC,UAAkB;MAC9B,OAAO,IAAI,CAACP,IAAI,CAACE,GAAG,CAAa,GAAGL,WAAW,CAACM,MAAM,uBAAuBI,UAAU,EAAE,CAAC;IAC9F;IAEAC,cAAc,CAACC,SAAiB;MAC5B,OAAO,IAAI,CAACT,IAAI,CAACE,GAAG,CAAa,GAAGL,WAAW,CAACM,MAAM,sBAAsBM,SAAS,EAAE,CAAC;IAC5F;IAEAC,MAAM,CAACC,QAAa;MAChB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAW,GAAGf,WAAW,CAACM,MAAM,YAAY,EAAEQ,QAAQ,CAAC;IAChF;IAEAE,MAAM,CAACR,EAAU,EAAES,MAAW;MAC1B,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAW,GAAGlB,WAAW,CAACM,MAAM,cAAcE,EAAE,EAAE,EAAES,MAAM,CAAC;IACnF;IAEAE,YAAY,CAACX,EAAU,EAAEY,MAAc,EAAEC,WAAmB,EAAE;MAC1D,OAAO,IAAI,CAAClB,IAAI,CAACe,GAAG,CAAW,GAAGlB,WAAW,CAACM,MAAM,cAAcE,EAAE,SAAS,EAAE;QAAEY,MAAM;QAAEC;MAAQ,CAAE,CAAC;IACxG;IAEA;IACAC,8BAA8B,CAACC,UAAkB,EAAEH,MAAc,EAAER,SAAkB;MACjF;MACA,OAAO,IAAI,CAACT,IAAI,CAACe,GAAG,CAAW,GAAGlB,WAAW,CAACM,MAAM,cAAciB,UAAU,EAAE,EAAE;QAC5EH,MAAM;QACNI,aAAa,EAAE,IAAI;QACnBZ,SAAS,CAAC;OACb,CAAC;IACN;;IAEAa,MAAM,CAACjB,EAAU;MACb,OAAO,IAAI,CAACL,IAAI,CAACsB,MAAM,CAAC,GAAGzB,WAAW,CAACM,MAAM,cAAcE,EAAE,EAAE,CAAC;IACpE;IAEAkB,UAAU,CAACC,MAAc;MACrB,OAAO,IAAI,CAACxB,IAAI,CAACsB,MAAM,CAAC,GAAGzB,WAAW,CAACM,MAAM,oBAAoBqB,MAAM,EAAE,CAAC;IAC9E;;;qBA/CS1B,eAAe;EAAA;;WAAfA,eAAe;IAAA2B,SAAf3B,eAAe;IAAA4B,YADF;EAAM;EAAA,OACnB5B,eAAe;AAAA","names":["environment","WorkflowService","constructor","http","getAll","get","apiUrl","getById","id","getByEmployeeId","employeeId","getByRequestId","requestId","create","workflow","post","update","params","put","changeStatus","status","comments","updateWorkflowAndRequestStatus","workflowId","updateRequest","delete","deleteItem","itemId","factory","providedIn"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\_services\\workflow.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of, switchMap, tap } from 'rxjs';\r\n\r\nimport { environment } from '@environments/environment';\r\nimport { Workflow } from '@app/_models/workflow';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class WorkflowService {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getAll() {\r\n        return this.http.get<Workflow[]>(`${environment.apiUrl}/workflows`);\r\n    }\r\n\r\n    getById(id: string) {\r\n        return this.http.get<Workflow>(`${environment.apiUrl}/workflows/${id}`);\r\n    }\r\n\r\n    getByEmployeeId(employeeId: string) {\r\n        return this.http.get<Workflow[]>(`${environment.apiUrl}/workflows/employee/${employeeId}`);\r\n    }\r\n\r\n    getByRequestId(requestId: string) {\r\n        return this.http.get<Workflow[]>(`${environment.apiUrl}/workflows/request/${requestId}`);\r\n    }\r\n\r\n    create(workflow: any) {\r\n        return this.http.post<Workflow>(`${environment.apiUrl}/workflows`, workflow);\r\n    }\r\n\r\n    update(id: string, params: any) {\r\n        return this.http.put<Workflow>(`${environment.apiUrl}/workflows/${id}`, params);\r\n    }\r\n\r\n    changeStatus(id: string, status: string, comments: string = '') {\r\n        return this.http.put<Workflow>(`${environment.apiUrl}/workflows/${id}/status`, { status, comments });\r\n    }\r\n\r\n    // New method to update both workflow and request status\r\n    updateWorkflowAndRequestStatus(workflowId: string, status: string, requestId?: number) {\r\n        // First update the workflow\r\n        return this.http.put<Workflow>(`${environment.apiUrl}/workflows/${workflowId}`, { \r\n            status,\r\n            updateRequest: true, // Signal to backend to update request too\r\n            requestId // Include requestId if provided\r\n        });\r\n    }\r\n\r\n    delete(id: string) {\r\n        return this.http.delete(`${environment.apiUrl}/workflows/${id}`);\r\n    }\r\n\r\n    deleteItem(itemId: string) {\r\n        return this.http.delete(`${environment.apiUrl}/workflows/items/${itemId}`);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}