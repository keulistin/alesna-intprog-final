{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      // Add to AccountService\n      this.departmentsUrl = `${environment.apiUrl}/departments`;\n      // Add to AccountService\n      this.employeesUrl = `${environment.apiUrl}/employees`;\n      this.requestsUrl = `${environment.apiUrl}/requests`;\n      this.workflowsUrl = `${environment.apiUrl}/workflows`;\n      this.accountSubject = new BehaviorSubject(null);\n      this.account = this.accountSubject.asObservable();\n    }\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n    login(email, password) {\n      return this.http.post(`${baseUrl}/authenticate`, {\n        email,\n        password\n      }, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.accountSubject.next(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n    logout() {\n      this.http.post(`${baseUrl}/revoke-token`, {}, {\n        withCredentials: true\n      }).subscribe();\n      this.stopRefreshTokenTimer();\n      this.accountSubject.next(null);\n      this.router.navigate(['/account/login']);\n    }\n    refreshToken() {\n      return this.http.post(`${baseUrl}/refresh-token`, {}, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.accountSubject.next(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n    register(account) {\n      return this.http.post(`${baseUrl}/register`, account);\n    }\n    verifyEmail(token) {\n      return this.http.post(`${baseUrl}/verify-email`, {\n        token\n      });\n    }\n    forgotPassword(email) {\n      return this.http.post(`${baseUrl}/forgot-password`, {\n        email\n      });\n    }\n    validateResetToken(token) {\n      return this.http.post(`${baseUrl}/validate-reset-token`, {\n        token\n      });\n    }\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(`${baseUrl}/reset-password`, {\n        token,\n        password,\n        confirmPassword\n      });\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    getDepartmentById(id) {\n      return this.http.get(`${this.departmentsUrl}/${id}`);\n    }\n    createDepartment(params) {\n      return this.http.post(this.departmentsUrl, params);\n    }\n    updateDepartment(id, params) {\n      return this.http.put(`${this.departmentsUrl}/${id}`, params);\n    }\n    getAllDepartments() {\n      return this.http.get(this.departmentsUrl);\n    }\n    deleteDepartment(id) {\n      return this.http.delete(`${this.departmentsUrl}/${id}`);\n    }\n    getAllUsers() {\n      return this.http.get(`${baseUrl}`).pipe(map(accounts => {\n        console.log('Fetched accounts:', accounts);\n        return accounts.map(account => ({\n          id: account.id,\n          email: account.email,\n          role: account.role,\n          fullName: `${account.firstName || ''} ${account.lastName || ''}`.trim()\n        }));\n      }));\n    }\n    getEmployeeById(id) {\n      return this.http.get(`${this.employeesUrl}/${id}`);\n    }\n    createEmployee(params) {\n      return this.http.post(this.employeesUrl, params);\n    }\n    updateEmployee(id, params) {\n      return this.http.put(`${this.employeesUrl}/${id}`, params);\n    }\n    deleteEmployee(id) {\n      return this.http.delete(`${this.employeesUrl}/${id}`);\n    }\n    getRequestById(id) {\n      return this.http.get(`${this.requestsUrl}/${id}`);\n    }\n    createRequest(params) {\n      return this.http.post(this.requestsUrl, params);\n    }\n    updateRequest(id, params) {\n      return this.http.put(`${this.requestsUrl}/${id}`, params);\n    }\n    getAllRequests() {\n      return this.http.get(this.requestsUrl);\n    }\n    deleteRequest(id) {\n      return this.http.delete(`${this.requestsUrl}/${id}`);\n    }\n    getEmployeeWorkflows(employeeId) {\n      return this.http.get(`${this.workflowsUrl}/employee/${employeeId}`);\n    }\n    updateWorkflowStatus(workflowId, params) {\n      return this.http.put(`${this.workflowsUrl}/${workflowId}/status`, params);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n        var _a;\n        // update the current account if it was updated\n        if (account.id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          // publish updated account to subscribers\n          const updatedAccount = Object.assign(Object.assign({}, this.accountValue), account);\n          this.accountSubject.next(updatedAccount);\n        }\n        return account;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(map(x => {\n        var _a;\n        // auto logout if the logged in account deleted their own record\n        if (id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          this.logout();\n        }\n        return x;\n      }));\n    }\n    getAccountByUserId(userId) {\n      if (userId === undefined || userId === null) {\n        return undefined;\n      }\n      // In the context of the FakeBackend, all \"accounts\" are stored in localStorage\n      // under the key used by the FakeBackendInterceptor.\n      const accountsKey = 'accounts'; // Define the key used in localStorage\n      const allAccountsFromStorage = JSON.parse(localStorage.getItem(accountsKey) || '[]');\n      // The 'userId' in your Employee model is meant to link to the 'id' of an Account.\n      return allAccountsFromStorage.find(acc => Number(acc.id) === Number(userId));\n    }\n    startRefreshTokenTimer() {\n      // parse json object from base64 encoded jwt token\n      const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\n      // set a timeout to refresh the token a minute before it expires\n      const expires = new Date(jwtToken.exp * 1000);\n      const timeout = expires.getTime() - Date.now() - 60 * 1000;\n      this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n    stopRefreshTokenTimer() {\n      clearTimeout(this.refreshTokenTimeout);\n    }\n    getNextEmployeeId() {\n      return this.http.get(`${this.employeesUrl}/nextId`);\n    }\n  }\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","environment","baseUrl","apiUrl","AccountService","constructor","router","http","accountSubject","account","asObservable","accountValue","value","login","email","password","post","withCredentials","pipe","next","startRefreshTokenTimer","logout","subscribe","stopRefreshTokenTimer","navigate","refreshToken","register","verifyEmail","token","forgotPassword","validateResetToken","resetPassword","confirmPassword","getAll","get","getById","id","create","params","getDepartmentById","departmentsUrl","createDepartment","updateDepartment","put","getAllDepartments","deleteDepartment","delete","getAllUsers","accounts","console","log","role","fullName","firstName","lastName","trim","getEmployeeById","employeesUrl","createEmployee","updateEmployee","deleteEmployee","getRequestById","requestsUrl","createRequest","updateRequest","getAllRequests","deleteRequest","getEmployeeWorkflows","employeeId","workflowsUrl","updateWorkflowStatus","workflowId","update","updatedAccount","x","getAccountByUserId","userId","undefined","accountsKey","allAccountsFromStorage","JSON","parse","localStorage","getItem","find","acc","Number","jwtToken","atob","split","expires","Date","exp","timeout","getTime","now","refreshTokenTimeout","setTimeout","clearTimeout","getNextEmployeeId","factory","providedIn"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\_services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, finalize } from 'rxjs/operators';\r\nimport { environment } from '@environments/environment';\r\nimport { Account } from '@app/_models';\r\n\r\nconst baseUrl = `${environment.apiUrl}/accounts`;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AccountService {\r\n    private accountSubject: BehaviorSubject<Account>;\r\n    public account: Observable<Account>;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private http: HttpClient\r\n    ) {\r\n        this.accountSubject = new BehaviorSubject<Account>(null);\r\n        this.account = this.accountSubject.asObservable();\r\n    }\r\n\r\n    public get accountValue(): Account {\r\n        return this.accountSubject.value;\r\n    }\r\n\r\n    login(email: string, password: string) {\r\n        return this.http.post<any>(`${baseUrl}/authenticate`, { email, password }, { withCredentials: true })\r\n            .pipe(map(account => {\r\n                this.accountSubject.next(account);\r\n                this.startRefreshTokenTimer();\r\n                return account;\r\n            }));\r\n    }\r\n\r\n    logout() {\r\n        this.http.post<any>(`${baseUrl}/revoke-token`, {}, { withCredentials: true }).subscribe();\r\n        this.stopRefreshTokenTimer();\r\n        this.accountSubject.next(null);\r\n        this.router.navigate(['/account/login']);\r\n    }\r\n\r\n    refreshToken() {\r\n        return this.http.post<any>(`${baseUrl}/refresh-token`, {}, { withCredentials: true })\r\n            .pipe(map((account) => {\r\n                this.accountSubject.next(account);\r\n                this.startRefreshTokenTimer();\r\n                return account;\r\n            }));\r\n    }\r\n\r\n    register(account: Account) {\r\n        return this.http.post(`${baseUrl}/register`, account);\r\n    }\r\n\r\n    verifyEmail(token: string) {\r\n        return this.http.post(`${baseUrl}/verify-email`, { token });\r\n    }\r\n\r\n    forgotPassword(email: string) {\r\n        return this.http.post(`${baseUrl}/forgot-password`, { email });\r\n    }\r\n\r\n    validateResetToken(token: string) {\r\n        return this.http.post(`${baseUrl}/validate-reset-token`, { token });\r\n    }\r\n\r\n    resetPassword(token: string, password: string, confirmPassword: string) {\r\n        return this.http.post(`${baseUrl}/reset-password`, { token, password, confirmPassword });\r\n    }\r\n\r\n    getAll(): Observable<Account[]> {\r\n        return this.http.get<Account[]>(baseUrl);\r\n    }\r\n\r\n    getById(id: string): Observable<Account> {\r\n        return this.http.get<Account>(`${baseUrl}/${id}`);\r\n    }\r\n\r\n    create(params: any): Observable<any> {\r\n        return this.http.post(baseUrl, params);\r\n    }\r\n\r\n    // Add to AccountService\r\n    private departmentsUrl = `${environment.apiUrl}/departments`;\r\n\r\n    getDepartmentById(id: string): Observable<any> {\r\n        return this.http.get(`${this.departmentsUrl}/${id}`);\r\n    }\r\n\r\n    createDepartment(params: any): Observable<any> {\r\n        return this.http.post(this.departmentsUrl, params);\r\n    }\r\n\r\n    updateDepartment(id: string, params: any): Observable<any> {\r\n        return this.http.put(`${this.departmentsUrl}/${id}`, params);\r\n    }\r\n    getAllDepartments(): Observable<any[]> {\r\n        return this.http.get<any[]>(this.departmentsUrl);\r\n    }\r\n\r\n    deleteDepartment(id: string): Observable<any> {\r\n        return this.http.delete(`${this.departmentsUrl}/${id}`);\r\n    }\r\n\r\n    // Add to AccountService\r\n    private employeesUrl = `${environment.apiUrl}/employees`;\r\n\r\n    getAllUsers(): Observable<any[]> {\r\n        return this.http.get<any[]>(`${baseUrl}`).pipe(\r\n            map(accounts => {\r\n                console.log('Fetched accounts:', accounts);\r\n                return accounts.map(account => ({\r\n                    id: account.id,\r\n                    email: account.email,\r\n                    role: account.role,\r\n                    fullName: `${account.firstName || ''} ${account.lastName || ''}`.trim()\r\n                }));\r\n            })\r\n        );\r\n    }\r\n\r\n    getEmployeeById(id: string): Observable<any> {\r\n        return this.http.get(`${this.employeesUrl}/${id}`);\r\n    }\r\n\r\n    createEmployee(params: any): Observable<any> {\r\n        return this.http.post(this.employeesUrl, params);\r\n    }\r\n\r\n    updateEmployee(id: string, params: any): Observable<any> {\r\n        return this.http.put(`${this.employeesUrl}/${id}`, params);\r\n    }\r\n    deleteEmployee(id: string): Observable<any> {\r\n        return this.http.delete(`${this.employeesUrl}/${id}`);\r\n    }\r\n\r\n    private requestsUrl = `${environment.apiUrl}/requests`;\r\n\r\n    getRequestById(id: string): Observable<any> {\r\n        return this.http.get(`${this.requestsUrl}/${id}`);\r\n    }\r\n\r\n    createRequest(params: any): Observable<any> {\r\n        return this.http.post(this.requestsUrl, params);\r\n    }\r\n\r\n    updateRequest(id: string, params: any): Observable<any> {\r\n        return this.http.put(`${this.requestsUrl}/${id}`, params);\r\n    }\r\n\r\n    getAllRequests(): Observable<any[]> {\r\n        return this.http.get<any[]>(this.requestsUrl);\r\n    }\r\n\r\n    deleteRequest(id: string): Observable<any> {\r\n        return this.http.delete(`${this.requestsUrl}/${id}`);\r\n    }\r\n    private workflowsUrl = `${environment.apiUrl}/workflows`;\r\n\r\n    getEmployeeWorkflows(employeeId: string): Observable<any[]> {\r\n        return this.http.get<any[]>(`${this.workflowsUrl}/employee/${employeeId}`);\r\n    }\r\n\r\n    updateWorkflowStatus(workflowId: string, params: any): Observable<any> {\r\n        return this.http.put(`${this.workflowsUrl}/${workflowId}/status`, params);\r\n    }\r\n    update(id: string, params: any): Observable<Account> {\r\n        return this.http.put(`${baseUrl}/${id}`, params)\r\n            .pipe(map((account: Account) => {\r\n                // update the current account if it was updated\r\n                if (account.id === this.accountValue?.id) {\r\n                    // publish updated account to subscribers\r\n                    const updatedAccount = { ...this.accountValue, ...account };\r\n                    this.accountSubject.next(updatedAccount);\r\n                }\r\n                return account;\r\n            }));\r\n    }\r\n\r\n    delete(id: string) {\r\n        return this.http.delete(`${baseUrl}/${id}`)\r\n            .pipe(map(x => {\r\n                // auto logout if the logged in account deleted their own record\r\n                if (id === this.accountValue?.id) {\r\n                    this.logout();\r\n                }\r\n                return x;\r\n            }));\r\n    }\r\n\r\n    public getAccountByUserId(userId: number | undefined): Account | undefined {\r\n        if (userId === undefined || userId === null) {\r\n            return undefined;\r\n        }\r\n        // In the context of the FakeBackend, all \"accounts\" are stored in localStorage\r\n        // under the key used by the FakeBackendInterceptor.\r\n        const accountsKey = 'accounts'; // Define the key used in localStorage\r\n        const allAccountsFromStorage = JSON.parse(localStorage.getItem(accountsKey) || '[]') as Account[];\r\n        // The 'userId' in your Employee model is meant to link to the 'id' of an Account.\r\n        return allAccountsFromStorage.find(acc => Number(acc.id) === Number(userId));\r\n    }\r\n\r\n\r\n    // helper methods\r\n    private refreshTokenTimeout: any;\r\n\r\n    private startRefreshTokenTimer() {\r\n        // parse json object from base64 encoded jwt token\r\n        const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\r\n\r\n        // set a timeout to refresh the token a minute before it expires\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n\r\n    getNextEmployeeId(): Observable<{ employeeId: string }> {\r\n        return this.http.get<{ employeeId: string }>(`${this.employeesUrl}/nextId`);\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}