{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.employeeSubject = new BehaviorSubject(null);\n      this.employee = this.employeeSubject.asObservable();\n    }\n    get employeeValue() {\n      return this.employeeSubject.value;\n    }\n    getAll() {\n      return this.http.get(`${environment.apiUrl}/employees`).pipe(map(employees => {\n        return employees.map(employee => this.mapDepartmentName(employee));\n      }));\n    }\n    getById(id) {\n      return this.http.get(`${environment.apiUrl}/employees/${id}`).pipe(map(employee => this.mapDepartmentName(employee)));\n    }\n    getByAccountId(accountId) {\n      return this.http.get(`${environment.apiUrl}/employees/account/${accountId}`).pipe(map(employee => this.mapDepartmentName(employee)));\n    }\n    getWithDetails(id) {\n      return this.http.get(`${environment.apiUrl}/employees/${id}/with-details`);\n    }\n    create(employee) {\n      return this.http.post(`${environment.apiUrl}/employees`, employee).pipe(map(employee => this.mapDepartmentName(employee)));\n    }\n    update(id, params) {\n      return this.http.put(`${environment.apiUrl}/employees/${id}`, params).pipe(map(employee => {\n        var _a;\n        // Map department name\n        employee = this.mapDepartmentName(employee);\n        // update employee if it's the current employee\n        if (employee.id === ((_a = this.employeeValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          // publish updated employee to subscribers\n          employee = Object.assign(Object.assign({}, this.employeeValue), employee);\n          this.employeeSubject.next(employee);\n        }\n        return employee;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${environment.apiUrl}/employees/${id}`).pipe(finalize(() => {\n        var _a;\n        // auto logout if the logged in employee was deleted\n        if (id === ((_a = this.employeeValue) === null || _a === void 0 ? void 0 : _a.id)) this.employeeSubject.next(null);\n      }));\n    }\n    transfer(id, departmentId) {\n      return this.http.post(`${environment.apiUrl}/employees/${id}/transfer`, {\n        departmentId\n      });\n    }\n    mapDepartmentName(employee) {\n      if (employee && employee['Department']) {\n        return Object.assign(Object.assign({}, employee), {\n          departmentName: employee['Department'].name\n        });\n      }\n      return employee;\n    }\n  }\n  EmployeeService.ɵfac = function EmployeeService_Factory(t) {\n    return new (t || EmployeeService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  EmployeeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeeService,\n    factory: EmployeeService.ɵfac,\n    providedIn: 'root'\n  });\n  return EmployeeService;\n})();","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE9C,SAASC,WAAW,QAAQ,2BAA2B;;;;AAIvD,WAAaC,eAAe;EAAtB,MAAOA,eAAe;IAIxBC,YACYC,MAAc,EACdC,IAAgB;MADhB,WAAM,GAAND,MAAM;MACN,SAAI,GAAJC,IAAI;MAEZ,IAAI,CAACC,eAAe,GAAG,IAAIR,eAAe,CAAkB,IAAI,CAAC;MACjE,IAAI,CAACS,QAAQ,GAAG,IAAI,CAACD,eAAe,CAACE,YAAY,EAAE;IACvD;IAEA,IAAWC,aAAa;MACpB,OAAO,IAAI,CAACH,eAAe,CAACI,KAAK;IACrC;IAEAC,MAAM;MACF,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAa,GAAGX,WAAW,CAACY,MAAM,YAAY,CAAC,CAC9DC,IAAI,CAACf,GAAG,CAACgB,SAAS,IAAG;QAClB,OAAOA,SAAS,CAAChB,GAAG,CAACQ,QAAQ,IAAI,IAAI,CAACS,iBAAiB,CAACT,QAAQ,CAAC,CAAC;MACtE,CAAC,CAAC,CAAC;IACX;IAEAU,OAAO,CAACC,EAAU;MACd,OAAO,IAAI,CAACb,IAAI,CAACO,GAAG,CAAW,GAAGX,WAAW,CAACY,MAAM,cAAcK,EAAE,EAAE,CAAC,CAClEJ,IAAI,CAACf,GAAG,CAACQ,QAAQ,IAAI,IAAI,CAACS,iBAAiB,CAACT,QAAQ,CAAC,CAAC,CAAC;IAChE;IAEAY,cAAc,CAACC,SAAiB;MAC5B,OAAO,IAAI,CAACf,IAAI,CAACO,GAAG,CAAW,GAAGX,WAAW,CAACY,MAAM,sBAAsBO,SAAS,EAAE,CAAC,CACjFN,IAAI,CAACf,GAAG,CAACQ,QAAQ,IAAI,IAAI,CAACS,iBAAiB,CAACT,QAAQ,CAAC,CAAC,CAAC;IAChE;IAEAc,cAAc,CAACH,EAAU;MACrB,OAAO,IAAI,CAACb,IAAI,CAACO,GAAG,CAAW,GAAGX,WAAW,CAACY,MAAM,cAAcK,EAAE,eAAe,CAAC;IACxF;IAEAI,MAAM,CAACf,QAAkB;MACrB,OAAO,IAAI,CAACF,IAAI,CAACkB,IAAI,CAAW,GAAGtB,WAAW,CAACY,MAAM,YAAY,EAAEN,QAAQ,CAAC,CACvEO,IAAI,CAACf,GAAG,CAACQ,QAAQ,IAAI,IAAI,CAACS,iBAAiB,CAACT,QAAQ,CAAC,CAAC,CAAC;IAChE;IAEAiB,MAAM,CAACN,EAAU,EAAEO,MAAW;MAC1B,OAAO,IAAI,CAACpB,IAAI,CAACqB,GAAG,CAAW,GAAGzB,WAAW,CAACY,MAAM,cAAcK,EAAE,EAAE,EAAEO,MAAM,CAAC,CAC1EX,IAAI,CAACf,GAAG,CAACQ,QAAQ,IAAG;;QACjB;QACAA,QAAQ,GAAG,IAAI,CAACS,iBAAiB,CAACT,QAAQ,CAAC;QAE3C;QACA,IAAIA,QAAQ,CAACW,EAAE,MAAK,UAAI,CAACT,aAAa,0CAAES,EAAE,GAAE;UACxC;UACAX,QAAQ,mCAAQ,IAAI,CAACE,aAAa,GAAKF,QAAQ,CAAE;UACjD,IAAI,CAACD,eAAe,CAACqB,IAAI,CAACpB,QAAQ,CAAC;;QAEvC,OAAOA,QAAQ;MACnB,CAAC,CAAC,CAAC;IACX;IAEAqB,MAAM,CAACV,EAAU;MACb,OAAO,IAAI,CAACb,IAAI,CAACuB,MAAM,CAAC,GAAG3B,WAAW,CAACY,MAAM,cAAcK,EAAE,EAAE,CAAC,CAC3DJ,IAAI,CAACd,QAAQ,CAAC,MAAK;;QAChB;QACA,IAAIkB,EAAE,MAAK,UAAI,CAACT,aAAa,0CAAES,EAAE,GAC7B,IAAI,CAACZ,eAAe,CAACqB,IAAI,CAAC,IAAI,CAAC;MACvC,CAAC,CAAC,CAAC;IACX;IAEAE,QAAQ,CAACX,EAAU,EAAEY,YAAoB;MACrC,OAAO,IAAI,CAACzB,IAAI,CAACkB,IAAI,CAAM,GAAGtB,WAAW,CAACY,MAAM,cAAcK,EAAE,WAAW,EAAE;QAAEY;MAAY,CAAE,CAAC;IAClG;IAEQd,iBAAiB,CAACT,QAAkB;MACxC,IAAIA,QAAQ,IAAIA,QAAQ,CAAC,YAAY,CAAC,EAAE;QACpC,uCACOA,QAAQ;UACXwB,cAAc,EAAExB,QAAQ,CAAC,YAAY,CAAC,CAACyB;QAAI;;MAGnD,OAAOzB,QAAQ;IACnB;;;qBA/ESL,eAAe;EAAA;;WAAfA,eAAe;IAAA+B,SAAf/B,eAAe;IAAAgC,YADF;EAAM;EAAA,OACnBhC,eAAe;AAAA","names":["BehaviorSubject","map","finalize","environment","EmployeeService","constructor","router","http","employeeSubject","employee","asObservable","employeeValue","value","getAll","get","apiUrl","pipe","employees","mapDepartmentName","getById","id","getByAccountId","accountId","getWithDetails","create","post","update","params","put","next","delete","transfer","departmentId","departmentName","name","factory","providedIn"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\_services\\employee.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\n\nimport { environment } from '@environments/environment';\nimport { Employee } from '@app/_models/employee';\n\n@Injectable({ providedIn: 'root' })\nexport class EmployeeService {\n    private employeeSubject: BehaviorSubject<Employee | null>;\n    public employee: Observable<Employee | null>;\n\n    constructor(\n        private router: Router,\n        private http: HttpClient\n    ) {\n        this.employeeSubject = new BehaviorSubject<Employee | null>(null);\n        this.employee = this.employeeSubject.asObservable();\n    }\n\n    public get employeeValue(): Employee | null {\n        return this.employeeSubject.value;\n    }\n\n    getAll() {\n        return this.http.get<Employee[]>(`${environment.apiUrl}/employees`)\n            .pipe(map(employees => {\n                return employees.map(employee => this.mapDepartmentName(employee));\n            }));\n    }\n\n    getById(id: string) {\n        return this.http.get<Employee>(`${environment.apiUrl}/employees/${id}`)\n            .pipe(map(employee => this.mapDepartmentName(employee)));\n    }\n\n    getByAccountId(accountId: string) {\n        return this.http.get<Employee>(`${environment.apiUrl}/employees/account/${accountId}`)\n            .pipe(map(employee => this.mapDepartmentName(employee)));\n    }\n\n    getWithDetails(id: string) {\n        return this.http.get<Employee>(`${environment.apiUrl}/employees/${id}/with-details`);\n    }\n\n    create(employee: Employee) {\n        return this.http.post<Employee>(`${environment.apiUrl}/employees`, employee)\n            .pipe(map(employee => this.mapDepartmentName(employee)));\n    }\n\n    update(id: string, params: any) {\n        return this.http.put<Employee>(`${environment.apiUrl}/employees/${id}`, params)\n            .pipe(map(employee => {\n                // Map department name\n                employee = this.mapDepartmentName(employee);\n\n                // update employee if it's the current employee\n                if (employee.id === this.employeeValue?.id) {\n                    // publish updated employee to subscribers\n                    employee = { ...this.employeeValue, ...employee };\n                    this.employeeSubject.next(employee);\n                }\n                return employee;\n            }));\n    }\n\n    delete(id: string) {\n        return this.http.delete(`${environment.apiUrl}/employees/${id}`)\n            .pipe(finalize(() => {\n                // auto logout if the logged in employee was deleted\n                if (id === this.employeeValue?.id)\n                    this.employeeSubject.next(null);\n            }));\n    }\n\n    transfer(id: string, departmentId: number) {\n        return this.http.post<any>(`${environment.apiUrl}/employees/${id}/transfer`, { departmentId });\n    }\n\n    private mapDepartmentName(employee: Employee): Employee {\n        if (employee && employee['Department']) {\n            return {\n                ...employee,\n                departmentName: employee['Department'].name\n            };\n        }\n        return employee;\n    }\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}