{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize, mergeMap } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'angular-10-registration-login-example-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n      this.users = [{\n        id: 1,\n        email: 'admin@example.com',\n        password: 'admin',\n        role: 'Admin',\n        employeeId: 1\n      }, {\n        id: 2,\n        email: 'user@example.com',\n        password: 'user',\n        role: 'User',\n        employeeId: 2\n      }];\n      this.employees = [{\n        id: 1,\n        employeeId: 'EMP001',\n        userId: 1,\n        position: 'Developer',\n        departmentId: 1,\n        hireDate: '2025-01-01',\n        status: 'Active'\n      }, {\n        id: 2,\n        employeeId: 'EMP002',\n        userId: 2,\n        position: 'Designer',\n        departmentId: 2,\n        hireDate: '2025-02-01',\n        status: 'Active'\n      }];\n      this.departments = [{\n        id: 1,\n        name: 'Engineering',\n        description: 'Software development team',\n        employeeCount: 1\n      }, {\n        id: 2,\n        name: 'Marketing',\n        description: 'Marketing team',\n        employeeCount: 1\n      }];\n      this.workflows = [{\n        id: 1,\n        employeeId: 1,\n        type: 'Onboarding',\n        details: {\n          task: 'Setup workstation'\n        },\n        status: 'Pending'\n      }];\n      this.requests = [{\n        id: 1,\n        employeeId: 2,\n        type: 'Equipment',\n        requestItems: [{\n          name: 'Laptop',\n          quantity: 1\n        }],\n        status: 'Pending'\n      }];\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      return of(null).pipe(mergeMap(() => this.handleRoute(url, method, headers, body))).pipe(materialize()).pipe(delay(500)).pipe(dematerialize());\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts/forgot-password') && method === 'POST':\n            return forgotPassword();\n          case url.endsWith('/accounts/validate-reset-token') && method === 'POST':\n            return validateResetToken();\n          case url.endsWith('/accounts/reset-password') && method === 'POST':\n            return resetPassword();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case url.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n            return deleteAccount();\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      }\n      // route functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) {\n          return error('Email does not exist');\n        }\n        if (!account.isVerified) {\n          // Display verification email alert\n          setTimeout(() => {\n            const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n            alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    `, {\n              autoClose: false\n            });\n          }, 1000);\n          return error('Email is not yet verified');\n        }\n        if (account.password !== password) {\n          return error('Incorrect password');\n        }\n        if (account.status !== 'Active') {\n          return error('Account is inactive. Please contact support.');\n        }\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        if (!account) return unauthorized();\n        // replace old refresh token with a new one and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function forgotPassword() {\n        const {\n          email\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        // always return ok() response to prevent email enumeration\n        if (!account) return ok();\n        // create reset token that expires after 24 hours\n        account.resetToken = new Date().getTime().toString();\n        account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display password reset email in alert\n        setTimeout(() => {\n          const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\n          alertService.info(`\n                    <h4>Reset Password Email</h4>\n                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                    <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoClose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function validateResetToken() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error(\"Invalid token\");\n        return ok();\n      }\n      function resetPassword() {\n        const {\n          token,\n          password\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error('Invalid token');\n        // update password and remove reset token\n        account.password = password;\n        account.isVerified = true;\n        delete account.resetToken;\n        delete account.resetTokenExpires;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      function createAccount() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          return error(`Email ${account.email} is already registered`);\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        account.status = 'Inactive';\n        account.dateCreated = new Date().toISOString();\n        account.isVerified = true;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        let params = body;\n        let account = accounts.find(x => x.id == idFromUrl());\n        // user accounts can update own profile and admin accounts can update all profiles\n        if (account.id != currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        // only update password if included\n        if (!params.password) {\n          delete params.password;\n        }\n        // don't save confirm password\n        delete params.confirmPassword;\n        // update and save account\n        Object.assign(account, params);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function deleteAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can delete own account and admin accounts can delete any account\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        // delete account then save\n        accounts = accounts.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      // helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        })).pipe(delay(500)); // delay observable to simulate server api call\n      }\n\n      function error(message) {\n        return throwError({\n          error: {\n            message\n          }\n        }).pipe(materialize(), delay(500), dematerialize());\n        // call materialize and dematerialize to ensure delay even if an error is thrown\n      }\n\n      function unauthorized() {\n        return throwError({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }).pipe(materialize(), delay(500), dematerialize());\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          dateCreated,\n          isVerified,\n          status\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          dateCreated,\n          isVerified,\n          status\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAuthorized(role) {\n        const account = currentAccount();\n        if (!account) return false;\n        return account.role === role;\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function newAccountId() {\n        return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n      }\n      function currentAccount() {\n        // check if jwt token is in auth header\n        const authHeader = headers.get('Authorization');\n        if (!authHeader || !authHeader.startsWith('Bearer fake-jwt-token')) return;\n        // check if token is expired\n        const jwtToken = JSON.parse(atob(authHeader.split('.')[1]));\n        const tokenExpired = Date.now() > jwtToken.exp * 1000;\n        if (tokenExpired) return;\n        const account = accounts.find(x => x.id === jwtToken.id);\n        return account;\n      }\n      function generateJwtToken(account) {\n        // create token that expires in 15 minutes\n        const tokenPayload = {\n          exp: Math.round(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000),\n          id: account.id\n        };\n        return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n      }\n      function generateRefreshToken() {\n        const token = new Date().getTime().toString();\n        // add token cookie that expires in 7 days\n        const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();\n        document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\n        return token;\n      }\n      function getRefreshToken() {\n        // get refresh token from cookie\n        return (document.cookie.split(';').find(x => x.includes('fakeRefreshToken')) || '=').split('=')[1];\n      }\n    }\n    handleRoute(url, method, headers, body) {\n      // Accounts Routes\n      if (url.endsWith('/accounts/authenticate') && method === 'POST') {\n        const {\n          email,\n          password\n        } = body;\n        const user = this.users.find(u => u.email === email && u.password === password);\n        if (!user) return throwError(() => new Error('Invalid credentials'));\n        return of(new HttpResponse({\n          status: 200,\n          body: Object.assign(Object.assign({}, user), {\n            token: 'fake-jwt-token'\n          })\n        }));\n      }\n      if (url.endsWith('/accounts') && method === 'GET') {\n        return this.authorize(headers, 'Admin', () => of(new HttpResponse({\n          status: 200,\n          body: this.users\n        })));\n      }\n      // Employees Routes\n      if (url.endsWith('/employees') && method === 'GET') {\n        return this.authorize(headers, null, () => of(new HttpResponse({\n          status: 200,\n          body: this.employees\n        })));\n      }\n      if (url.endsWith('/employees') && method === 'POST') {\n        return this.authorize(headers, 'Admin', () => {\n          const employee = Object.assign({\n            id: this.employees.length + 1\n          }, body);\n          this.employees.push(employee);\n          return of(new HttpResponse({\n            status: 201,\n            body: employee\n          }));\n        });\n      }\n      if (url.match(/\\/employees\\/\\d+$/) && method === 'GET') {\n        const id = parseInt(url.split('/').pop());\n        const employee = this.employees.find(e => e.id === id);\n        return this.authorize(headers, null, () => employee ? of(new HttpResponse({\n          status: 200,\n          body: employee\n        })) : throwError(() => new Error('Employee not found')));\n      }\n      if (url.match(/\\/employees\\/\\d+$/) && method === 'PUT') {\n        return this.authorize(headers, 'Admin', () => {\n          const id = parseInt(url.split('/').pop());\n          const employeeIndex = this.employees.findIndex(e => e.id === id);\n          if (employeeIndex === -1) return throwError(() => new Error('Employee not found'));\n          this.employees[employeeIndex] = Object.assign({\n            id\n          }, body);\n          return of(new HttpResponse({\n            status: 200,\n            body: this.employees[employeeIndex]\n          }));\n        });\n      }\n      if (url.match(/\\/employees\\/\\d+$/) && method === 'DELETE') {\n        return this.authorize(headers, 'Admin', () => {\n          const id = parseInt(url.split('/').pop());\n          this.employees = this.employees.filter(e => e.id !== id);\n          return of(new HttpResponse({\n            status: 200,\n            body: {\n              message: 'Employee deleted'\n            }\n          }));\n        });\n      }\n      if (url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'POST') {\n        return this.authorize(headers, 'Admin', () => {\n          const id = parseInt(url.split('/')[2]);\n          const employee = this.employees.find(e => e.id === id);\n          if (!employee) return throwError(() => new Error('Employee not found'));\n          employee.departmentId = body.departmentId;\n          this.workflows.push({\n            id: this.workflows.length + 1,\n            employeeId: id,\n            type: 'Transfer',\n            details: body,\n            status: 'Pending'\n          });\n          return of(new HttpResponse({\n            status: 200,\n            body: {\n              message: 'Employee transferred'\n            }\n          }));\n        });\n      }\n      // Departments Routes\n      if (url.endsWith('/departments') && method === 'GET') {\n        return this.authorize(headers, null, () => of(new HttpResponse({\n          status: 200,\n          body: this.departments\n        })));\n      }\n      if (url.endsWith('/departments') && method === 'POST') {\n        return this.authorize(headers, 'Admin', () => {\n          const department = Object.assign(Object.assign({\n            id: this.departments.length + 1\n          }, body), {\n            employeeCount: 0\n          });\n          this.departments.push(department);\n          return of(new HttpResponse({\n            status: 201,\n            body: department\n          }));\n        });\n      }\n      if (url.match(/\\/departments\\/\\d+$/) && method === 'PUT') {\n        return this.authorize(headers, 'Admin', () => {\n          const id = parseInt(url.split('/').pop());\n          const deptIndex = this.departments.findIndex(d => d.id === id);\n          if (deptIndex === -1) return throwError(() => new Error('Department not found'));\n          this.departments[deptIndex] = Object.assign(Object.assign({\n            id\n          }, body), {\n            employeeCount: this.departments[deptIndex].employeeCount\n          });\n          return of(new HttpResponse({\n            status: 200,\n            body: this.departments[deptIndex]\n          }));\n        });\n      }\n      if (url.match(/\\/departments\\/\\d+$/) && method === 'DELETE') {\n        return this.authorize(headers, 'Admin', () => {\n          const id = parseInt(url.split('/').pop());\n          this.departments = this.departments.filter(d => d.id !== id);\n          return of(new HttpResponse({\n            status: 200,\n            body: {\n              message: 'Department deleted'\n            }\n          }));\n        });\n      }\n      // Workflows Routes\n      if (url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET') {\n        return this.authorize(headers, null, () => {\n          const employeeId = parseInt(url.split('/').pop());\n          const workflows = this.workflows.filter(w => w.employeeId === employeeId);\n          return of(new HttpResponse({\n            status: 200,\n            body: workflows\n          }));\n        });\n      }\n      if (url.endsWith('/workflows') && method === 'POST') {\n        return this.authorize(headers, 'Admin', () => {\n          const workflow = Object.assign({\n            id: this.workflows.length + 1\n          }, body);\n          this.workflows.push(workflow);\n          return of(new HttpResponse({\n            status: 201,\n            body: workflow\n          }));\n        });\n      }\n      // Requests Routes\n      if (url.endsWith('/requests') && method === 'GET') {\n        return this.authorize(headers, 'Admin', () => of(new HttpResponse({\n          status: 200,\n          body: this.requests\n        })));\n      }\n    }\n    authorize(headers, requiredRole, success) {\n      const user = this.getUser(headers);\n      if (!user) return throwError(() => new Error('Unauthorized'));\n      if (requiredRole && user.role !== requiredRole) return throwError(() => new Error('Forbidden'));\n      return success();\n    }\n    getUser(headers) {\n      const authHeader = headers.get('Authorization');\n      if (!authHeader || authHeader !== 'Bearer fake-jwt-token') return null;\n      // Since users don't have a token property, just return the first user for demo purposes\n      return this.users[0];\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport let fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","mergeMap","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","FakeBackendInterceptor","constructor","alertService","id","email","password","role","employeeId","userId","position","departmentId","hireDate","status","name","description","employeeCount","type","details","task","requestItems","quantity","intercept","request","next","url","method","headers","body","pipe","handleRoute","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","forgotPassword","validateResetToken","resetPassword","getAccounts","match","getAccountById","createAccount","updateAccount","deleteAccount","handle","account","find","x","error","isVerified","setTimeout","verifyUrl","location","origin","verificationToken","info","autoClose","refreshTokens","push","generateRefreshToken","setItem","stringify","ok","basicDetails","jwtToken","generateJwtToken","getRefreshToken","unauthorized","includes","filter","isAuthenticated","autoclose","newAccountId","Admin","User","dateCreated","Date","toISOString","getTime","toString","confirmPassword","token","resetToken","resetTokenExpires","now","resetUrl","map","idFromUrl","currentAccount","isAuthorized","params","Object","assign","message","title","firstName","lastName","urlParts","split","parseInt","length","Math","max","authHeader","get","startsWith","atob","tokenExpired","exp","tokenPayload","round","btoa","expires","toUTCString","document","cookie","user","users","u","Error","authorize","employees","employee","pop","e","employeeIndex","findIndex","workflows","departments","department","deptIndex","d","w","workflow","requests","requiredRole","success","getUser","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { delay, materialize, dematerialize, mergeMap } from 'rxjs/operators';\r\n\r\nimport { AlertService } from '@app/_services';\r\nimport { Role } from '@app/_models';\r\n\r\n// array in local storage for accounts\r\nconst accountsKey = 'angular-10-registration-login-example-accounts';\r\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\r\n\r\n@Injectable()\r\nexport class FakeBackendInterceptor implements HttpInterceptor {\r\n    constructor(private alertService: AlertService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const { url, method, headers, body } = request;\r\n        const alertService = this.alertService;\r\n\r\n        return of(null)\r\n            .pipe(mergeMap(() => this.handleRoute(url, method, headers, body)))\r\n            .pipe(materialize())\r\n            .pipe(delay(500))\r\n            .pipe(dematerialize());\r\n\r\n        function handleRoute() {\r\n            switch (true) {\r\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\r\n                    return authenticate();\r\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\r\n                    return refreshToken();\r\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\r\n                    return revokeToken();\r\n                case url.endsWith('/accounts/register') && method === 'POST':\r\n                    return register();\r\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\r\n                    return verifyEmail();\r\n                case url.endsWith('/accounts/forgot-password') && method === 'POST':\r\n                    return forgotPassword();\r\n                case url.endsWith('/accounts/validate-reset-token') && method === 'POST':\r\n                    return validateResetToken();\r\n                case url.endsWith('/accounts/reset-password') && method === 'POST':\r\n                    return resetPassword();\r\n                case url.endsWith('/accounts') && method === 'GET':\r\n                    return getAccounts();\r\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\r\n                    return getAccountById();\r\n                case url.endsWith('/accounts') && method === 'POST':\r\n                    return createAccount();\r\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\r\n                    return updateAccount();\r\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\r\n                    return deleteAccount();\r\n                default:\r\n                    // pass through any requests not handled above\r\n                    return next.handle(request);\r\n            }\r\n        }\r\n\r\n        // route functions\r\n        function authenticate() {\r\n            const { email, password } = body;\r\n            const account = accounts.find(x => x.email === email);\r\n\r\n            if (!account) {\r\n                return error('Email does not exist');\r\n            }\r\n\r\n            if (!account.isVerified) {\r\n                // Display verification email alert\r\n                setTimeout(() => {\r\n                    const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\r\n                    alertService.info(`\r\n                        <h4>Verification Email</h4>\r\n                        <p>Please click the below link to verify your email address:</p>\r\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\r\n                    `, { autoClose: false });\r\n                }, 1000);\r\n\r\n                return error('Email is not yet verified');\r\n            }\r\n\r\n            if (account.password !== password) {\r\n                return error('Incorrect password');\r\n            }\r\n\r\n            if (account.status !== 'Active') {\r\n                return error('Account is inactive. Please contact support.');\r\n            }\r\n\r\n            account.refreshTokens.push(generateRefreshToken());\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok({\r\n                ...basicDetails(account),\r\n                jwtToken: generateJwtToken(account)\r\n            });\r\n        }\r\n\r\n\r\n\r\n        function refreshToken() {\r\n            const refreshToken = getRefreshToken();\r\n\r\n            if (!refreshToken) return unauthorized();\r\n\r\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\r\n\r\n            if (!account) return unauthorized();\r\n\r\n            // replace old refresh token with a new one and save\r\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\r\n            account.refreshTokens.push(generateRefreshToken());\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok({\r\n                ...basicDetails(account),\r\n                jwtToken: generateJwtToken(account)\r\n            });\r\n        }\r\n\r\n        function revokeToken() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            const refreshToken = getRefreshToken();\r\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\r\n\r\n            // revoke token and save\r\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok();\r\n        }\r\n\r\n        function register() {\r\n            const account = body;\r\n\r\n            if (accounts.find(x => x.email === account.email)) {\r\n                // display email already registered message in alert\r\n                setTimeout(() => {\r\n                    alertService.info(`\r\n                        <h4>Email Already Registered</h4>\r\n                        <p>Your email ${account.email} is already registered.</p>\r\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\r\n                        <div>\r\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\r\n                        </div>\r\n                    `, { autoclose: false });\r\n                }, 1000);\r\n\r\n                // always return ok() response to prevent email enumeration\r\n                return ok();\r\n            }\r\n\r\n            // assign account id and a few other properties then save\r\n            account.id = newAccountId();\r\n            if (account.id === 1) {\r\n                // first registered account is an admin\r\n                account.role = Role.Admin;\r\n                account.status = 'Active'; // Admin accounts get active status\r\n            } else {\r\n                account.role = Role.User;\r\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\r\n            }\r\n            account.dateCreated = new Date().toISOString();\r\n            account.verificationToken = new Date().getTime().toString();\r\n            account.isVerified = false;\r\n            account.refreshTokens = [];\r\n            delete account.confirmPassword;\r\n            accounts.push(account);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            // display verification email in alert\r\n            setTimeout(() => {\r\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\r\n                alertService.info(`\r\n                    <h4>Verification Email</h4>\r\n                    <p>Thanks for registering!</p>\r\n                    <p>Please click the below link to verify your email address:</p>\r\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\r\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\r\n                `, { autoclose: false });\r\n            }, 1000);\r\n\r\n            return ok();\r\n        }\r\n\r\n        function verifyEmail() {\r\n            const { token } = body;\r\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\r\n\r\n            if (!account) return error('Verification failed');\r\n\r\n            // set is verified flag to true if token is valid\r\n            account.isVerified = true;\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok();\r\n        }\r\n\r\n        function forgotPassword() {\r\n            const { email } = body;\r\n            const account = accounts.find(x => x.email === email);\r\n\r\n            // always return ok() response to prevent email enumeration\r\n            if (!account) return ok();\r\n\r\n            // create reset token that expires after 24 hours\r\n            account.resetToken = new Date().getTime().toString();\r\n            account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            // display password reset email in alert\r\n            setTimeout(() => {\r\n                const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\r\n                alertService.info(`\r\n                    <h4>Reset Password Email</h4>\r\n                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\r\n                    <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\r\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\r\n                `, { autoClose: false });\r\n            }, 1000);\r\n\r\n            return ok();\r\n        }\r\n\r\n        function validateResetToken() {\r\n            const { token } = body;\r\n            const account = accounts.find(x =>\r\n                !!x.resetToken &&\r\n                x.resetToken === token &&\r\n                new Date() < new Date(x.resetTokenExpires)\r\n            );\r\n\r\n            if (!account) return error(\"Invalid token\");\r\n\r\n            return ok();\r\n        }\r\n\r\n        function resetPassword() {\r\n            const { token, password } = body;\r\n            const account = accounts.find(x =>\r\n                !!x.resetToken && x.resetToken === token &&\r\n                new Date() < new Date(x.resetTokenExpires)\r\n            );\r\n\r\n            if (!account) return error('Invalid token');\r\n\r\n            // update password and remove reset token\r\n            account.password = password;\r\n            account.isVerified = true;\r\n            delete account.resetToken;\r\n            delete account.resetTokenExpires;\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok();\r\n        }\r\n\r\n        function getAccounts() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            return ok(accounts.map(x => basicDetails(x)));\r\n        }\r\n\r\n        function getAccountById() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            let account = accounts.find(x => x.id === idFromUrl());\r\n\r\n            // user accounts can get own profile and admin accounts can get all profiles\r\n            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\r\n                return unauthorized();\r\n            }\r\n\r\n            return ok(basicDetails(account));\r\n\r\n        }\r\n\r\n        function createAccount() {\r\n            if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n            const account = body;\r\n            if (accounts.find(x => x.email === account.email)) {\r\n                return error(`Email ${account.email} is already registered`);\r\n            }\r\n\r\n            // assign account id and a few other properties then save\r\n            account.id = newAccountId();\r\n            account.status = 'Inactive';\r\n            account.dateCreated = new Date().toISOString();\r\n            account.isVerified = true;\r\n            account.refreshTokens = [];\r\n            delete account.confirmPassword;\r\n            accounts.push(account);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok();\r\n        }\r\n\r\n        function updateAccount() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            let params = body;\r\n            let account = accounts.find(x => x.id == idFromUrl());\r\n\r\n            // user accounts can update own profile and admin accounts can update all profiles\r\n            if (account.id != currentAccount().id && !isAuthorized(Role.Admin)) {\r\n                return unauthorized();\r\n            }\r\n\r\n            // only update password if included\r\n            if (!params.password) {\r\n                delete params.password;\r\n            }\r\n            // don't save confirm password\r\n            delete params.confirmPassword;\r\n\r\n            // update and save account\r\n            Object.assign(account, params);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok(basicDetails(account));\r\n        }\r\n\r\n        function deleteAccount() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            let account = accounts.find(x => x.id === idFromUrl());\r\n\r\n            // user accounts can delete own account and admin accounts can delete any account\r\n            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\r\n                return unauthorized();\r\n            }\r\n\r\n            // delete account then save\r\n            accounts = accounts.filter(x => x.id !== idFromUrl());\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok();\r\n        }\r\n\r\n        // helper functions\r\n        function ok(body?) {\r\n            return of(new HttpResponse({ status: 200, body }))\r\n                .pipe(delay(500)); // delay observable to simulate server api call\r\n        }\r\n\r\n        function error(message) {\r\n            return throwError({ error: { message } })\r\n                .pipe(materialize(), delay(500), dematerialize());\r\n            // call materialize and dematerialize to ensure delay even if an error is thrown\r\n        }\r\n\r\n        function unauthorized() {\r\n            return throwError({ status: 401, error: { message: 'Unauthorized' } })\r\n                .pipe(materialize(), delay(500), dematerialize());\r\n        }\r\n\r\n        function basicDetails(account) {\r\n            const { id, title, firstName, lastName, email, role, dateCreated, isVerified, status } = account;\r\n            return { id, title, firstName, lastName, email, role, dateCreated, isVerified, status };\r\n        }\r\n\r\n\r\n        function isAuthenticated() {\r\n            return !!currentAccount();\r\n        }\r\n\r\n        function isAuthorized(role) {\r\n            const account = currentAccount();\r\n            if (!account) return false;\r\n            return account.role === role;\r\n        }\r\n\r\n        function idFromUrl() {\r\n            const urlParts = url.split('/');\r\n            return parseInt(urlParts[urlParts.length - 1]);\r\n        }\r\n\r\n        function newAccountId() {\r\n            return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\r\n        }\r\n\r\n        function currentAccount() {\r\n            // check if jwt token is in auth header\r\n            const authHeader = headers.get('Authorization');\r\n            if (!authHeader || !authHeader.startsWith('Bearer fake-jwt-token')) return;\r\n\r\n            // check if token is expired\r\n            const jwtToken = JSON.parse(atob(authHeader.split('.')[1]));\r\n            const tokenExpired = Date.now() > (jwtToken.exp * 1000);\r\n            if (tokenExpired) return;\r\n\r\n            const account = accounts.find(x => x.id === jwtToken.id);\r\n            return account;\r\n        }\r\n\r\n        function generateJwtToken(account) {\r\n            // create token that expires in 15 minutes\r\n            const tokenPayload = {\r\n                exp: Math.round(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000),\r\n                id: account.id\r\n            };\r\n            return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\r\n        }\r\n\r\n        function generateRefreshToken() {\r\n            const token = new Date().getTime().toString();\r\n\r\n            // add token cookie that expires in 7 days\r\n            const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();\r\n            document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\r\n            return token;\r\n        }\r\n\r\n        function getRefreshToken() {\r\n            // get refresh token from cookie\r\n            return (document.cookie.split(';').find(x => x.includes('fakeRefreshToken')) || '=').split('=')[1];\r\n        }\r\n    }\r\n\r\n    private users = [\r\n        { id: 1, email: 'admin@example.com', password: 'admin', role: 'Admin', employeeId: 1 },\r\n        { id: 2, email: 'user@example.com', password: 'user', role: 'User', employeeId: 2 }\r\n    ];\r\n    private employees = [\r\n        { id: 1, employeeId: 'EMP001', userId: 1, position: 'Developer', departmentId: 1, hireDate: '2025-01-01', status: 'Active' },\r\n        { id: 2, employeeId: 'EMP002', userId: 2, position: 'Designer', departmentId: 2, hireDate: '2025-02-01', status: 'Active' }\r\n    ];\r\n    private departments = [\r\n        { id: 1, name: 'Engineering', description: 'Software development team', employeeCount: 1 },\r\n        { id: 2, name: 'Marketing', description: 'Marketing team', employeeCount: 1 }\r\n    ];\r\n    private workflows = [\r\n        { id: 1, employeeId: 1, type: 'Onboarding', details: { task: 'Setup workstation' }, status: 'Pending' }\r\n    ];\r\n    private requests = [\r\n        { id: 1, employeeId: 2, type: 'Equipment', requestItems: [{ name: 'Laptop', quantity: 1 }], status: 'Pending' }\r\n    ];\r\n\r\n    private handleRoute(url: string, method: string, headers: any, body: any): Observable<HttpEvent<any>> {\r\n        // Accounts Routes\r\n        if (url.endsWith('/accounts/authenticate') && method === 'POST') {\r\n            const { email, password } = body;\r\n            const user = this.users.find(u => u.email === email && u.password === password);\r\n            if (!user) return throwError(() => new Error('Invalid credentials'));\r\n            return of(new HttpResponse({ status: 200, body: { ...user, token: 'fake-jwt-token' } }));\r\n        }\r\n\r\n        if (url.endsWith('/accounts') && method === 'GET') {\r\n            return this.authorize(headers, 'Admin', () => of(new HttpResponse({ status: 200, body: this.users })));\r\n        }\r\n\r\n        // Employees Routes\r\n        if (url.endsWith('/employees') && method === 'GET') {\r\n            return this.authorize(headers, null, () => of(new HttpResponse({ status: 200, body: this.employees })));\r\n        }\r\n\r\n        if (url.endsWith('/employees') && method === 'POST') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const employee = { id: this.employees.length + 1, ...body };\r\n                this.employees.push(employee);\r\n                return of(new HttpResponse({ status: 201, body: employee }));\r\n            });\r\n        }\r\n\r\n        if (url.match(/\\/employees\\/\\d+$/) && method === 'GET') {\r\n            const id = parseInt(url.split('/').pop());\r\n            const employee = this.employees.find(e => e.id === id);\r\n            return this.authorize(headers, null, () => employee ?\r\n                of(new HttpResponse({ status: 200, body: employee })) :\r\n                throwError(() => new Error('Employee not found')));\r\n        }\r\n\r\n        if (url.match(/\\/employees\\/\\d+$/) && method === 'PUT') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const id = parseInt(url.split('/').pop());\r\n                const employeeIndex = this.employees.findIndex(e => e.id === id);\r\n                if (employeeIndex === -1) return throwError(() => new Error('Employee not found'));\r\n                this.employees[employeeIndex] = { id, ...body };\r\n                return of(new HttpResponse({ status: 200, body: this.employees[employeeIndex] }));\r\n            });\r\n        }\r\n\r\n        if (url.match(/\\/employees\\/\\d+$/) && method === 'DELETE') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const id = parseInt(url.split('/').pop());\r\n                this.employees = this.employees.filter(e => e.id !== id);\r\n                return of(new HttpResponse({ status: 200, body: { message: 'Employee deleted' } }));\r\n            });\r\n        }\r\n        if (url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'POST') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const id = parseInt(url.split('/')[2]);\r\n                const employee = this.employees.find(e => e.id === id);\r\n                if (!employee) return throwError(() => new Error('Employee not found'));\r\n                employee.departmentId = body.departmentId;\r\n                this.workflows.push({ id: this.workflows.length + 1, employeeId: id, type: 'Transfer', details: body, status: 'Pending' });\r\n                return of(new HttpResponse({ status: 200, body: { message: 'Employee transferred' } }));\r\n            });\r\n        }\r\n\r\n        // Departments Routes\r\n        if (url.endsWith('/departments') && method === 'GET') {\r\n            return this.authorize(headers, null, () => of(new HttpResponse({ status: 200, body: this.departments })));\r\n        }\r\n\r\n        if (url.endsWith('/departments') && method === 'POST') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const department = { id: this.departments.length + 1, ...body, employeeCount: 0 };\r\n                this.departments.push(department);\r\n                return of(new HttpResponse({ status: 201, body: department }));\r\n            });\r\n        }\r\n\r\n        if (url.match(/\\/departments\\/\\d+$/) && method === 'PUT') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const id = parseInt(url.split('/').pop());\r\n                const deptIndex = this.departments.findIndex(d => d.id === id);\r\n                if (deptIndex === -1) return throwError(() => new Error('Department not found'));\r\n                this.departments[deptIndex] = { id, ...body, employeeCount: this.departments[deptIndex].employeeCount };\r\n                return of(new HttpResponse({ status: 200, body: this.departments[deptIndex] }));\r\n            });\r\n        }\r\n        if (url.match(/\\/departments\\/\\d+$/) && method === 'DELETE') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const id = parseInt(url.split('/').pop());\r\n                this.departments = this.departments.filter(d => d.id !== id);\r\n                return of(new HttpResponse({ status: 200, body: { message: 'Department deleted' } }));\r\n            });\r\n        }\r\n\r\n        // Workflows Routes\r\n        if (url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET') {\r\n            return this.authorize(headers, null, () => {\r\n                const employeeId = parseInt(url.split('/').pop());\r\n                const workflows = this.workflows.filter(w => w.employeeId === employeeId);\r\n                return of(new HttpResponse({ status: 200, body: workflows }));\r\n            });\r\n        }\r\n\r\n        if (url.endsWith('/workflows') && method === 'POST') {\r\n            return this.authorize(headers, 'Admin', () => {\r\n                const workflow = { id: this.workflows.length + 1, ...body };\r\n                this.workflows.push(workflow);\r\n                return of(new HttpResponse({ status: 201, body: workflow }));\r\n            });\r\n        }\r\n\r\n        // Requests Routes\r\n        if (url.endsWith('/requests') && method === 'GET') {\r\n            return this.authorize(headers, 'Admin', () => of(new HttpResponse({ status: 200, body: this.requests })));\r\n        }\r\n    }\r\n\r\n    private authorize(headers: any, requiredRole: string | null, success: () => Observable<HttpEvent<any>>): Observable<HttpEvent<any>> {\r\n        const user = this.getUser(headers);\r\n        if (!user) return throwError(() => new Error('Unauthorized'));\r\n        if (requiredRole && user.role !== requiredRole) return throwError(() => new Error('Forbidden'));\r\n        return success();\r\n    }\r\n\r\n    private getUser(headers: any) {\r\n        const authHeader = headers.get('Authorization');\r\n        if (!authHeader || authHeader !== 'Bearer fake-jwt-token') return null;\r\n        // Since users don't have a token property, just return the first user for demo purposes\r\n        return this.users[0];\r\n    }\r\n}\r\n\r\nexport let fakeBackendProvider = {\r\n    // use fake backend in place of Http service for backend-less development\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: FakeBackendInterceptor,\r\n    multi: true\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}