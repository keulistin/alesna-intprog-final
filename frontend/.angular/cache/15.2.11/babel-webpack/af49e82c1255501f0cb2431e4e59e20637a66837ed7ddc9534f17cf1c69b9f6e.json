{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { MustMatch } from '@app_helpers';\nvar TokenStatus = /*#__PURE__*/(() => {\n  (function (TokenStatus) {\n    TokenStatus[TokenStatus[\"Validating\"] = 0] = \"Validating\";\n    TokenStatus[TokenStatus[\"Valid\"] = 1] = \"Valid\";\n    TokenStatus[TokenStatus[\"Invalid\"] = 2] = \"Invalid\";\n  })(TokenStatus || (TokenStatus = {}));\n  return TokenStatus;\n})();\nlet ResetPasswordComponent = class ResetPasswordComponent {\n  constructor(formBuilder, route, router, accountService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.TokenStatus = TokenStatus;\n    this.tokenStatus = TokenStatus.Validating;\n    this.token = null;\n    this.loading = false;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required]\n    }, {\n      validator: MustMatch('password', 'confirmPassword')\n    });\n    const token = this.route.snapshot.queryParams['token'];\n    // remove token from URL to prevent HTTP referer leakage\n    this.router.navigate([], {\n      relativeTo: this.route,\n      replaceUrl: true\n    });\n    this.accountService.validateResetToken(token).pipe(first()).subscribe({\n      next: () => {\n        this.token = token;\n        this.tokenStatus = TokenStatus.Valid;\n      },\n      error: () => {\n        this.tokenStatus = TokenStatus.Invalid;\n      }\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.accountService.resetPassword(this.token, this.f.password.value, this.f.confirmPassword.value).pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success('Password reset successful, you can now login', {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['../login'], {\n          relativeTo: this.route\n        });\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n};\nResetPasswordComponent = __decorate([Component({\n  templateUrl: 'reset-password.component.html'\n})], ResetPasswordComponent);\nexport { ResetPasswordComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAA+CC,UAAU,QAAQ,gBAAgB;AACjF,SAASC,KAAK,QAAQ,gBAAgB;AAGtC,SAASC,SAAS,QAAQ,cAAc;AAExC,IAAKC,WAIJ;EAJD,WAAKA,WAAW;IACZA,yDAAU;IACVA,+CAAK;IACLA,mDAAO;EACX,CAAC,EAJIA,WAAW,KAAXA,WAAW;EAAA,OAAXA,WAIJ;AAAA;AAGM,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAQ/BC,YACYC,WAA+B,EAC/BC,KAAqB,EACrBC,MAAc,EACdC,cAA8B,EAC9BC,YAA0B;IAJ1B,gBAAW,GAAXJ,WAAW;IACX,UAAK,GAALC,KAAK;IACL,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IACd,iBAAY,GAAZC,YAAY;IAZxB,gBAAW,GAAGP,WAAW;IACzB,gBAAW,GAAGA,WAAW,CAACQ,UAAU;IACpC,UAAK,GAAG,IAAI;IAEZ,YAAO,GAAG,KAAK;IACf,cAAS,GAAG,KAAK;EAQb;EAEJC,QAAQ;IACJ,IAAI,CAACC,IAAI,GAAG,IAAI,CAACP,WAAW,CAACQ,KAAK,CAAC;MAC/BC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACgB,QAAQ,EAAEhB,UAAU,CAACiB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DC,eAAe,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACgB,QAAQ;KAC5C,EAAE;MACCG,SAAS,EAAEjB,SAAS,CAAC,UAAU,EAAE,iBAAiB;KACrD,CAAC;IAEF,MAAMkB,KAAK,GAAG,IAAI,CAACb,KAAK,CAACc,QAAQ,CAACC,WAAW,CAAC,OAAO,CAAC;IAEtD;IACA,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,EAAE,EAAE;MAAEC,UAAU,EAAE,IAAI,CAACjB,KAAK;MAAEkB,UAAU,EAAE;IAAI,CAAE,CAAC;IAEtE,IAAI,CAAChB,cAAc,CAACiB,kBAAkB,CAACN,KAAK,CAAC,CACxCO,IAAI,CAAC1B,KAAK,EAAE,CAAC,CACb2B,SAAS,CAAC;MACPC,IAAI,EAAE,MAAK;QACP,IAAI,CAACT,KAAK,GAAGA,KAAK;QAClB,IAAI,CAACU,WAAW,GAAG3B,WAAW,CAAC4B,KAAK;MACxC,CAAC;MACDC,KAAK,EAAE,MAAK;QACR,IAAI,CAACF,WAAW,GAAG3B,WAAW,CAAC8B,OAAO;MAC1C;KACH,CAAC;EACV;EAEA;EACA,IAAIC,CAAC;IAAK,OAAO,IAAI,CAACrB,IAAI,CAACsB,QAAQ;EAAE;EAErCC,QAAQ;IACJ,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB;IACA,IAAI,CAAC3B,YAAY,CAAC4B,KAAK,EAAE;IAEzB;IACA,IAAI,IAAI,CAACzB,IAAI,CAAC0B,OAAO,EAAE;MACnB;;IAGJ,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAAC/B,cAAc,CAACgC,aAAa,CAAC,IAAI,CAACrB,KAAK,EAAE,IAAI,CAACc,CAAC,CAACnB,QAAQ,CAAC2B,KAAK,EAAE,IAAI,CAACR,CAAC,CAAChB,eAAe,CAACwB,KAAK,CAAC,CAC7Ff,IAAI,CAAC1B,KAAK,EAAE,CAAC,CACb2B,SAAS,CAAC;MACPC,IAAI,EAAE,MAAK;QACP,IAAI,CAACnB,YAAY,CAACiC,OAAO,CACrB,8CAA8C,EAC9C;UAAEC,oBAAoB,EAAE;QAAI,CAAE,CACjC;QACD,IAAI,CAACpC,MAAM,CAACe,QAAQ,CAAC,CAAC,UAAU,CAAC,EAAE;UAAEC,UAAU,EAAE,IAAI,CAACjB;QAAK,CAAE,CAAC;MAClE,CAAC;MACDyB,KAAK,EAAEA,KAAK,IAAG;QACX,IAAI,CAACtB,YAAY,CAACsB,KAAK,CAACA,KAAK,CAAC;QAC9B,IAAI,CAACQ,OAAO,GAAG,KAAK;MACxB;KACH,CAAC;EACV;CACH;AAzEYpC,sBAAsB,eADlCL,SAAS,CAAC;EAAE8C,WAAW,EAAE;AAA+B,CAAE,CAAC,GAC/CzC,sBAAsB,CAyElC;SAzEYA,sBAAsB","names":["Component","Validators","first","MustMatch","TokenStatus","ResetPasswordComponent","constructor","formBuilder","route","router","accountService","alertService","Validating","ngOnInit","form","group","password","required","minLength","confirmPassword","validator","token","snapshot","queryParams","navigate","relativeTo","replaceUrl","validateResetToken","pipe","subscribe","next","tokenStatus","Valid","error","Invalid","f","controls","onSubmit","submitted","clear","invalid","loading","resetPassword","value","success","keepAfterRouteChange","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\Bryl Gorgonio\\Desktop\\user-management-system\\user-management-system\\frontend\\src\\app\\account\\reset-password.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app_services';\r\nimport { MustMatch } from '@app_helpers';\r\n\r\nenum TokenStatus {\r\n    Validating,\r\n    Valid,\r\n    Invalid\r\n}\r\n\r\n@Component({ templateUrl: 'reset-password.component.html' })\r\nexport class ResetPasswordComponent implements OnInit {\r\n    TokenStatus = TokenStatus;\r\n    tokenStatus = TokenStatus.Validating;\r\n    token = null;\r\n    form: UntypedFormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: UntypedFormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            password: ['', [Validators.required, Validators.minLength(6)]],\r\n            confirmPassword: ['', Validators.required]\r\n        }, {\r\n            validator: MustMatch('password', 'confirmPassword')\r\n        });\r\n\r\n        const token = this.route.snapshot.queryParams['token'];\r\n\r\n        // remove token from URL to prevent HTTP referer leakage\r\n        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });\r\n\r\n        this.accountService.validateResetToken(token)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.token = token;\r\n                    this.tokenStatus = TokenStatus.Valid;\r\n                },\r\n                error: () => {\r\n                    this.tokenStatus = TokenStatus.Invalid;\r\n                }\r\n            });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.resetPassword(this.token, this.f.password.value, this.f.confirmPassword.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success(\r\n                        'Password reset successful, you can now login',\r\n                        { keepAfterRouteChange: true }\r\n                    );\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}