{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS, HttpErrorResponse } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models'; // Assuming this path is correct\nimport { WorkflowStatus } from '@app/_models/workflow';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// Key for localStorage\nconst accountsKey = 'app-hr-tool-accounts'; // Made key more specific\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n      // In-memory for other entities\n      this.employees = [{\n        id: 1,\n        employeeId: 'EMP001',\n        userId: 1,\n        email: 'admin@example.com',\n        position: 'Developer',\n        departmentId: 1,\n        hireDate: '2025-01-01',\n        status: 'Active'\n      }, {\n        id: 2,\n        employeeId: 'EMP002',\n        userId: 2,\n        email: 'user@example.com',\n        position: 'Designer',\n        departmentId: 2,\n        hireDate: '2025-02-01',\n        status: 'Active'\n      }];\n      this.departments = [{\n        id: 1,\n        name: 'Engineering',\n        description: 'Software development team',\n        employeeCount: 1\n      }, {\n        id: 2,\n        name: 'Marketing',\n        description: 'Marketing team',\n        employeeCount: 1\n      }];\n      this.workflows = [{\n        id: 1,\n        employeeId: 1,\n        type: 'Onboarding',\n        details: {\n          task: 'Setup workstation'\n        },\n        status: 'Pending',\n        datetimecreated: new Date(Date.now() - 100000).toISOString()\n      }, {\n        id: 2,\n        employeeId: 2,\n        type: 'Offboarding',\n        details: {\n          task: 'Return equipment'\n        },\n        status: 'Completed',\n        datetimecreated: new Date(Date.now() - 200000).toISOString()\n      }];\n      this.appRequests = [{\n        id: 1,\n        employeeId: 2,\n        type: 'Equipment',\n        requestItems: [{\n          name: 'Laptop',\n          quantity: 1\n        }],\n        status: 'Pending'\n      }];\n      // ID Generators for in-memory entities\n      this.nextEmployeeId = this.employees.length > 0 ? Math.max(0, ...this.employees.map(e => e.id)) + 1 : 1;\n      this.nextDepartmentId = this.departments.length > 0 ? Math.max(0, ...this.departments.map(d => d.id)) + 1 : 1;\n      this.nextWorkflowId = this.workflows.length > 0 ? Math.max(0, ...this.workflows.map(w => w.id)) + 1 : 1;\n      this.nextAppRequestId = this.appRequests.length > 0 ? Math.max(0, ...this.appRequests.map(r => r.id)) + 1 : 1;\n      this.accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n      // Ensure default admin/user if local storage is empty or new\n      if (this.accounts.length === 0) {\n        this.accounts.push({\n          id: 1,\n          title: 'Mr',\n          email: 'admin@example.com',\n          password: 'admin',\n          role: Role.Admin,\n          employeeId: 1,\n          isVerified: true,\n          status: 'Active',\n          refreshTokens: [],\n          dateCreated: new Date().toISOString(),\n          firstName: 'Admin',\n          lastName: 'User'\n        });\n        this.accounts.push({\n          id: 2,\n          title: 'Mr',\n          email: 'user@example.com',\n          password: 'user',\n          role: Role.User,\n          employeeId: 2,\n          isVerified: true,\n          status: 'Active',\n          refreshTokens: [],\n          dateCreated: new Date().toISOString(),\n          firstName: 'Normal',\n          lastName: 'User'\n        });\n        this.saveAccounts();\n      }\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      return of(null).pipe(mergeMap(() => this.handleRoute(url, method, headers, body, next))).pipe(materialize()).pipe(delay(500)).pipe(dematerialize());\n    }\n    handleRoute(url, method, headers, body, next) {\n      // --- ACCOUNT MANAGEMENT ROUTES ---\n      switch (true) {\n        case url.endsWith('/accounts/authenticate') && method === 'POST':\n          return this.authenticate(body, headers);\n        case url.endsWith('/accounts/refresh-token') && method === 'POST':\n          return this.refreshToken(body, headers);\n        case url.endsWith('/accounts/revoke-token') && method === 'POST':\n          return this.revokeToken(body, headers);\n        case url.endsWith('/accounts/register') && method === 'POST':\n          return this.register(body);\n        case url.endsWith('/accounts/verify-email') && method === 'POST':\n          return this.verifyEmail(body);\n        case url.endsWith('/accounts/forgot-password') && method === 'POST':\n          return this.forgotPassword(body);\n        case url.endsWith('/accounts/validate-reset-token') && method === 'POST':\n          return this.validateResetToken(body);\n        case url.endsWith('/accounts/reset-password') && method === 'POST':\n          return this.resetPassword(body);\n        case url.endsWith('/accounts') && method === 'GET':\n          return this.getAccounts(headers);\n        case url.match(/\\/accounts\\/(\\d+)$/) && method === 'GET':\n          return this.getAccountById(this.idFromUrl(url), headers);\n        case url.endsWith('/accounts') && method === 'POST':\n          return this.createAccount(body, headers);\n        case url.match(/\\/accounts\\/(\\d+)$/) && method === 'PUT':\n          return this.updateAccount(this.idFromUrl(url), body, headers);\n        case url.match(/\\/accounts\\/(\\d+)$/) && method === 'DELETE':\n          return this.deleteAccount(this.idFromUrl(url), headers);\n        // --- OTHER ENTITY ROUTES ---\n        // Employees\n        case url.endsWith('/accounts/users') && method === 'GET':\n          return this.authorize(headers, null, () => {\n            const usersToReturn = this.accounts.map(acc => this.basicDetails(acc));\n            return this.ok(usersToReturn);\n          });\n        case url.endsWith('/employees') && method === 'GET':\n          return this.authorize(headers, null, () => this.ok(this.employees));\n        case url.endsWith('/employees') && method === 'POST':\n          return this.authorize(headers, Role.Admin, () => {\n            const newEmployee = Object.assign({\n              id: this.nextEmployeeId++\n            }, body);\n            this.employees.push(newEmployee);\n            const dept = this.departments.find(d => d.id === newEmployee.departmentId);\n            if (dept) dept.employeeCount++;\n            return this.ok(newEmployee, 201);\n          });\n        case url.match(/\\/employees\\/(\\d+)$/) && method === 'GET':\n          {\n            const id = this.idFromUrl(url);\n            return this.authorize(headers, null, () => {\n              const employee = this.employees.find(e => e.id === id);\n              return employee ? this.ok(employee) : this.error('Employee not found', 404);\n            });\n          }\n        // In FakeBackendInterceptor, within the handleRoute method:\n        case url.match(/\\/employees\\/(\\d+)$/) && method === 'PUT':\n          {\n            const id = this.idFromUrl(url); // This is the employee's ID (number)\n            console.log(`PUT /employees/${id} - Request Body:`, JSON.stringify(body));\n            return this.authorize(headers, Role.Admin, () => {\n              const employeeIndex = this.employees.findIndex(e => e.id === id);\n              if (employeeIndex === -1) return this.error('Employee not found', 404);\n              const oldEmployeeData = this.employees[employeeIndex];\n              // Create updatedEmployee, ensuring body properties are merged\n              const updatedEmployee = Object.assign(Object.assign(Object.assign({}, oldEmployeeData), body), {\n                id\n              });\n              // Ensure the departmentId from the body is treated as a number for comparison\n              const targetDepartmentIdFromBody = updatedEmployee.departmentId !== undefined && updatedEmployee.departmentId !== null ? parseInt(String(updatedEmployee.departmentId), 10) : undefined;\n              // Update departmentId on the employee object IF it was provided in the body\n              if (targetDepartmentIdFromBody !== undefined && !isNaN(targetDepartmentIdFromBody)) {\n                updatedEmployee.departmentId = targetDepartmentIdFromBody;\n              }\n              if (oldEmployeeData.departmentId !== updatedEmployee.departmentId) {\n                const oldDept = this.departments.find(d => d.id === oldEmployeeData.departmentId);\n                if (oldDept) oldDept.employeeCount = Math.max(0, oldDept.employeeCount - 1);\n                // Now updatedEmployee.departmentId should be a number if it was valid\n                const newDept = this.departments.find(d => d.id === updatedEmployee.departmentId);\n                if (newDept) {\n                  newDept.employeeCount++;\n                } else if (updatedEmployee.departmentId !== oldEmployeeData.departmentId) {\n                  // Only error if a new, non-existent departmentId was attempted\n                  return this.error(`Target department with id '${updatedEmployee.departmentId}' not found`, 400);\n                }\n              }\n              this.employees[employeeIndex] = updatedEmployee;\n              return this.ok(this.employees[employeeIndex]);\n            });\n          }\n        case url.match(/\\/employees\\/(\\d+)$/) && method === 'DELETE':\n          {\n            const id = this.idFromUrl(url);\n            return this.authorize(headers, Role.Admin, () => {\n              const employeeIndex = this.employees.findIndex(e => e.id === id);\n              if (employeeIndex === -1) return this.error('Employee not found', 404);\n              const deletedEmployee = this.employees.splice(employeeIndex, 1)[0];\n              if (deletedEmployee) {\n                const dept = this.departments.find(d => d.id === deletedEmployee.departmentId);\n                if (dept) dept.employeeCount = Math.max(0, dept.employeeCount - 1);\n              }\n              return this.ok({\n                message: 'Employee deleted'\n              });\n            });\n          }\n        case url.match(/\\/employees\\/(\\d+)\\/transfer$/) && method === 'POST':\n          {\n            const idMatch = url.match(/\\/employees\\/(\\d+)\\/transfer$/);\n            if (!idMatch) return this.error('Invalid URL for employee transfer', 400);\n            const id = parseInt(idMatch[1]);\n            return this.authorize(headers, Role.Admin, () => {\n              const employee = this.employees.find(e => e.id === id);\n              if (!employee) return this.error('Employee not found', 404);\n              const oldDepartmentId = employee.departmentId;\n              const newDepartmentId = body.departmentId;\n              if (oldDepartmentId !== newDepartmentId) {\n                const oldDept = this.departments.find(d => d.id === oldDepartmentId);\n                if (oldDept) oldDept.employeeCount = Math.max(0, oldDept.employeeCount - 1);\n                const newDept = this.departments.find(d => d.id === newDepartmentId);\n                if (newDept) newDept.employeeCount++;else return this.error('Target department not found', 400);\n              }\n              employee.departmentId = newDepartmentId;\n              this.workflows.push({\n                id: this.nextWorkflowId++,\n                employeeId: id,\n                type: 'Transfer',\n                details: body,\n                status: 'Pending',\n                datetimecreated: new Date().toISOString()\n              });\n              return this.ok({\n                message: 'Employee transferred successfully',\n                employee\n              });\n            });\n          }\n        // Departments\n        case url.endsWith('/departments') && method === 'GET':\n          return this.authorize(headers, null, () => this.ok(this.departments));\n        case url.endsWith('/departments') && method === 'POST':\n          return this.authorize(headers, Role.Admin, () => {\n            const newDepartment = Object.assign(Object.assign({\n              id: this.nextDepartmentId++\n            }, body), {\n              employeeCount: 0\n            });\n            this.departments.push(newDepartment);\n            return this.ok(newDepartment, 201);\n          });\n        case url.match(/\\/departments\\/(\\d+)$/) && method === 'GET':\n          {\n            const id = this.idFromUrl(url);\n            return this.authorize(headers, null, () => {\n              const department = this.departments.find(d => d.id === id);\n              return department ? this.ok(department) : this.error(`Department with id ${id} not found`, 404);\n            });\n          }\n        case url.match(/\\/departments\\/(\\d+)$/) && method === 'PUT':\n          {\n            const id = this.idFromUrl(url);\n            return this.authorize(headers, Role.Admin, () => {\n              const deptIndex = this.departments.findIndex(d => d.id === id);\n              if (deptIndex === -1) return this.error('Department not found', 404);\n              this.departments[deptIndex] = Object.assign(Object.assign(Object.assign({}, this.departments[deptIndex]), body), {\n                id\n              });\n              return this.ok(this.departments[deptIndex]);\n            });\n          }\n        case url.match(/\\/departments\\/(\\d+)$/) && method === 'DELETE':\n          {\n            const id = this.idFromUrl(url);\n            return this.authorize(headers, Role.Admin, () => {\n              const dept = this.departments.find(d => d.id === id);\n              if (!dept) return this.error('Department not found', 404);\n              if (dept.employeeCount > 0) return this.error('Cannot delete department with active employees.', 400);\n              this.departments = this.departments.filter(d => d.id !== id);\n              return this.ok({\n                message: 'Department deleted'\n              });\n            });\n          }\n        // Workflows\n        case url.match(/\\/workflows\\/employee\\/(\\d+)$/) && method === 'GET':\n          {\n            // Keep this if you also want to support path params\n            const idMatch = url.match(/\\/workflows\\/employee\\/(\\d+)$/);\n            if (!idMatch) return this.error('Invalid URL for employee workflows', 400);\n            const employeeIdFromPath = parseInt(idMatch[1]);\n            return this.authorize(headers, null, () => {\n              const workflows = this.workflows.filter(w => w.employeeId === employeeIdFromPath);\n              return this.ok(workflows);\n            });\n          }\n        case url.endsWith('/workflows') && method === 'POST':\n          return this.authorize(headers, Role.Admin, () => {\n            const newWorkflow = Object.assign(Object.assign({\n              id: this.nextWorkflowId++\n            }, body), {\n              datetimecreated: new Date().toISOString() // Add timestamp on creation\n            });\n\n            this.workflows.push(newWorkflow);\n            return this.ok(newWorkflow, 201);\n          });\n        // *** ADDED HANDLER FOR GET /workflows ***\n        case url.endsWith('/workflows') && method === 'GET':\n          {\n            // Attempt to get employeeId from query parameters\n            const urlWithParams = new URL(url, 'http://localhost'); // Need full URL for URLSearchParams\n            const employeeIdFromQueryParam = urlWithParams.searchParams.get('employeeId');\n            if (employeeIdFromQueryParam) {\n              // If employeeId query param exists, filter by it\n              const employeeId = parseInt(employeeIdFromQueryParam, 10);\n              if (isNaN(employeeId)) {\n                return this.error('Invalid employeeId query parameter', 400);\n              }\n              return this.authorize(headers, null, () => {\n                const filteredWorkflows = this.workflows.filter(w => w.employeeId === employeeId);\n                const sortedWorkflows = this.sortWorkflowsInternal(filteredWorkflows); // Use an internal sort helper\n                return this.ok(sortedWorkflows);\n              });\n            } else {\n              // If no employeeId query param, return all (Admin only, or as per your rules)\n              return this.authorize(headers, Role.Admin, () => {\n                const sortedWorkflows = this.sortWorkflowsInternal(this.workflows);\n                return this.ok(sortedWorkflows);\n              });\n            }\n          }\n        case url.match(/\\/workflows\\/(\\d+)$/) && method === 'PUT':\n          {\n            const id = this.idFromUrl(url); // Extracts the ID from the URL\n            const requestBody = body; // The body of the PUT request, e.g., { status: 'Approved' } or full workflow object\n            return this.authorize(headers, Role.Admin, () => {\n              const workflowIndex = this.workflows.findIndex(w => w.id === id);\n              if (workflowIndex === -1) {\n                return this.error(`Workflow with id ${id} not found`, 404);\n              }\n              // Update the workflow. If body only contains status, merge it.\n              // If body contains other properties, they will also be updated.\n              this.workflows[workflowIndex] = Object.assign(Object.assign(Object.assign({}, this.workflows[workflowIndex]), requestBody), {\n                id: id\n              });\n              const updatedWorkflow = this.workflows[workflowIndex];\n              // **IMPORTANT: Synchronization with AppRequest status (if applicable)**\n              if (updatedWorkflow.type === 'Request Approval' && updatedWorkflow.originatingRequestId) {\n                const requestIndex = this.appRequests.findIndex(r => r.id === updatedWorkflow.originatingRequestId);\n                if (requestIndex !== -1) {\n                  let newRequestStatus = this.appRequests[requestIndex].status; // Keep current if no direct mapping\n                  if (updatedWorkflow.status === WorkflowStatus.Approved) {\n                    newRequestStatus = 'Approved'; // Assuming 'Approved' is a valid AppRequest status\n                  } else if (updatedWorkflow.status === WorkflowStatus.Rejected) {\n                    newRequestStatus = 'Rejected'; // Assuming 'Rejected' is a valid AppRequest status\n                  }\n                  // Add more mappings if needed (e.g. Completed -> Approved, etc.)\n                  if (this.appRequests[requestIndex].status !== newRequestStatus && (newRequestStatus === 'Approved' || newRequestStatus === 'Rejected')) {\n                    this.appRequests[requestIndex].status = newRequestStatus;\n                  }\n                }\n              }\n              // Optionally save this.workflows if they were persisted (they are in-memory here)\n              return this.ok(updatedWorkflow); // Return the updated workflow\n            });\n          }\n        // AppRequests\n        case url.endsWith('/requests') && method === 'GET':\n          return this.authorize(headers, null, () => {\n            const currentAcc = this.currentAccount(headers);\n            if (!currentAcc) return this.unauthorized();\n            if (currentAcc.role === Role.Admin) return this.ok(this.appRequests);\n            const userRequests = this.appRequests.filter(r => {\n              const emp = this.employees.find(e => e.id === r.employeeId);\n              return emp && emp.userId === currentAcc.id;\n            });\n            return this.ok(userRequests);\n          });\n        case url.endsWith('/requests') && method === 'POST':\n          return this.authorize(headers, null, () => {\n            const currentAcc = this.currentAccount(headers);\n            if (!currentAcc || !currentAcc.employeeId) return this.error(\"User not linked to an employee or not authenticated.\", 400);\n            const newRequest = Object.assign(Object.assign({\n              id: this.nextAppRequestId++,\n              employeeId: currentAcc.employeeId\n            }, body), {\n              status: 'Pending'\n            });\n            this.appRequests.push(newRequest);\n            return this.ok(newRequest, 201);\n          });\n        case url.match(/\\/requests\\/(\\d+)$/) && method === 'GET':\n          {\n            const id = this.idFromUrl(url);\n            return this.authorize(headers, null, () => {\n              const currentAcc = this.currentAccount(headers);\n              if (!currentAcc) return this.unauthorized();\n              const request = this.appRequests.find(r => r.id === id);\n              if (!request) {\n                return this.error(`Request with id ${id} not found`, 404);\n              }\n              // Authorization check: Admin can see any, user can only see their own\n              if (currentAcc.role !== Role.Admin) {\n                const employee = this.employees.find(e => e.id === request.employeeId);\n                if (!employee || employee.userId !== currentAcc.id) {\n                  return this.unauthorized(\"You are not authorized to view this request.\");\n                }\n              }\n              return this.ok(request);\n            });\n          }\n        default:\n          // return next.handle(request); // If you have a real backend\n          return throwError(() => new HttpErrorResponse({\n            status: 404,\n            error: {\n              message: `Fake backend: Route not found for ${method} ${url}`\n            }\n          }));\n      }\n    }\n    // --- ACCOUNT MANAGEMENT METHODS ---\n    authenticate(body, headers) {\n      const {\n        email,\n        password\n      } = body;\n      const account = this.accounts.find(x => x.email === email);\n      if (!account) return this.error('Email does not exist', 400);\n      if (!account.isVerified) {\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          this.alertService.info(`<h4>Verification Email</h4><p>Please click the link to verify: <a href=\"${verifyUrl}\">${verifyUrl}</a></p>`, {\n            autoClose: false\n          });\n        }, 1000);\n        return this.error('Email is not yet verified.', 400);\n      }\n      if (account.password !== password) return this.error('Incorrect password.', 400);\n      if (account.status !== 'Active') return this.error('Account is inactive. Please contact support.', 400);\n      account.refreshTokens = account.refreshTokens || [];\n      account.refreshTokens.push(this.generateRefreshTokenForCookie());\n      this.saveAccounts();\n      const accountDetails = this.basicDetails(account);\n      return this.ok(Object.assign(Object.assign({}, accountDetails), {\n        jwtToken: this.generateJwtToken(account)\n      }));\n    }\n    refreshToken(body, headers) {\n      const requestRefreshTokenFromBody = body.refreshToken;\n      const requestRefreshTokenFromCookie = this.getRefreshTokenFromCookie();\n      const requestRefreshToken = requestRefreshTokenFromBody || requestRefreshTokenFromCookie;\n      if (!requestRefreshToken) return this.unauthorized('Refresh token missing.');\n      const account = this.accounts.find(x => x.refreshTokens && x.refreshTokens.includes(requestRefreshToken));\n      if (!account) return this.unauthorized('Invalid or expired refresh token.');\n      account.refreshTokens = account.refreshTokens.filter(x => x !== requestRefreshToken);\n      account.refreshTokens.push(this.generateRefreshTokenForCookie());\n      this.saveAccounts();\n      return this.ok(Object.assign(Object.assign({}, this.basicDetails(account)), {\n        jwtToken: this.generateJwtToken(account)\n      }));\n    }\n    revokeToken(body, headers) {\n      const currentAcc = this.currentAccount(headers);\n      if (!currentAcc) return this.unauthorized();\n      const tokenToRevoke = body.token || this.getRefreshTokenFromCookie();\n      const account = this.accounts.find(x => x.id === currentAcc.id);\n      if (account && account.refreshTokens && tokenToRevoke) {\n        account.refreshTokens = account.refreshTokens.filter(x => x !== tokenToRevoke);\n        this.saveAccounts();\n      }\n      if (tokenToRevoke && tokenToRevoke === this.getRefreshTokenFromCookie()) {\n        this.clearRefreshTokenCookie();\n      }\n      return this.ok({\n        message: 'Token revoked successfully.'\n      });\n    }\n    sortWorkflowsInternal(workflows) {\n      return [...workflows].sort((a, b) => {\n        const dateA = new Date(a.datetimecreated || 0).getTime();\n        const dateB = new Date(b.datetimecreated || 0).getTime();\n        return dateB - dateA; // Descending\n      });\n    }\n\n    register(body) {\n      const newAccountData = body;\n      if (!newAccountData.email || !newAccountData.password) {\n        return this.error('Email and password are required.', 400);\n      }\n      if (this.accounts.find(x => x.email === newAccountData.email)) {\n        setTimeout(() => {\n          this.alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${newAccountData.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n            autoclose: false\n          });\n        }, 1000);\n        return this.error(`Email '${newAccountData.email}' is already registered.`, 400);\n      }\n      const newAccount = {\n        id: this.newAccountId(),\n        email: newAccountData.email,\n        password: newAccountData.password,\n        role: this.accounts.length === 0 ? Role.Admin : Role.User,\n        firstName: newAccountData.firstName || '',\n        lastName: newAccountData.lastName || '',\n        title: newAccountData.title || '',\n        status: this.accounts.length === 0 ? 'Active' : 'Inactive',\n        dateCreated: new Date().toISOString(),\n        verificationToken: `${Date.now()}-${Math.random().toString(36).substring(2, 10)}`,\n        isVerified: this.accounts.length === 0,\n        refreshTokens: []\n      };\n      this.accounts.push(newAccount);\n      this.saveAccounts();\n      if (!newAccount.isVerified) {\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${newAccount.verificationToken}`;\n          this.alertService.info(`<h4>Verification Email</h4><p>Thanks for registering! Please click the link to verify your email: <a href=\"${verifyUrl}\">${verifyUrl}</a></p><div><strong>NOTE:</strong> This is a fake email.</div>`, {\n            autoClose: false\n          });\n        }, 1000);\n      }\n      return this.ok({\n        message: 'Registration successful. Please check your email to verify your account if required.'\n      }, 201);\n    }\n    verifyEmail(body) {\n      const {\n        token\n      } = body;\n      if (!token) return this.error('Verification token is required.', 400);\n      const account = this.accounts.find(x => x.verificationToken === token);\n      if (!account) return this.error('Verification failed.', 400);\n      if (account.isVerified) return this.ok({\n        message: 'Email already verified.'\n      });\n      account.isVerified = true;\n      account.status = 'Active';\n      delete account.verificationToken;\n      this.saveAccounts();\n      return this.ok({\n        message: 'Email verified successfully. You can now login.'\n      });\n    }\n    forgotPassword(body) {\n      const {\n        email\n      } = body;\n      if (!email) return this.error('Email is required.', 400);\n      const account = this.accounts.find(x => x.email === email);\n      if (account) {\n        account.resetToken = `${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;\n        account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000);\n        this.saveAccounts();\n        setTimeout(() => {\n          const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\n          this.alertService.info(`<h4>Reset Password Email</h4><p>Please click the link to reset your password: <a href=\"${resetUrl}\">${resetUrl}</a></p><p>The link will be valid for 24 hours.</p><div><strong>NOTE:</strong> This is a fake email.</div>`, {\n            autoClose: false\n          });\n        }, 1000);\n      }\n      return this.ok({\n        message: 'If your email address is registered, you will receive a password reset link.'\n      });\n    }\n    validateResetToken(body) {\n      const {\n        token\n      } = body;\n      if (!token) return this.error('Reset token is required.', 400);\n      const account = this.accounts.find(x => x.resetToken === token && x.resetTokenExpires && new Date(x.resetTokenExpires) > new Date());\n      return account ? this.ok({\n        message: 'Token is valid.'\n      }) : this.error('Invalid or expired reset token.', 400);\n    }\n    resetPassword(body) {\n      const {\n        token,\n        password\n      } = body;\n      if (!token || !password) return this.error('Token and new password are required.', 400);\n      const account = this.accounts.find(x => x.resetToken === token && x.resetTokenExpires && new Date(x.resetTokenExpires) > new Date());\n      if (!account) return this.error('Invalid or expired reset token.', 400);\n      account.password = password;\n      account.isVerified = true;\n      account.status = 'Active';\n      delete account.resetToken;\n      delete account.resetTokenExpires;\n      this.saveAccounts();\n      return this.ok({\n        message: 'Password has been reset successfully. You can now login.'\n      });\n    }\n    getAccounts(headers) {\n      return this.authorize(headers, Role.Admin, () => {\n        return this.ok(this.accounts.map(acc => this.basicDetails(acc)));\n      });\n    }\n    getAccountById(id, headers) {\n      const currentAcc = this.currentAccount(headers);\n      if (!currentAcc) return this.unauthorized();\n      const account = this.accounts.find(x => x.id === id);\n      if (!account) return this.error('Account not found', 404);\n      if (currentAcc.role !== Role.Admin && currentAcc.id !== account.id) {\n        return this.unauthorized(\"You are not authorized to view this account.\");\n      }\n      return this.ok(this.basicDetails(account));\n    }\n    createAccount(body, headers) {\n      return this.authorize(headers, Role.Admin, () => {\n        const newAccountData = body;\n        if (!newAccountData.email || !newAccountData.password || !newAccountData.role) {\n          return this.error('Email, password, and role are required for new account creation.', 400);\n        }\n        if (this.accounts.find(x => x.email === newAccountData.email)) {\n          return this.error(`Email '${newAccountData.email}' is already registered`, 400);\n        }\n        const newAccount = {\n          id: this.newAccountId(),\n          email: newAccountData.email,\n          password: newAccountData.password,\n          role: newAccountData.role,\n          firstName: newAccountData.firstName || '',\n          lastName: newAccountData.lastName || '',\n          title: newAccountData.title || '',\n          dateCreated: new Date().toISOString(),\n          isVerified: true,\n          status: 'Active',\n          refreshTokens: [],\n          employeeId: newAccountData.employeeId\n        };\n        this.accounts.push(newAccount);\n        this.saveAccounts();\n        return this.ok(this.basicDetails(newAccount), 201);\n      });\n    }\n    updateAccount(id, body, headers) {\n      const currentAcc = this.currentAccount(headers);\n      if (!currentAcc) return this.unauthorized();\n      const accountIndex = this.accounts.findIndex(x => x.id === id);\n      if (accountIndex === -1) return this.error('Account not found', 404);\n      const accountToUpdate = this.accounts[accountIndex];\n      if (currentAcc.role !== Role.Admin && currentAcc.id !== accountToUpdate.id) {\n        return this.unauthorized(\"You are not authorized to update this account.\");\n      }\n      const updateData = Object.assign({}, body);\n      if (currentAcc.id === accountToUpdate.id && currentAcc.role !== Role.Admin && updateData.role && updateData.role !== accountToUpdate.role) {\n        return this.error(\"You cannot change your own role.\", 403);\n      }\n      if (updateData.password) {\n        accountToUpdate.password = updateData.password;\n      }\n      ['firstName', 'lastName', 'title', 'email', 'role', 'status', 'employeeId'].forEach(field => {\n        if (updateData[field] !== undefined) {\n          accountToUpdate[field] = updateData[field];\n        }\n      });\n      accountToUpdate.dateUpdated = new Date().toISOString();\n      this.accounts[accountIndex] = accountToUpdate;\n      this.saveAccounts();\n      return this.ok(this.basicDetails(accountToUpdate));\n    }\n    deleteAccount(id, headers) {\n      const currentAcc = this.currentAccount(headers);\n      if (!currentAcc) return this.unauthorized();\n      const accountIndex = this.accounts.findIndex(x => x.id === id);\n      if (accountIndex === -1) return this.error('Account not found', 404);\n      const accountToDelete = this.accounts[accountIndex];\n      if (currentAcc.role !== Role.Admin && currentAcc.id !== accountToDelete.id) {\n        return this.unauthorized(\"You are not authorized to delete this account.\");\n      }\n      if (accountToDelete.id === currentAcc.id && accountToDelete.role === Role.Admin && this.accounts.filter(a => a.role === Role.Admin).length <= 1) {\n        return this.error(\"Cannot delete the last admin account.\", 400);\n      }\n      this.accounts.splice(accountIndex, 1);\n      this.saveAccounts();\n      if (accountToDelete.id === currentAcc.id) {\n        this.clearRefreshTokenCookie();\n      }\n      return this.ok({\n        message: 'Account deleted successfully.'\n      });\n    }\n    // --- HELPER METHODS ---\n    ok(body, status = 200) {\n      return of(new HttpResponse({\n        status,\n        body\n      }));\n    }\n    error(message, status = 400) {\n      return throwError(() => new HttpErrorResponse({\n        error: {\n          message\n        },\n        status\n      }));\n    }\n    unauthorized(message = 'Unauthorized') {\n      return throwError(() => new HttpErrorResponse({\n        status: 401,\n        error: {\n          message\n        }\n      }));\n    }\n    basicDetails(account) {\n      const {\n        id,\n        title,\n        firstName,\n        lastName,\n        email,\n        role,\n        dateCreated,\n        dateUpdated,\n        isVerified,\n        status,\n        employeeId\n      } = account;\n      return {\n        id,\n        title,\n        firstName,\n        lastName,\n        email,\n        role,\n        dateCreated,\n        dateUpdated,\n        isVerified,\n        status,\n        employeeId\n      };\n    }\n    currentAccount(headers) {\n      const authHeader = headers.get('Authorization');\n      if (!authHeader || !authHeader.startsWith('Bearer ')) return undefined;\n      const token = authHeader.substring(7);\n      try {\n        const payloadB64 = token.split('.')[1];\n        if (!payloadB64) return undefined;\n        const tokenPayload = JSON.parse(atob(payloadB64));\n        if (Date.now() >= tokenPayload.exp * 1000) {\n          console.warn(\"Fake backend: JWT token expired\");\n          this.clearRefreshTokenCookie();\n          return undefined;\n        }\n        return this.accounts.find(x => x.id === tokenPayload.id);\n      } catch (e) {\n        console.error(\"Fake backend: Error parsing JWT token\", e);\n        return undefined;\n      }\n    }\n    authorize(headers, requiredRole, successCallback) {\n      const account = this.currentAccount(headers);\n      if (!account) {\n        return this.unauthorized('Missing or invalid authentication token.');\n      }\n      if (requiredRole && account.role !== requiredRole) {\n        return throwError(() => new HttpErrorResponse({\n          status: 403,\n          error: {\n            message: 'Forbidden - Insufficient permissions'\n          }\n        }));\n      }\n      return successCallback();\n    }\n    idFromUrl(url) {\n      const match = url.match(/\\/(\\d+)$/);\n      return match ? parseInt(match[1], 10) : -1;\n    }\n    newAccountId() {\n      return this.accounts.length ? Math.max(0, ...this.accounts.map(x => x.id)) + 1 : 1;\n    }\n    saveAccounts() {\n      localStorage.setItem(accountsKey, JSON.stringify(this.accounts));\n    }\n    generateJwtToken(account) {\n      const payload = {\n        id: account.id,\n        role: account.role,\n        email: account.email,\n        exp: Math.floor(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000)\n      };\n      const header = btoa(JSON.stringify({\n        alg: 'HS256',\n        typ: 'JWT'\n      }));\n      const encodedPayload = btoa(JSON.stringify(payload));\n      return `${header}.${encodedPayload}.fake-signature-for-demo-only`;\n    }\n    generateRefreshTokenForCookie() {\n      const token = `${Date.now()}-${Math.random().toString(36).substring(2, 12)}`;\n      const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();\n      if (typeof document !== 'undefined') {\n        document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/; SameSite=Lax`;\n      }\n      return token;\n    }\n    getRefreshTokenFromCookie() {\n      if (typeof document === 'undefined') return undefined;\n      const cookies = document.cookie.split(';');\n      for (let cookie of cookies) {\n        const [name, value] = cookie.trim().split('=');\n        if (name === 'fakeRefreshToken') {\n          return value;\n        }\n      }\n      return undefined;\n    }\n    clearRefreshTokenCookie() {\n      if (typeof document !== 'undefined') {\n        document.cookie = 'fakeRefreshToken=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; SameSite=Lax';\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","HttpErrorResponse","of","throwError","delay","mergeMap","materialize","dematerialize","Role","WorkflowStatus","accountsKey","FakeBackendInterceptor","constructor","alertService","id","employeeId","userId","email","position","departmentId","hireDate","status","name","description","employeeCount","type","details","task","datetimecreated","Date","now","toISOString","requestItems","quantity","employees","length","Math","max","map","e","departments","d","workflows","w","appRequests","r","accounts","JSON","parse","localStorage","getItem","push","title","password","role","Admin","isVerified","refreshTokens","dateCreated","firstName","lastName","User","saveAccounts","intercept","request","next","url","method","headers","body","pipe","handleRoute","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","forgotPassword","validateResetToken","resetPassword","getAccounts","match","getAccountById","idFromUrl","createAccount","updateAccount","deleteAccount","authorize","usersToReturn","acc","basicDetails","ok","newEmployee","nextEmployeeId","dept","find","employee","error","console","log","stringify","employeeIndex","findIndex","oldEmployeeData","updatedEmployee","targetDepartmentIdFromBody","undefined","parseInt","String","isNaN","oldDept","newDept","deletedEmployee","splice","message","idMatch","oldDepartmentId","newDepartmentId","nextWorkflowId","newDepartment","nextDepartmentId","department","deptIndex","filter","employeeIdFromPath","newWorkflow","urlWithParams","URL","employeeIdFromQueryParam","searchParams","get","filteredWorkflows","sortedWorkflows","sortWorkflowsInternal","requestBody","workflowIndex","updatedWorkflow","originatingRequestId","requestIndex","newRequestStatus","Approved","Rejected","currentAcc","currentAccount","unauthorized","userRequests","emp","newRequest","nextAppRequestId","account","x","setTimeout","verifyUrl","location","origin","verificationToken","info","autoClose","generateRefreshTokenForCookie","accountDetails","jwtToken","generateJwtToken","requestRefreshTokenFromBody","requestRefreshTokenFromCookie","getRefreshTokenFromCookie","requestRefreshToken","includes","tokenToRevoke","token","clearRefreshTokenCookie","sort","a","b","dateA","getTime","dateB","newAccountData","autoclose","newAccount","newAccountId","random","toString","substring","resetToken","resetTokenExpires","resetUrl","accountIndex","accountToUpdate","updateData","Object","forEach","field","dateUpdated","accountToDelete","authHeader","startsWith","payloadB64","split","tokenPayload","atob","exp","warn","requiredRole","successCallback","setItem","payload","floor","header","btoa","alg","typ","encodedPayload","expires","toUTCString","document","cookie","cookies","value","trim","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n    HttpRequest,\r\n    HttpResponse,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpInterceptor,\r\n    HTTP_INTERCEPTORS,\r\n    HttpErrorResponse,\r\n    HttpHeaders\r\n} from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\r\n\r\nimport { AlertService } from '@app/_services'; // Assuming this path is correct\r\nimport { Role } from '@app/_models';        // Assuming this path is correct\r\nimport { WorkflowStatus } from '@app/_models/workflow';\r\n\r\n// --- Interfaces - Combining and refining ---\r\ninterface Account {\r\n    id: number;\r\n    title: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    email: string;\r\n    password?: string; // Should be hashed in a real app, stored as-is for fake backend comparison\r\n    role: Role | string;\r\n    employeeId?: number; // Link to an employee\r\n    jwtToken?: string; // For the access token (typically not stored with user, but for response)\r\n    dateCreated?: string;\r\n    dateUpdated?: string;\r\n    isVerified?: boolean;\r\n    verificationToken?: string;\r\n    resetToken?: string;\r\n    resetTokenExpires?: Date | string; // Store as ISO string or Date object\r\n    refreshTokens?: string[]; // Array of active refresh tokens\r\n    status?: 'Active' | 'Inactive' | string;\r\n}\r\n\r\ninterface Employee {\r\n    id: number;\r\n    employeeId: string; // The 'EMP001' style ID\r\n    userId: number; // This should link to Account.id\r\n    email: string; // Optional: If you want to link email to employee\r\n    position: string;\r\n    departmentId: number;\r\n    hireDate: string;\r\n    status: string;\r\n}\r\n\r\ninterface Department {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    employeeCount: number;\r\n}\r\n\r\ninterface Workflow {\r\n    originatingRequestId?: number;\r\n    id: number;\r\n    employeeId: number;\r\n    type: string;\r\n    details: any;\r\n    status: string;\r\n    // Optional: Add a creation timestamp if you want to sort by it\r\n    datetimecreated?: string; // Example from a previous context if needed for sorting\r\n}\r\n\r\nexport interface AppRequest {\r\n    id?: number;\r\n    employeeId: number | null; // Employee who submitted the request\r\n    type: string;\r\n    requestItems: { name: string; quantity: number }[];\r\n    status?: 'Pending Approval' | 'Approved' | 'Rejected' | 'Pending' | string; // Make this more specific\r\n    workflowId?: number; // Optional: to link directly to the approval workflow ID\r\n}\r\n\r\nexport interface EmployeeForDropdown { // Simple interface for the dropdown\r\n    id: number;\r\n    employeeId: string; // The display ID like EMP001\r\n}\r\n\r\n// Key for localStorage\r\nconst accountsKey = 'app-hr-tool-accounts'; // Made key more specific\r\n\r\n@Injectable()\r\nexport class FakeBackendInterceptor implements HttpInterceptor {\r\n    // --- Data Management ---\r\n    private accounts: Account[];\r\n\r\n    // In-memory for other entities\r\n    private employees: Employee[] = [\r\n        { id: 1, employeeId: 'EMP001', userId: 1, email: 'admin@example.com', position: 'Developer', departmentId: 1, hireDate: '2025-01-01', status: 'Active' },\r\n        { id: 2, employeeId: 'EMP002', userId: 2, email: 'user@example.com', position: 'Designer', departmentId: 2, hireDate: '2025-02-01', status: 'Active' }\r\n    ];\r\n    private departments: Department[] = [\r\n        { id: 1, name: 'Engineering', description: 'Software development team', employeeCount: 1 },\r\n        { id: 2, name: 'Marketing', description: 'Marketing team', employeeCount: 1 }\r\n    ];\r\n    private workflows: Workflow[] = [\r\n        { id: 1, employeeId: 1, type: 'Onboarding', details: { task: 'Setup workstation' }, status: 'Pending', datetimecreated: new Date(Date.now() - 100000).toISOString() },\r\n        { id: 2, employeeId: 2, type: 'Offboarding', details: { task: 'Return equipment' }, status: 'Completed', datetimecreated: new Date(Date.now() - 200000).toISOString() }\r\n    ];\r\n    private appRequests: AppRequest[] = [\r\n        { id: 1, employeeId: 2, type: 'Equipment', requestItems: [{ name: 'Laptop', quantity: 1 }], status: 'Pending' }\r\n    ];\r\n\r\n    // ID Generators for in-memory entities\r\n    private nextEmployeeId = this.employees.length > 0 ? Math.max(0, ...this.employees.map(e => e.id)) + 1 : 1;\r\n    private nextDepartmentId = this.departments.length > 0 ? Math.max(0, ...this.departments.map(d => d.id)) + 1 : 1;\r\n    private nextWorkflowId = this.workflows.length > 0 ? Math.max(0, ...this.workflows.map(w => w.id)) + 1 : 1;\r\n    private nextAppRequestId = this.appRequests.length > 0 ? Math.max(0, ...this.appRequests.map(r => r.id)) + 1 : 1;\r\n\r\n    constructor(private alertService: AlertService) {\r\n        this.accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\r\n        // Ensure default admin/user if local storage is empty or new\r\n        if (this.accounts.length === 0) {\r\n            this.accounts.push({\r\n                id: 1, title: 'Mr', email: 'admin@example.com', password: 'admin', role: Role.Admin, employeeId: 1,\r\n                isVerified: true, status: 'Active', refreshTokens: [], dateCreated: new Date().toISOString(),\r\n                firstName: 'Admin', lastName: 'User'\r\n            });\r\n            this.accounts.push({\r\n                id: 2, title: 'Mr', email: 'user@example.com', password: 'user', role: Role.User, employeeId: 2,\r\n                isVerified: true, status: 'Active', refreshTokens: [], dateCreated: new Date().toISOString(),\r\n                firstName: 'Normal', lastName: 'User'\r\n            });\r\n            this.saveAccounts();\r\n        }\r\n    }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const { url, method, headers, body } = request;\r\n\r\n        return of(null)\r\n            .pipe(mergeMap(() => this.handleRoute(url, method, headers as HttpHeaders, body, next)))\r\n            .pipe(materialize())\r\n            .pipe(delay(500))\r\n            .pipe(dematerialize());\r\n    }\r\n\r\n    private handleRoute(url: string, method: string, headers: HttpHeaders, body: any, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // --- ACCOUNT MANAGEMENT ROUTES ---\r\n        switch (true) {\r\n            case url.endsWith('/accounts/authenticate') && method === 'POST':\r\n                return this.authenticate(body, headers);\r\n            case url.endsWith('/accounts/refresh-token') && method === 'POST':\r\n                return this.refreshToken(body, headers);\r\n            case url.endsWith('/accounts/revoke-token') && method === 'POST':\r\n                return this.revokeToken(body, headers);\r\n            case url.endsWith('/accounts/register') && method === 'POST':\r\n                return this.register(body);\r\n            case url.endsWith('/accounts/verify-email') && method === 'POST':\r\n                return this.verifyEmail(body);\r\n            case url.endsWith('/accounts/forgot-password') && method === 'POST':\r\n                return this.forgotPassword(body);\r\n            case url.endsWith('/accounts/validate-reset-token') && method === 'POST':\r\n                return this.validateResetToken(body);\r\n            case url.endsWith('/accounts/reset-password') && method === 'POST':\r\n                return this.resetPassword(body);\r\n            case url.endsWith('/accounts') && method === 'GET':\r\n                return this.getAccounts(headers);\r\n            case url.match(/\\/accounts\\/(\\d+)$/) && method === 'GET':\r\n                return this.getAccountById(this.idFromUrl(url), headers);\r\n            case url.endsWith('/accounts') && method === 'POST':\r\n                return this.createAccount(body, headers);\r\n            case url.match(/\\/accounts\\/(\\d+)$/) && method === 'PUT':\r\n                return this.updateAccount(this.idFromUrl(url), body, headers);\r\n            case url.match(/\\/accounts\\/(\\d+)$/) && method === 'DELETE':\r\n                return this.deleteAccount(this.idFromUrl(url), headers);\r\n\r\n            // --- OTHER ENTITY ROUTES ---\r\n            // Employees\r\n            case url.endsWith('/accounts/users') && method === 'GET':\r\n                return this.authorize(headers, null, () => {\r\n                    const usersToReturn = this.accounts.map(acc => this.basicDetails(acc));\r\n                    return this.ok(usersToReturn);\r\n                });\r\n            case url.endsWith('/employees') && method === 'GET':\r\n                return this.authorize(headers, null, () => this.ok(this.employees));\r\n            case url.endsWith('/employees') && method === 'POST':\r\n                return this.authorize(headers, Role.Admin, () => {\r\n                    const newEmployee: Employee = { id: this.nextEmployeeId++, ...body };\r\n                    this.employees.push(newEmployee);\r\n                    const dept = this.departments.find(d => d.id === newEmployee.departmentId);\r\n                    if (dept) dept.employeeCount++;\r\n                    return this.ok(newEmployee, 201);\r\n                });\r\n            case url.match(/\\/employees\\/(\\d+)$/) && method === 'GET': {\r\n                const id = this.idFromUrl(url);\r\n                return this.authorize(headers, null, () => {\r\n                    const employee = this.employees.find(e => e.id === id);\r\n                    return employee ? this.ok(employee) : this.error('Employee not found', 404);\r\n                });\r\n            }\r\n            // In FakeBackendInterceptor, within the handleRoute method:\r\n            case url.match(/\\/employees\\/(\\d+)$/) && method === 'PUT': {\r\n                const id = this.idFromUrl(url); // This is the employee's ID (number)\r\n                console.log(`PUT /employees/${id} - Request Body:`, JSON.stringify(body));\r\n                return this.authorize(headers, Role.Admin, () => {\r\n                    const employeeIndex = this.employees.findIndex(e => e.id === id);\r\n                    if (employeeIndex === -1) return this.error('Employee not found', 404);\r\n\r\n                    const oldEmployeeData = this.employees[employeeIndex];\r\n                    // Create updatedEmployee, ensuring body properties are merged\r\n                    const updatedEmployee = { ...oldEmployeeData, ...body, id };\r\n\r\n                    // Ensure the departmentId from the body is treated as a number for comparison\r\n                    const targetDepartmentIdFromBody = updatedEmployee.departmentId !== undefined && updatedEmployee.departmentId !== null\r\n                        ? parseInt(String(updatedEmployee.departmentId), 10)\r\n                        : undefined;\r\n\r\n                    // Update departmentId on the employee object IF it was provided in the body\r\n                    if (targetDepartmentIdFromBody !== undefined && !isNaN(targetDepartmentIdFromBody)) {\r\n                        updatedEmployee.departmentId = targetDepartmentIdFromBody;\r\n                    }\r\n\r\n\r\n                    if (oldEmployeeData.departmentId !== updatedEmployee.departmentId) {\r\n                        const oldDept = this.departments.find(d => d.id === oldEmployeeData.departmentId);\r\n                        if (oldDept) oldDept.employeeCount = Math.max(0, oldDept.employeeCount - 1);\r\n\r\n                        // Now updatedEmployee.departmentId should be a number if it was valid\r\n                        const newDept = this.departments.find(d => d.id === updatedEmployee.departmentId);\r\n                        if (newDept) {\r\n                            newDept.employeeCount++;\r\n                        } else if (updatedEmployee.departmentId !== oldEmployeeData.departmentId) {\r\n                            // Only error if a new, non-existent departmentId was attempted\r\n                            return this.error(`Target department with id '${updatedEmployee.departmentId}' not found`, 400);\r\n                        }\r\n                    }\r\n\r\n                    this.employees[employeeIndex] = updatedEmployee;\r\n                    return this.ok(this.employees[employeeIndex]);\r\n                });\r\n            }\r\n            case url.match(/\\/employees\\/(\\d+)$/) && method === 'DELETE': {\r\n                const id = this.idFromUrl(url);\r\n                return this.authorize(headers, Role.Admin, () => {\r\n                    const employeeIndex = this.employees.findIndex(e => e.id === id);\r\n                    if (employeeIndex === -1) return this.error('Employee not found', 404);\r\n                    const deletedEmployee = this.employees.splice(employeeIndex, 1)[0];\r\n                    if (deletedEmployee) {\r\n                        const dept = this.departments.find(d => d.id === deletedEmployee.departmentId);\r\n                        if (dept) dept.employeeCount = Math.max(0, dept.employeeCount - 1);\r\n                    }\r\n                    return this.ok({ message: 'Employee deleted' });\r\n                });\r\n            }\r\n            case url.match(/\\/employees\\/(\\d+)\\/transfer$/) && method === 'POST': {\r\n                const idMatch = url.match(/\\/employees\\/(\\d+)\\/transfer$/);\r\n                if (!idMatch) return this.error('Invalid URL for employee transfer', 400);\r\n                const id = parseInt(idMatch[1]);\r\n                return this.authorize(headers, Role.Admin, () => {\r\n                    const employee = this.employees.find(e => e.id === id);\r\n                    if (!employee) return this.error('Employee not found', 404);\r\n                    const oldDepartmentId = employee.departmentId;\r\n                    const newDepartmentId = body.departmentId;\r\n                    if (oldDepartmentId !== newDepartmentId) {\r\n                        const oldDept = this.departments.find(d => d.id === oldDepartmentId);\r\n                        if (oldDept) oldDept.employeeCount = Math.max(0, oldDept.employeeCount - 1);\r\n                        const newDept = this.departments.find(d => d.id === newDepartmentId);\r\n                        if (newDept) newDept.employeeCount++;\r\n                        else return this.error('Target department not found', 400);\r\n                    }\r\n                    employee.departmentId = newDepartmentId;\r\n                    this.workflows.push({\r\n                        id: this.nextWorkflowId++, employeeId: id, type: 'Transfer',\r\n                        details: body, status: 'Pending', datetimecreated: new Date().toISOString()\r\n                    });\r\n                    return this.ok({ message: 'Employee transferred successfully', employee });\r\n                });\r\n            }\r\n\r\n            // Departments\r\n            case url.endsWith('/departments') && method === 'GET':\r\n                return this.authorize(headers, null, () => this.ok(this.departments));\r\n            case url.endsWith('/departments') && method === 'POST':\r\n                return this.authorize(headers, Role.Admin, () => {\r\n                    const newDepartment: Department = { id: this.nextDepartmentId++, ...body, employeeCount: 0 };\r\n                    this.departments.push(newDepartment);\r\n                    return this.ok(newDepartment, 201);\r\n                });\r\n\r\n            case url.match(/\\/departments\\/(\\d+)$/) && method === 'GET': {\r\n                const id = this.idFromUrl(url);\r\n                return this.authorize(headers, null, () => { // Or specific role if needed\r\n                    const department = this.departments.find(d => d.id === id);\r\n                    return department ? this.ok(department) : this.error(`Department with id ${id} not found`, 404);\r\n                });\r\n            }\r\n            case url.match(/\\/departments\\/(\\d+)$/) && method === 'PUT': {\r\n                const id = this.idFromUrl(url);\r\n                return this.authorize(headers, Role.Admin, () => {\r\n                    const deptIndex = this.departments.findIndex(d => d.id === id);\r\n                    if (deptIndex === -1) return this.error('Department not found', 404);\r\n                    this.departments[deptIndex] = { ...this.departments[deptIndex], ...body, id };\r\n                    return this.ok(this.departments[deptIndex]);\r\n                });\r\n            }\r\n            case url.match(/\\/departments\\/(\\d+)$/) && method === 'DELETE': {\r\n                const id = this.idFromUrl(url);\r\n                return this.authorize(headers, Role.Admin, () => {\r\n                    const dept = this.departments.find(d => d.id === id);\r\n                    if (!dept) return this.error('Department not found', 404);\r\n                    if (dept.employeeCount > 0) return this.error('Cannot delete department with active employees.', 400);\r\n                    this.departments = this.departments.filter(d => d.id !== id);\r\n                    return this.ok({ message: 'Department deleted' });\r\n                });\r\n            }\r\n\r\n\r\n            // Workflows\r\n            case url.match(/\\/workflows\\/employee\\/(\\d+)$/) && method === 'GET': { // Keep this if you also want to support path params\r\n                const idMatch = url.match(/\\/workflows\\/employee\\/(\\d+)$/);\r\n                if (!idMatch) return this.error('Invalid URL for employee workflows', 400);\r\n                const employeeIdFromPath = parseInt(idMatch[1]);\r\n                return this.authorize(headers, null, () => {\r\n                    const workflows = this.workflows.filter(w => w.employeeId === employeeIdFromPath);\r\n                    return this.ok(workflows);\r\n                });\r\n            }\r\n            case url.endsWith('/workflows') && method === 'POST':\r\n                return this.authorize(headers, Role.Admin, () => {\r\n                    const newWorkflow: Workflow = {\r\n                        id: this.nextWorkflowId++,\r\n                        ...body,\r\n                        datetimecreated: new Date().toISOString() // Add timestamp on creation\r\n                    };\r\n                    this.workflows.push(newWorkflow);\r\n                    return this.ok(newWorkflow, 201);\r\n                });\r\n            // *** ADDED HANDLER FOR GET /workflows ***\r\n            case url.endsWith('/workflows') && method === 'GET': {\r\n                // Attempt to get employeeId from query parameters\r\n                const urlWithParams = new URL(url, 'http://localhost'); // Need full URL for URLSearchParams\r\n                const employeeIdFromQueryParam = urlWithParams.searchParams.get('employeeId');\r\n\r\n                if (employeeIdFromQueryParam) {\r\n                    // If employeeId query param exists, filter by it\r\n                    const employeeId = parseInt(employeeIdFromQueryParam, 10);\r\n                    if (isNaN(employeeId)) {\r\n                        return this.error('Invalid employeeId query parameter', 400);\r\n                    }\r\n                    return this.authorize(headers, null, () => { // Or role-specific\r\n                        const filteredWorkflows = this.workflows.filter(w => w.employeeId === employeeId);\r\n                        const sortedWorkflows = this.sortWorkflowsInternal(filteredWorkflows); // Use an internal sort helper\r\n                        return this.ok(sortedWorkflows);\r\n                    });\r\n                } else {\r\n                    // If no employeeId query param, return all (Admin only, or as per your rules)\r\n                    return this.authorize(headers, Role.Admin, () => {\r\n                        const sortedWorkflows = this.sortWorkflowsInternal(this.workflows);\r\n                        return this.ok(sortedWorkflows);\r\n                    });\r\n                }\r\n            }\r\n\r\n            case url.match(/\\/workflows\\/(\\d+)$/) && method === 'PUT': {\r\n                const id = this.idFromUrl(url); // Extracts the ID from the URL\r\n                const requestBody = body;       // The body of the PUT request, e.g., { status: 'Approved' } or full workflow object\r\n\r\n                return this.authorize(headers, Role.Admin, () => { // Or appropriate role for updating status\r\n                    const workflowIndex = this.workflows.findIndex(w => w.id === id);\r\n                    if (workflowIndex === -1) {\r\n                        return this.error(`Workflow with id ${id} not found`, 404);\r\n                    }\r\n\r\n                    // Update the workflow. If body only contains status, merge it.\r\n                    // If body contains other properties, they will also be updated.\r\n                    this.workflows[workflowIndex] = { ...this.workflows[workflowIndex], ...requestBody, id: id };\r\n\r\n                    const updatedWorkflow = this.workflows[workflowIndex];\r\n\r\n                    // **IMPORTANT: Synchronization with AppRequest status (if applicable)**\r\n                    if (updatedWorkflow.type === 'Request Approval' && updatedWorkflow.originatingRequestId) {\r\n                        const requestIndex = this.appRequests.findIndex(r => r.id === updatedWorkflow.originatingRequestId);\r\n                        if (requestIndex !== -1) {\r\n                            let newRequestStatus = this.appRequests[requestIndex].status; // Keep current if no direct mapping\r\n                            if (updatedWorkflow.status === WorkflowStatus.Approved) {\r\n                                newRequestStatus = 'Approved'; // Assuming 'Approved' is a valid AppRequest status\r\n                            } else if (updatedWorkflow.status === WorkflowStatus.Rejected) {\r\n                                newRequestStatus = 'Rejected'; // Assuming 'Rejected' is a valid AppRequest status\r\n                            }\r\n                            // Add more mappings if needed (e.g. Completed -> Approved, etc.)\r\n                            if (this.appRequests[requestIndex].status !== newRequestStatus &&\r\n                                (newRequestStatus === 'Approved' || newRequestStatus === 'Rejected')) {\r\n                                this.appRequests[requestIndex].status = newRequestStatus;\r\n                            }\r\n                        }\r\n                    }\r\n                    // Optionally save this.workflows if they were persisted (they are in-memory here)\r\n\r\n                    return this.ok(updatedWorkflow); // Return the updated workflow\r\n                });\r\n            }\r\n\r\n            // AppRequests\r\n            case url.endsWith('/requests') && method === 'GET':\r\n                return this.authorize(headers, null, () => {\r\n                    const currentAcc = this.currentAccount(headers);\r\n                    if (!currentAcc) return this.unauthorized();\r\n                    if (currentAcc.role === Role.Admin) return this.ok(this.appRequests);\r\n\r\n                    const userRequests = this.appRequests.filter(r => {\r\n                        const emp = this.employees.find(e => e.id === r.employeeId);\r\n                        return emp && emp.userId === currentAcc.id;\r\n                    });\r\n                    return this.ok(userRequests);\r\n                });\r\n            case url.endsWith('/requests') && method === 'POST':\r\n                return this.authorize(headers, null, () => {\r\n                    const currentAcc = this.currentAccount(headers);\r\n                    if (!currentAcc || !currentAcc.employeeId) return this.error(\"User not linked to an employee or not authenticated.\", 400);\r\n\r\n                    const newRequest: AppRequest = { id: this.nextAppRequestId++, employeeId: currentAcc.employeeId, ...body, status: 'Pending' };\r\n                    this.appRequests.push(newRequest);\r\n                    return this.ok(newRequest, 201);\r\n                });\r\n            case url.match(/\\/requests\\/(\\d+)$/) && method === 'GET': {\r\n                const id = this.idFromUrl(url);\r\n                return this.authorize(headers, null, () => { // Allow user to get their own, admin to get any\r\n                    const currentAcc = this.currentAccount(headers);\r\n                    if (!currentAcc) return this.unauthorized();\r\n\r\n                    const request = this.appRequests.find(r => r.id === id);\r\n                    if (!request) {\r\n                        return this.error(`Request with id ${id} not found`, 404);\r\n                    }\r\n\r\n                    // Authorization check: Admin can see any, user can only see their own\r\n                    if (currentAcc.role !== Role.Admin) {\r\n                        const employee = this.employees.find(e => e.id === request.employeeId);\r\n                        if (!employee || employee.userId !== currentAcc.id) {\r\n                            return this.unauthorized(\"You are not authorized to view this request.\");\r\n                        }\r\n                    }\r\n                    return this.ok(request);\r\n                });\r\n            }\r\n\r\n\r\n            default:\r\n                // return next.handle(request); // If you have a real backend\r\n                return throwError(() => new HttpErrorResponse({\r\n                    status: 404, error: { message: `Fake backend: Route not found for ${method} ${url}` }\r\n                }));\r\n        }\r\n    }\r\n\r\n    // --- ACCOUNT MANAGEMENT METHODS ---\r\n    private authenticate(body: any, headers: HttpHeaders): Observable<HttpEvent<any>> {\r\n        const { email, password } = body;\r\n        const account = this.accounts.find(x => x.email === email);\r\n\r\n        if (!account) return this.error('Email does not exist', 400);\r\n        if (!account.isVerified) {\r\n            setTimeout(() => {\r\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\r\n                this.alertService.info(`<h4>Verification Email</h4><p>Please click the link to verify: <a href=\"${verifyUrl}\">${verifyUrl}</a></p>`, { autoClose: false });\r\n            }, 1000);\r\n            return this.error('Email is not yet verified.', 400);\r\n        }\r\n        if (account.password !== password) return this.error('Incorrect password.', 400);\r\n        if (account.status !== 'Active') return this.error('Account is inactive. Please contact support.', 400);\r\n\r\n        account.refreshTokens = account.refreshTokens || [];\r\n        account.refreshTokens.push(this.generateRefreshTokenForCookie());\r\n        this.saveAccounts();\r\n\r\n        const accountDetails = this.basicDetails(account);\r\n        return this.ok({\r\n            ...accountDetails,\r\n            jwtToken: this.generateJwtToken(account)\r\n        });\r\n    }\r\n\r\n    private refreshToken(body: any, headers: HttpHeaders): Observable<HttpEvent<any>> {\r\n        const requestRefreshTokenFromBody = body.refreshToken;\r\n        const requestRefreshTokenFromCookie = this.getRefreshTokenFromCookie();\r\n        const requestRefreshToken = requestRefreshTokenFromBody || requestRefreshTokenFromCookie;\r\n\r\n\r\n        if (!requestRefreshToken) return this.unauthorized('Refresh token missing.');\r\n\r\n        const account = this.accounts.find(x => x.refreshTokens && x.refreshTokens.includes(requestRefreshToken));\r\n        if (!account) return this.unauthorized('Invalid or expired refresh token.');\r\n\r\n        account.refreshTokens = account.refreshTokens.filter(x => x !== requestRefreshToken);\r\n        account.refreshTokens.push(this.generateRefreshTokenForCookie());\r\n        this.saveAccounts();\r\n\r\n        return this.ok({\r\n            ...this.basicDetails(account),\r\n            jwtToken: this.generateJwtToken(account)\r\n        });\r\n    }\r\n\r\n    private revokeToken(body: any, headers: HttpHeaders): Observable<HttpEvent<any>> {\r\n        const currentAcc = this.currentAccount(headers);\r\n        if (!currentAcc) return this.unauthorized();\r\n\r\n        const tokenToRevoke = body.token || this.getRefreshTokenFromCookie();\r\n        const account = this.accounts.find(x => x.id === currentAcc.id);\r\n\r\n        if (account && account.refreshTokens && tokenToRevoke) {\r\n            account.refreshTokens = account.refreshTokens.filter(x => x !== tokenToRevoke);\r\n            this.saveAccounts();\r\n        }\r\n        if (tokenToRevoke && tokenToRevoke === this.getRefreshTokenFromCookie()) {\r\n            this.clearRefreshTokenCookie();\r\n        }\r\n        return this.ok({ message: 'Token revoked successfully.' });\r\n    }\r\n\r\n    private sortWorkflowsInternal(workflows: Workflow[]): Workflow[] {\r\n        return [...workflows].sort((a, b) => {\r\n            const dateA = new Date(a.datetimecreated || 0).getTime();\r\n            const dateB = new Date(b.datetimecreated || 0).getTime();\r\n            return dateB - dateA; // Descending\r\n        });\r\n    }\r\n\r\n    private register(body: any): Observable<HttpEvent<any>> {\r\n        const newAccountData = body as Partial<Account>;\r\n\r\n        if (!newAccountData.email || !newAccountData.password) {\r\n            return this.error('Email and password are required.', 400);\r\n        }\r\n        if (this.accounts.find(x => x.email === newAccountData.email)) {\r\n            setTimeout(() => {\r\n                this.alertService.info(`\r\n                        <h4>Email Already Registered</h4>\r\n                        <p>Your email ${newAccountData.email} is already registered.</p>\r\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\r\n                        <div>\r\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\r\n                        </div>\r\n                    `, { autoclose: false });\r\n            }, 1000);\r\n            return this.error(`Email '${newAccountData.email}' is already registered.`, 400);\r\n        }\r\n\r\n        const newAccount: Account = {\r\n            id: this.newAccountId(),\r\n            email: newAccountData.email,\r\n            password: newAccountData.password,\r\n            role: this.accounts.length === 0 ? Role.Admin : Role.User,\r\n            firstName: newAccountData.firstName || '',\r\n            lastName: newAccountData.lastName || '',\r\n            title: newAccountData.title || '',\r\n            status: this.accounts.length === 0 ? 'Active' : 'Inactive',\r\n            dateCreated: new Date().toISOString(),\r\n            verificationToken: `${Date.now()}-${Math.random().toString(36).substring(2, 10)}`,\r\n            isVerified: this.accounts.length === 0,\r\n            refreshTokens: []\r\n        };\r\n\r\n        this.accounts.push(newAccount);\r\n        this.saveAccounts();\r\n\r\n        if (!newAccount.isVerified) {\r\n            setTimeout(() => {\r\n                const verifyUrl = `${location.origin}/account/verify-email?token=${newAccount.verificationToken}`;\r\n                this.alertService.info(`<h4>Verification Email</h4><p>Thanks for registering! Please click the link to verify your email: <a href=\"${verifyUrl}\">${verifyUrl}</a></p><div><strong>NOTE:</strong> This is a fake email.</div>`, { autoClose: false });\r\n            }, 1000);\r\n        }\r\n        return this.ok({ message: 'Registration successful. Please check your email to verify your account if required.' }, 201);\r\n    }\r\n\r\n    private verifyEmail(body: any): Observable<HttpEvent<any>> {\r\n        const { token } = body;\r\n        if (!token) return this.error('Verification token is required.', 400);\r\n\r\n        const account = this.accounts.find(x => x.verificationToken === token);\r\n        if (!account) return this.error('Verification failed.', 400);\r\n        if (account.isVerified) return this.ok({ message: 'Email already verified.' });\r\n\r\n\r\n        account.isVerified = true;\r\n        account.status = 'Active';\r\n        delete account.verificationToken;\r\n        this.saveAccounts();\r\n        return this.ok({ message: 'Email verified successfully. You can now login.' });\r\n    }\r\n\r\n    private forgotPassword(body: any): Observable<HttpEvent<any>> {\r\n        const { email } = body;\r\n        if (!email) return this.error('Email is required.', 400);\r\n\r\n        const account = this.accounts.find(x => x.email === email);\r\n        if (account) {\r\n            account.resetToken = `${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;\r\n            account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000);\r\n            this.saveAccounts();\r\n            setTimeout(() => {\r\n                const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\r\n                this.alertService.info(`<h4>Reset Password Email</h4><p>Please click the link to reset your password: <a href=\"${resetUrl}\">${resetUrl}</a></p><p>The link will be valid for 24 hours.</p><div><strong>NOTE:</strong> This is a fake email.</div>`, { autoClose: false });\r\n            }, 1000);\r\n        }\r\n        return this.ok({ message: 'If your email address is registered, you will receive a password reset link.' });\r\n    }\r\n\r\n    private validateResetToken(body: any): Observable<HttpEvent<any>> {\r\n        const { token } = body;\r\n        if (!token) return this.error('Reset token is required.', 400);\r\n        const account = this.accounts.find(x => x.resetToken === token && x.resetTokenExpires && new Date(x.resetTokenExpires) > new Date());\r\n        return account ? this.ok({ message: 'Token is valid.' }) : this.error('Invalid or expired reset token.', 400);\r\n    }\r\n\r\n    private resetPassword(body: any): Observable<HttpEvent<any>> {\r\n        const { token, password } = body;\r\n        if (!token || !password) return this.error('Token and new password are required.', 400);\r\n\r\n        const account = this.accounts.find(x => x.resetToken === token && x.resetTokenExpires && new Date(x.resetTokenExpires) > new Date());\r\n        if (!account) return this.error('Invalid or expired reset token.', 400);\r\n\r\n        account.password = password;\r\n        account.isVerified = true;\r\n        account.status = 'Active';\r\n        delete account.resetToken;\r\n        delete account.resetTokenExpires;\r\n        this.saveAccounts();\r\n        return this.ok({ message: 'Password has been reset successfully. You can now login.' });\r\n    }\r\n\r\n    private getAccounts(headers: HttpHeaders): Observable<HttpEvent<any>> {\r\n        return this.authorize(headers, Role.Admin, () => {\r\n            return this.ok(this.accounts.map(acc => this.basicDetails(acc)));\r\n        });\r\n    }\r\n\r\n    private getAccountById(id: number, headers: HttpHeaders): Observable<HttpEvent<any>> {\r\n        const currentAcc = this.currentAccount(headers);\r\n        if (!currentAcc) return this.unauthorized();\r\n\r\n        const account = this.accounts.find(x => x.id === id);\r\n        if (!account) return this.error('Account not found', 404);\r\n\r\n        if (currentAcc.role !== Role.Admin && currentAcc.id !== account.id) {\r\n            return this.unauthorized(\"You are not authorized to view this account.\");\r\n        }\r\n        return this.ok(this.basicDetails(account));\r\n    }\r\n\r\n    private createAccount(body: any, headers: HttpHeaders): Observable<HttpEvent<any>> {\r\n        return this.authorize(headers, Role.Admin, () => {\r\n            const newAccountData = body as Partial<Account>;\r\n            if (!newAccountData.email || !newAccountData.password || !newAccountData.role) {\r\n                return this.error('Email, password, and role are required for new account creation.', 400);\r\n            }\r\n            if (this.accounts.find(x => x.email === newAccountData.email)) {\r\n                return this.error(`Email '${newAccountData.email}' is already registered`, 400);\r\n            }\r\n            const newAccount: Account = {\r\n                id: this.newAccountId(),\r\n                email: newAccountData.email,\r\n                password: newAccountData.password,\r\n                role: newAccountData.role,\r\n                firstName: newAccountData.firstName || '',\r\n                lastName: newAccountData.lastName || '',\r\n                title: newAccountData.title || '',\r\n                dateCreated: new Date().toISOString(),\r\n                isVerified: true,\r\n                status: 'Active',\r\n                refreshTokens: [],\r\n                employeeId: newAccountData.employeeId\r\n            };\r\n            this.accounts.push(newAccount);\r\n            this.saveAccounts();\r\n            return this.ok(this.basicDetails(newAccount), 201);\r\n        });\r\n    }\r\n\r\n    private updateAccount(id: number, body: any, headers: HttpHeaders): Observable<HttpEvent<any>> {\r\n        const currentAcc = this.currentAccount(headers);\r\n        if (!currentAcc) return this.unauthorized();\r\n\r\n        const accountIndex = this.accounts.findIndex(x => x.id === id);\r\n        if (accountIndex === -1) return this.error('Account not found', 404);\r\n        const accountToUpdate = this.accounts[accountIndex];\r\n\r\n        if (currentAcc.role !== Role.Admin && currentAcc.id !== accountToUpdate.id) {\r\n            return this.unauthorized(\"You are not authorized to update this account.\");\r\n        }\r\n\r\n        const updateData = { ...body } as Partial<Account>;\r\n        if (currentAcc.id === accountToUpdate.id && currentAcc.role !== Role.Admin && updateData.role && updateData.role !== accountToUpdate.role) {\r\n            return this.error(\"You cannot change your own role.\", 403);\r\n        }\r\n\r\n        if (updateData.password) {\r\n            accountToUpdate.password = updateData.password;\r\n        }\r\n        ['firstName', 'lastName', 'title', 'email', 'role', 'status', 'employeeId'].forEach(field => {\r\n            if (updateData[field] !== undefined) {\r\n                accountToUpdate[field] = updateData[field];\r\n            }\r\n        });\r\n\r\n        accountToUpdate.dateUpdated = new Date().toISOString();\r\n        this.accounts[accountIndex] = accountToUpdate;\r\n        this.saveAccounts();\r\n        return this.ok(this.basicDetails(accountToUpdate));\r\n    }\r\n\r\n    private deleteAccount(id: number, headers: HttpHeaders): Observable<HttpEvent<any>> {\r\n        const currentAcc = this.currentAccount(headers);\r\n        if (!currentAcc) return this.unauthorized();\r\n\r\n        const accountIndex = this.accounts.findIndex(x => x.id === id);\r\n        if (accountIndex === -1) return this.error('Account not found', 404);\r\n\r\n        const accountToDelete = this.accounts[accountIndex];\r\n        if (currentAcc.role !== Role.Admin && currentAcc.id !== accountToDelete.id) {\r\n            return this.unauthorized(\"You are not authorized to delete this account.\");\r\n        }\r\n        if (accountToDelete.id === currentAcc.id && accountToDelete.role === Role.Admin && this.accounts.filter(a => a.role === Role.Admin).length <= 1) {\r\n            return this.error(\"Cannot delete the last admin account.\", 400);\r\n        }\r\n\r\n        this.accounts.splice(accountIndex, 1);\r\n        this.saveAccounts();\r\n        if (accountToDelete.id === currentAcc.id) {\r\n            this.clearRefreshTokenCookie();\r\n        }\r\n        return this.ok({ message: 'Account deleted successfully.' });\r\n    }\r\n\r\n    // --- HELPER METHODS ---\r\n    private ok(body?: any, status = 200): Observable<HttpResponse<any>> {\r\n        return of(new HttpResponse({ status, body }));\r\n    }\r\n\r\n    private error(message: string, status = 400): Observable<HttpEvent<never>> {\r\n        return throwError(() => new HttpErrorResponse({ error: { message }, status }));\r\n    }\r\n\r\n    private unauthorized(message = 'Unauthorized'): Observable<HttpEvent<never>> {\r\n        return throwError(() => new HttpErrorResponse({ status: 401, error: { message } }));\r\n    }\r\n\r\n    private basicDetails(account: Account): Partial<Account> {\r\n        const { id, title, firstName, lastName, email, role, dateCreated, dateUpdated, isVerified, status, employeeId } = account;\r\n        return { id, title, firstName, lastName, email, role, dateCreated, dateUpdated, isVerified, status, employeeId };\r\n    }\r\n\r\n    private currentAccount(headers: HttpHeaders): Account | undefined {\r\n        const authHeader = headers.get('Authorization');\r\n        if (!authHeader || !authHeader.startsWith('Bearer ')) return undefined;\r\n\r\n        const token = authHeader.substring(7);\r\n        try {\r\n            const payloadB64 = token.split('.')[1];\r\n            if (!payloadB64) return undefined;\r\n\r\n            const tokenPayload = JSON.parse(atob(payloadB64));\r\n            if (Date.now() >= tokenPayload.exp * 1000) {\r\n                console.warn(\"Fake backend: JWT token expired\");\r\n                this.clearRefreshTokenCookie();\r\n                return undefined;\r\n            }\r\n            return this.accounts.find(x => x.id === tokenPayload.id);\r\n        } catch (e) {\r\n            console.error(\"Fake backend: Error parsing JWT token\", e);\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    private authorize(headers: HttpHeaders, requiredRole: Role | string | null, successCallback: () => Observable<HttpEvent<any>>): Observable<HttpEvent<any>> {\r\n        const account = this.currentAccount(headers);\r\n        if (!account) {\r\n            return this.unauthorized('Missing or invalid authentication token.');\r\n        }\r\n        if (requiredRole && account.role !== requiredRole) {\r\n            return throwError(() => new HttpErrorResponse({ status: 403, error: { message: 'Forbidden - Insufficient permissions' } }));\r\n        }\r\n        return successCallback();\r\n    }\r\n\r\n    private idFromUrl(url: string): number {\r\n        const match = url.match(/\\/(\\d+)$/);\r\n        return match ? parseInt(match[1], 10) : -1;\r\n    }\r\n\r\n    private newAccountId(): number {\r\n        return this.accounts.length ? Math.max(0, ...this.accounts.map(x => x.id)) + 1 : 1;\r\n    }\r\n\r\n    private saveAccounts(): void {\r\n        localStorage.setItem(accountsKey, JSON.stringify(this.accounts));\r\n    }\r\n\r\n    private generateJwtToken(account: Account): string {\r\n        const payload = {\r\n            id: account.id,\r\n            role: account.role,\r\n            email: account.email,\r\n            exp: Math.floor(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000),\r\n        };\r\n        const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));\r\n        const encodedPayload = btoa(JSON.stringify(payload));\r\n        return `${header}.${encodedPayload}.fake-signature-for-demo-only`;\r\n    }\r\n\r\n    private generateRefreshTokenForCookie(): string {\r\n        const token = `${Date.now()}-${Math.random().toString(36).substring(2, 12)}`;\r\n        const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();\r\n        if (typeof document !== 'undefined') {\r\n            document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/; SameSite=Lax`;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    private getRefreshTokenFromCookie(): string | undefined {\r\n        if (typeof document === 'undefined') return undefined;\r\n        const cookies = document.cookie.split(';');\r\n        for (let cookie of cookies) {\r\n            const [name, value] = cookie.trim().split('=');\r\n            if (name === 'fakeRefreshToken') {\r\n                return value;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private clearRefreshTokenCookie(): void {\r\n        if (typeof document !== 'undefined') {\r\n            document.cookie = 'fakeRefreshToken=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; SameSite=Lax';\r\n        }\r\n    }\r\n}\r\n\r\nexport const fakeBackendProvider = {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: FakeBackendInterceptor,\r\n    multi: true\r\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}