{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport { WorkflowStatus } from '@app/_models/workflow';\nimport { HttpErrorResponse } from '@angular/common/http';\nlet ListWorkflowComponent = class ListWorkflowComponent {\n  constructor(workflowService, alertService, accountService, employeeService, route, router) {\n    var _a;\n    this.workflowService = workflowService;\n    this.alertService = alertService;\n    this.accountService = accountService;\n    this.employeeService = employeeService;\n    this.route = route;\n    this.router = router;\n    this.workflows = [];\n    this.loading = false;\n    this.currentAccount = null;\n    this.isAdmin = false;\n    this.employeeId = null;\n    this.displayEmployeeId = null;\n    this.confirmMessage = '';\n    this.notFound = false;\n    this.pendingStatusChange = null;\n    this.employeeIdFromQuery = null;\n    this.employeeDetails = null;\n    this.statusUpdateWorkflow = null;\n    // Make enum available in template\n    this.WorkflowStatus = WorkflowStatus;\n    this.Role = Role;\n    this.subscriptions = [];\n    this.currentAccount = this.accountService.accountValue;\n    this.isAdmin = ((_a = this.currentAccount) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n  }\n  ngOnDestroy() {\n    // Unsubscribe from all subscriptions to prevent memory leaks\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n  ngOnInit() {\n    this.queryParamsSubscription = this.route.queryParams.subscribe(params => {\n      this.employeeIdFromQuery = params['employeeId'];\n      this.workflows = [];\n      this.employeeDetails = null;\n      if (this.employeeIdFromQuery) {\n        this.loadEmployeeDetails(this.employeeIdFromQuery);\n        this.loadWorkflowsForEmployee(this.employeeIdFromQuery);\n      } else if (this.isAdmin) {\n        this.loadAllWorkflows();\n      } else {\n        const currentEmployeeId = this.employeeId;\n        if (currentEmployeeId) {\n          this.employeeIdFromQuery = String(currentEmployeeId);\n          this.loadEmployeeDetails(String(currentEmployeeId));\n          this.loadWorkflowsForEmployee(String(currentEmployeeId));\n        } else {\n          this.alertService.info(\"No employee specified, and your account is not linked to an employee record.\");\n          this.loading = false;\n        }\n      }\n    });\n  }\n  loadEmployeeDetails(employeeId) {\n    this.employeeService.getById(employeeId).pipe(first()).subscribe({\n      next: employee => this.employeeDetails = employee,\n      error: err => this.alertService.error(this.formatError(err, 'Failed to load employee details'))\n    });\n  }\n  loadWorkflowsForEmployee(employeeId) {\n    this.loading = true;\n    this.workflowService.getByEmployeeId(employeeId).pipe(first()).subscribe({\n      next: workflows => {\n        this.workflows = this.sortWorkflows(workflows);\n        this.loading = false;\n      },\n      error: err => {\n        this.alertService.error(this.formatError(err, `Failed to load workflows for employee ${employeeId}`));\n        this.workflows = [];\n        this.loading = false;\n      }\n    });\n  }\n  getDetailsAsObject(details) {\n    return Object.entries(details || {}).map(([key, value]) => ({\n      key,\n      value\n    }));\n  }\n  loadAllWorkflows() {\n    this.loading = true;\n    this.workflowService.getAll().pipe(first()).subscribe({\n      next: workflows => {\n        this.workflows = this.sortWorkflows(workflows);\n        this.loading = false;\n      },\n      error: err => {\n        this.alertService.error(this.formatError(err, 'Failed to load all workflows'));\n        this.workflows = [];\n        this.loading = false;\n      }\n    });\n  }\n  sortWorkflows(workflows) {\n    return workflows.sort((a, b) => {\n      const dateA = new Date(a.datetimecreated || 0).getTime();\n      const dateB = new Date(b.datetimecreated || 0).getTime();\n      return dateB - dateA;\n    });\n  }\n  onStatusSelected(workflow, newStatus) {\n    console.log(`Status change selected for workflow ${workflow.id} to ${newStatus}`);\n    this.updateWorkflowStatus(workflow, newStatus);\n  }\n  updateWorkflowStatus(workflow, newStatus) {\n    if (!workflow || !workflow.id) return;\n    this.workflowService.changeStatus(workflow.id, newStatus).pipe(first()).subscribe({\n      next: updatedWorkflow => {\n        const index = this.workflows.findIndex(w => w.id === updatedWorkflow.id);\n        if (index !== -1) {\n          this.workflows[index] = Object.assign(Object.assign({}, this.workflows[index]), updatedWorkflow);\n        }\n        this.alertService.success('Workflow status updated successfully!');\n      },\n      error: err => {\n        this.alertService.error(this.formatError(err, 'Failed to update workflow status'));\n      }\n    });\n  }\n  openStatusChangeModal(id, status) {\n    const workflow = this.workflows.find(x => x.id === id);\n    if (!workflow) return;\n    this.pendingStatusChange = {\n      id,\n      status\n    };\n    this.confirmMessage = `Are you sure you want to mark this workflow ${status === WorkflowStatus.ForReviewing ? 'for review' : 'as completed'}?`;\n    this.confirmModal.show();\n  }\n  onStatusChangeConfirmed() {\n    if (!this.pendingStatusChange) return;\n    const {\n      id,\n      status\n    } = this.pendingStatusChange;\n    const workflow = this.workflows.find(x => x.id === id);\n    if (!workflow) return;\n    workflow.isUpdating = true;\n    this.workflowService.changeStatus(id, status).pipe(first()).subscribe({\n      next: () => {\n        workflow.status = status;\n        workflow.isUpdating = false;\n        this.alertService.success('Workflow status updated successfully');\n      },\n      error: error => {\n        this.alertService.error(error);\n        workflow.isUpdating = false;\n      }\n    });\n    this.pendingStatusChange = null;\n  }\n  deleteWorkflow(id) {\n    const workflow = this.workflows.find(x => x.id === id);\n    if (!workflow) return;\n    if (confirm('Are you sure you want to delete this workflow?')) {\n      workflow.isDeleting = true;\n      this.workflowService.delete(id).pipe(first()).subscribe({\n        next: () => {\n          this.workflows = this.workflows.filter(x => x.id !== id);\n          this.alertService.success('Workflow deleted successfully');\n        },\n        error: error => {\n          this.alertService.error(error);\n          workflow.isDeleting = false;\n        }\n      });\n    }\n  }\n  isPendingOrReviewing(status) {\n    return status === WorkflowStatus.Pending || status === WorkflowStatus.ForReviewing;\n  }\n  isCompletedOrApproved(status) {\n    return status === WorkflowStatus.Completed || status === WorkflowStatus.Approved;\n  }\n  isRejected(status) {\n    return status === WorkflowStatus.Rejected;\n  }\n  canChangeStatus(status) {\n    return !(status === WorkflowStatus.Completed || status === WorkflowStatus.Rejected);\n  }\n  goBackToEmployees() {\n    this.router.navigate(['/admin/employees']);\n  }\n  goBackToAdminDashboard() {\n    this.router.navigate(['/admin']); // Or your main admin overview page\n  }\n\n  formatError(error, defaultMessage) {\n    var _a;\n    if (error instanceof HttpErrorResponse) {\n      return ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || error.message || defaultMessage;\n    }\n    return error.message || defaultMessage;\n  }\n};\n__decorate([ViewChild('confirmModal')], ListWorkflowComponent.prototype, \"confirmModal\", void 0);\nListWorkflowComponent = __decorate([Component({\n  templateUrl: 'list.component.html'\n})], ListWorkflowComponent);\nexport { ListWorkflowComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAqBC,SAAS,QAAQ,eAAe;AAEvE,SAASC,KAAK,QAAQ,gBAAgB;AAGtC,SAAkBC,IAAI,QAAQ,cAAc;AAC5C,SAASC,cAAc,QAAkB,uBAAuB;AAGhE,SAASC,iBAAiB,QAAQ,sBAAsB;AAGjD,IAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAoBhCC,YACUC,eAAgC,EAChCC,YAA0B,EAC1BC,cAA8B,EAC9BC,eAAgC,EAChCC,KAAqB,EACrBC,MAAc;;IALd,oBAAe,GAAfL,eAAe;IACf,iBAAY,GAAZC,YAAY;IACZ,mBAAc,GAAdC,cAAc;IACd,oBAAe,GAAfC,eAAe;IACf,UAAK,GAALC,KAAK;IACL,WAAM,GAANC,MAAM;IAxBhB,cAAS,GAAe,EAAE;IAC1B,YAAO,GAAG,KAAK;IACf,mBAAc,GAAmB,IAAI;IACrC,YAAO,GAAG,KAAK;IACf,eAAU,GAAkB,IAAI;IAChC,sBAAiB,GAAkB,IAAI;IACvC,mBAAc,GAAW,EAAE;IAC3B,aAAQ,GAAG,KAAK;IACR,wBAAmB,GAAkD,IAAI;IACjF,wBAAmB,GAAkB,IAAI;IACzC,oBAAe,GAAoB,IAAI;IAG/B,yBAAoB,GAAoB,IAAI;IACpD;IACA,mBAAc,GAAGT,cAAc;IAC/B,SAAI,GAAGD,IAAI;IAaH,kBAAa,GAAmB,EAAE;IAHxC,IAAI,CAACW,cAAc,GAAG,IAAI,CAACJ,cAAc,CAACK,YAAY;IACtD,IAAI,CAACC,OAAO,GAAG,WAAI,CAACF,cAAc,0CAAEG,IAAI,MAAKd,IAAI,CAACe,KAAK;EACzD;EAGAC,WAAW;IACT;IACA,IAAI,CAACC,aAAa,CAACC,OAAO,CAACC,GAAG,IAAIA,GAAG,CAACC,WAAW,EAAE,CAAC;EACtD;EAEAC,QAAQ;IACN,IAAI,CAACC,uBAAuB,GAAG,IAAI,CAACb,KAAK,CAACc,WAAW,CAACC,SAAS,CAACC,MAAM,IAAG;MACvE,IAAI,CAACC,mBAAmB,GAAGD,MAAM,CAAC,YAAY,CAAC;MAC/C,IAAI,CAACE,SAAS,GAAG,EAAE;MACnB,IAAI,CAACC,eAAe,GAAG,IAAI;MAE3B,IAAI,IAAI,CAACF,mBAAmB,EAAE;QAC5B,IAAI,CAACG,mBAAmB,CAAC,IAAI,CAACH,mBAAmB,CAAC;QAClD,IAAI,CAACI,wBAAwB,CAAC,IAAI,CAACJ,mBAAmB,CAAC;OACxD,MAAM,IAAI,IAAI,CAACb,OAAO,EAAE;QACvB,IAAI,CAACkB,gBAAgB,EAAE;OACxB,MAAM;QAEL,MAAMC,iBAAiB,GAAG,IAAI,CAACC,UAAU;QACzC,IAAID,iBAAiB,EAAE;UACrB,IAAI,CAACN,mBAAmB,GAAGQ,MAAM,CAACF,iBAAiB,CAAC;UACpD,IAAI,CAACH,mBAAmB,CAACK,MAAM,CAACF,iBAAiB,CAAC,CAAC;UACnD,IAAI,CAACF,wBAAwB,CAACI,MAAM,CAACF,iBAAiB,CAAC,CAAC;SACzD,MAAM;UACL,IAAI,CAAC1B,YAAY,CAAC6B,IAAI,CAAC,8EAA8E,CAAC;UACtG,IAAI,CAACC,OAAO,GAAG,KAAK;;;IAG1B,CAAC,CAAC;EACJ;EAEAP,mBAAmB,CAACI,UAAkB;IACpC,IAAI,CAACzB,eAAe,CAAC6B,OAAO,CAACJ,UAAU,CAAC,CACrCK,IAAI,CAACvC,KAAK,EAAE,CAAC,CACbyB,SAAS,CAAC;MACTe,IAAI,EAAGC,QAAQ,IAAK,IAAI,CAACZ,eAAe,GAAGY,QAAQ;MACnDC,KAAK,EAAGC,GAAG,IAAK,IAAI,CAACpC,YAAY,CAACmC,KAAK,CAAC,IAAI,CAACE,WAAW,CAACD,GAAG,EAAE,iCAAiC,CAAC;KACjG,CAAC;EACN;EAEAZ,wBAAwB,CAACG,UAAkB;IACzC,IAAI,CAACG,OAAO,GAAG,IAAI;IACnB,IAAI,CAAC/B,eAAe,CAACuC,eAAe,CAACX,UAAU,CAAC,CAC7CK,IAAI,CAACvC,KAAK,EAAE,CAAC,CACbyB,SAAS,CAAC;MACTe,IAAI,EAAGZ,SAAS,IAAI;QAClB,IAAI,CAACA,SAAS,GAAG,IAAI,CAACkB,aAAa,CAAClB,SAAS,CAAC;QAC9C,IAAI,CAACS,OAAO,GAAG,KAAK;MACtB,CAAC;MACDK,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACpC,YAAY,CAACmC,KAAK,CAAC,IAAI,CAACE,WAAW,CAACD,GAAG,EAAE,yCAAyCT,UAAU,EAAE,CAAC,CAAC;QACrG,IAAI,CAACN,SAAS,GAAG,EAAE;QACnB,IAAI,CAACS,OAAO,GAAG,KAAK;MACtB;KACD,CAAC;EACN;EAEAU,kBAAkB,CAACC,OAAY;IAC7B,OAAOC,MAAM,CAACC,OAAO,CAACF,OAAO,IAAI,EAAE,CAAC,CAACG,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,MAAM;MAAED,GAAG;MAAEC;IAAK,CAAE,CAAC,CAAC;EAC9E;EAEArB,gBAAgB;IACd,IAAI,CAACK,OAAO,GAAG,IAAI;IACnB,IAAI,CAAC/B,eAAe,CAACgD,MAAM,EAAE,CAC1Bf,IAAI,CAACvC,KAAK,EAAE,CAAC,CACbyB,SAAS,CAAC;MACTe,IAAI,EAAGZ,SAAS,IAAI;QAClB,IAAI,CAACA,SAAS,GAAG,IAAI,CAACkB,aAAa,CAAClB,SAAS,CAAC;QAC9C,IAAI,CAACS,OAAO,GAAG,KAAK;MACtB,CAAC;MACDK,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACpC,YAAY,CAACmC,KAAK,CAAC,IAAI,CAACE,WAAW,CAACD,GAAG,EAAE,8BAA8B,CAAC,CAAC;QAC9E,IAAI,CAACf,SAAS,GAAG,EAAE;QACnB,IAAI,CAACS,OAAO,GAAG,KAAK;MACtB;KACD,CAAC;EACN;EAEQS,aAAa,CAAClB,SAAqB;IACzC,OAAOA,SAAS,CAAC2B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;MAC7B,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAACH,CAAC,CAACI,eAAe,IAAI,CAAC,CAAC,CAACC,OAAO,EAAE;MACxD,MAAMC,KAAK,GAAG,IAAIH,IAAI,CAACF,CAAC,CAACG,eAAe,IAAI,CAAC,CAAC,CAACC,OAAO,EAAE;MACxD,OAAOC,KAAK,GAAGJ,KAAK;IACtB,CAAC,CAAC;EACJ;EAEAK,gBAAgB,CAACC,QAAkB,EAAEC,SAAkC;IACrEC,OAAO,CAACC,GAAG,CAAC,uCAAuCH,QAAQ,CAACI,EAAE,OAAOH,SAAS,EAAE,CAAC;IACjF,IAAI,CAACI,oBAAoB,CAACL,QAAQ,EAAEC,SAA2B,CAAC;EAClE;EAEAI,oBAAoB,CAACL,QAAkB,EAAEC,SAAyB;IAChE,IAAI,CAACD,QAAQ,IAAI,CAACA,QAAQ,CAACI,EAAE,EAAE;IAC/B,IAAI,CAAC9D,eAAe,CAACgE,YAAY,CAACN,QAAQ,CAACI,EAAE,EAAEH,SAAS,CAAC,CACtD1B,IAAI,CAACvC,KAAK,EAAE,CAAC,CACbyB,SAAS,CAAC;MACTe,IAAI,EAAG+B,eAAe,IAAI;QACxB,MAAMC,KAAK,GAAG,IAAI,CAAC5C,SAAS,CAAC6C,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACN,EAAE,KAAKG,eAAe,CAACH,EAAE,CAAC;QACxE,IAAII,KAAK,KAAK,CAAC,CAAC,EAAE;UAChB,IAAI,CAAC5C,SAAS,CAAC4C,KAAK,CAAC,mCAAQ,IAAI,CAAC5C,SAAS,CAAC4C,KAAK,CAAC,GAAKD,eAAe,CAAE;;QAE1E,IAAI,CAAChE,YAAY,CAACoE,OAAO,CAAC,uCAAuC,CAAC;MACpE,CAAC;MACDjC,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACpC,YAAY,CAACmC,KAAK,CAAC,IAAI,CAACE,WAAW,CAACD,GAAG,EAAE,kCAAkC,CAAC,CAAC;MACpF;KACD,CAAC;EACN;EAEAiC,qBAAqB,CAACR,EAAU,EAAES,MAAsB;IACtD,MAAMb,QAAQ,GAAG,IAAI,CAACpC,SAAS,CAACkD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACX,EAAE,KAAKA,EAAE,CAAC;IACtD,IAAI,CAACJ,QAAQ,EAAE;IAEf,IAAI,CAACgB,mBAAmB,GAAG;MAAEZ,EAAE;MAAES;IAAM,CAAE;IACzC,IAAI,CAACI,cAAc,GAAG,+CAA+CJ,MAAM,KAAK3E,cAAc,CAACgF,YAAY,GAAG,YAAY,GAAG,cAAc,GAAG;IAC9I,IAAI,CAACC,YAAY,CAACC,IAAI,EAAE;EAC1B;EAEAC,uBAAuB;IACrB,IAAI,CAAC,IAAI,CAACL,mBAAmB,EAAE;IAE/B,MAAM;MAAEZ,EAAE;MAAES;IAAM,CAAE,GAAG,IAAI,CAACG,mBAAmB;IAC/C,MAAMhB,QAAQ,GAAG,IAAI,CAACpC,SAAS,CAACkD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACX,EAAE,KAAKA,EAAE,CAAC;IACtD,IAAI,CAACJ,QAAQ,EAAE;IAEfA,QAAQ,CAACsB,UAAU,GAAG,IAAI;IAC1B,IAAI,CAAChF,eAAe,CAACgE,YAAY,CAACF,EAAE,EAAES,MAAM,CAAC,CAC1CtC,IAAI,CAACvC,KAAK,EAAE,CAAC,CACbyB,SAAS,CAAC;MACTe,IAAI,EAAE,MAAK;QACTwB,QAAQ,CAACa,MAAM,GAAGA,MAAM;QACxBb,QAAQ,CAACsB,UAAU,GAAG,KAAK;QAC3B,IAAI,CAAC/E,YAAY,CAACoE,OAAO,CAAC,sCAAsC,CAAC;MACnE,CAAC;MACDjC,KAAK,EAAEA,KAAK,IAAG;QACb,IAAI,CAACnC,YAAY,CAACmC,KAAK,CAACA,KAAK,CAAC;QAC9BsB,QAAQ,CAACsB,UAAU,GAAG,KAAK;MAC7B;KACD,CAAC;IAEJ,IAAI,CAACN,mBAAmB,GAAG,IAAI;EACjC;EAEAO,cAAc,CAACnB,EAAU;IACvB,MAAMJ,QAAQ,GAAG,IAAI,CAACpC,SAAS,CAACkD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACX,EAAE,KAAKA,EAAE,CAAC;IACtD,IAAI,CAACJ,QAAQ,EAAE;IAEf,IAAIwB,OAAO,CAAC,gDAAgD,CAAC,EAAE;MAC7DxB,QAAQ,CAACyB,UAAU,GAAG,IAAI;MAC1B,IAAI,CAACnF,eAAe,CAACoF,MAAM,CAACtB,EAAE,CAAC,CAC5B7B,IAAI,CAACvC,KAAK,EAAE,CAAC,CACbyB,SAAS,CAAC;QACTe,IAAI,EAAE,MAAK;UACT,IAAI,CAACZ,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC+D,MAAM,CAACZ,CAAC,IAAIA,CAAC,CAACX,EAAE,KAAKA,EAAE,CAAC;UACxD,IAAI,CAAC7D,YAAY,CAACoE,OAAO,CAAC,+BAA+B,CAAC;QAC5D,CAAC;QACDjC,KAAK,EAAEA,KAAK,IAAG;UACb,IAAI,CAACnC,YAAY,CAACmC,KAAK,CAACA,KAAK,CAAC;UAC9BsB,QAAQ,CAACyB,UAAU,GAAG,KAAK;QAC7B;OACD,CAAC;;EAER;EAEAG,oBAAoB,CAACf,MAAc;IACjC,OAAOA,MAAM,KAAK3E,cAAc,CAAC2F,OAAO,IAAIhB,MAAM,KAAK3E,cAAc,CAACgF,YAAY;EACpF;EAEAY,qBAAqB,CAACjB,MAAc;IAClC,OAAOA,MAAM,KAAK3E,cAAc,CAAC6F,SAAS,IAAIlB,MAAM,KAAK3E,cAAc,CAAC8F,QAAQ;EAClF;EAEAC,UAAU,CAACpB,MAAc;IACvB,OAAOA,MAAM,KAAK3E,cAAc,CAACgG,QAAQ;EAC3C;EAEAC,eAAe,CAACtB,MAAc;IAC5B,OAAO,EAAEA,MAAM,KAAK3E,cAAc,CAAC6F,SAAS,IAAIlB,MAAM,KAAK3E,cAAc,CAACgG,QAAQ,CAAC;EACrF;EAEAE,iBAAiB;IACf,IAAI,CAACzF,MAAM,CAAC0F,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;EAC5C;EACAC,sBAAsB;IACpB,IAAI,CAAC3F,MAAM,CAAC0F,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC;;EAEQzD,WAAW,CAACF,KAAgC,EAAE6D,cAAsB;;IAC1E,IAAI7D,KAAK,YAAYvC,iBAAiB,EAAE;MACtC,OAAO,YAAK,CAACuC,KAAK,0CAAE8D,OAAO,KAAI9D,KAAK,CAAC8D,OAAO,IAAID,cAAc;;IAEhE,OAAO7D,KAAK,CAAC8D,OAAO,IAAID,cAAc;EACxC;CACD;AAjO4BE,YAA1B1G,SAAS,CAAC,cAAc,CAAC,2DAAsC;AADrDK,qBAAqB,eADjCN,SAAS,CAAC;EAAE4G,WAAW,EAAE;AAAqB,CAAE,CAAC,GACrCtG,qBAAqB,CAkOjC;SAlOYA,qBAAqB","names":["Component","ViewChild","first","Role","WorkflowStatus","HttpErrorResponse","ListWorkflowComponent","constructor","workflowService","alertService","accountService","employeeService","route","router","currentAccount","accountValue","isAdmin","role","Admin","ngOnDestroy","subscriptions","forEach","sub","unsubscribe","ngOnInit","queryParamsSubscription","queryParams","subscribe","params","employeeIdFromQuery","workflows","employeeDetails","loadEmployeeDetails","loadWorkflowsForEmployee","loadAllWorkflows","currentEmployeeId","employeeId","String","info","loading","getById","pipe","next","employee","error","err","formatError","getByEmployeeId","sortWorkflows","getDetailsAsObject","details","Object","entries","map","key","value","getAll","sort","a","b","dateA","Date","datetimecreated","getTime","dateB","onStatusSelected","workflow","newStatus","console","log","id","updateWorkflowStatus","changeStatus","updatedWorkflow","index","findIndex","w","success","openStatusChangeModal","status","find","x","pendingStatusChange","confirmMessage","ForReviewing","confirmModal","show","onStatusChangeConfirmed","isUpdating","deleteWorkflow","confirm","isDeleting","delete","filter","isPendingOrReviewing","Pending","isCompletedOrApproved","Completed","Approved","isRejected","Rejected","canChangeStatus","goBackToEmployees","navigate","goBackToAdminDashboard","defaultMessage","message","__decorate","templateUrl"],"sourceRoot":"","sources":["E:\\semifinals\\groupB-fullstack-app\\frontend\\src\\app\\workflows\\list.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\nimport { WorkflowService, AlertService, AccountService, EmployeeService } from '@app/_services';\r\nimport { Account, Role } from '@app/_models';\r\nimport { WorkflowStatus, Workflow } from '@app/_models/workflow';\r\nimport { ConfirmModalComponent } from './confirm-modal.component';\r\nimport { Employee } from '@app/_models/employee';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({ templateUrl: 'list.component.html' })\r\nexport class ListWorkflowComponent implements OnInit, OnDestroy {\r\n  @ViewChild('confirmModal') confirmModal!: ConfirmModalComponent;\r\n  workflows: Workflow[] = [];\r\n  loading = false;\r\n  currentAccount: Account | null = null;\r\n  isAdmin = false;\r\n  employeeId: string | null = null;\r\n  displayEmployeeId: string | null = null;\r\n  confirmMessage: string = '';\r\n  notFound = false;\r\n  private pendingStatusChange: { id: string; status: WorkflowStatus } | null = null;\r\n  employeeIdFromQuery: string | null = null;\r\n  employeeDetails: Employee | null = null;\r\n\r\n  private queryParamsSubscription!: Subscription;\r\n  private statusUpdateWorkflow: Workflow | null = null;\r\n  // Make enum available in template\r\n  WorkflowStatus = WorkflowStatus;\r\n  Role = Role;\r\n\r\n  constructor(\r\n    private workflowService: WorkflowService,\r\n    private alertService: AlertService,\r\n    private accountService: AccountService,\r\n    private employeeService: EmployeeService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {\r\n    this.currentAccount = this.accountService.accountValue;\r\n    this.isAdmin = this.currentAccount?.role === Role.Admin;\r\n  }\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  ngOnDestroy(): void {\r\n    // Unsubscribe from all subscriptions to prevent memory leaks\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.queryParamsSubscription = this.route.queryParams.subscribe(params => {\r\n      this.employeeIdFromQuery = params['employeeId'];\r\n      this.workflows = [];\r\n      this.employeeDetails = null;\r\n\r\n      if (this.employeeIdFromQuery) {\r\n        this.loadEmployeeDetails(this.employeeIdFromQuery);\r\n        this.loadWorkflowsForEmployee(this.employeeIdFromQuery);\r\n      } else if (this.isAdmin) {\r\n        this.loadAllWorkflows();\r\n      } else {\r\n\r\n        const currentEmployeeId = this.employeeId;\r\n        if (currentEmployeeId) {\r\n          this.employeeIdFromQuery = String(currentEmployeeId);\r\n          this.loadEmployeeDetails(String(currentEmployeeId));\r\n          this.loadWorkflowsForEmployee(String(currentEmployeeId));\r\n        } else {\r\n          this.alertService.info(\"No employee specified, and your account is not linked to an employee record.\");\r\n          this.loading = false;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  loadEmployeeDetails(employeeId: string) {\r\n    this.employeeService.getById(employeeId)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (employee) => this.employeeDetails = employee,\r\n        error: (err) => this.alertService.error(this.formatError(err, 'Failed to load employee details'))\r\n      });\r\n  }\r\n\r\n  loadWorkflowsForEmployee(employeeId: string) {\r\n    this.loading = true;\r\n    this.workflowService.getByEmployeeId(employeeId)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (workflows) => {\r\n          this.workflows = this.sortWorkflows(workflows);\r\n          this.loading = false;\r\n        },\r\n        error: (err) => {\r\n          this.alertService.error(this.formatError(err, `Failed to load workflows for employee ${employeeId}`));\r\n          this.workflows = [];\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  getDetailsAsObject(details: any): { key: string, value: any }[] {\r\n    return Object.entries(details || {}).map(([key, value]) => ({ key, value }));\r\n  }\r\n\r\n  loadAllWorkflows() {\r\n    this.loading = true;\r\n    this.workflowService.getAll()\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (workflows) => {\r\n          this.workflows = this.sortWorkflows(workflows);\r\n          this.loading = false;\r\n        },\r\n        error: (err) => {\r\n          this.alertService.error(this.formatError(err, 'Failed to load all workflows'));\r\n          this.workflows = [];\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  private sortWorkflows(workflows: Workflow[]): Workflow[] {\r\n    return workflows.sort((a, b) => {\r\n      const dateA = new Date(a.datetimecreated || 0).getTime();\r\n      const dateB = new Date(b.datetimecreated || 0).getTime();\r\n      return dateB - dateA;\r\n    });\r\n  }\r\n\r\n  onStatusSelected(workflow: Workflow, newStatus: WorkflowStatus | string) {\r\n    console.log(`Status change selected for workflow ${workflow.id} to ${newStatus}`);\r\n    this.updateWorkflowStatus(workflow, newStatus as WorkflowStatus);\r\n  }\r\n\r\n  updateWorkflowStatus(workflow: Workflow, newStatus: WorkflowStatus) {\r\n    if (!workflow || !workflow.id) return;\r\n    this.workflowService.changeStatus(workflow.id, newStatus)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (updatedWorkflow) => {\r\n          const index = this.workflows.findIndex(w => w.id === updatedWorkflow.id);\r\n          if (index !== -1) {\r\n            this.workflows[index] = { ...this.workflows[index], ...updatedWorkflow };\r\n          }\r\n          this.alertService.success('Workflow status updated successfully!');\r\n        },\r\n        error: (err) => {\r\n          this.alertService.error(this.formatError(err, 'Failed to update workflow status'));\r\n        }\r\n      });\r\n  }\r\n\r\n  openStatusChangeModal(id: string, status: WorkflowStatus) {\r\n    const workflow = this.workflows.find(x => x.id === id);\r\n    if (!workflow) return;\r\n\r\n    this.pendingStatusChange = { id, status };\r\n    this.confirmMessage = `Are you sure you want to mark this workflow ${status === WorkflowStatus.ForReviewing ? 'for review' : 'as completed'}?`;\r\n    this.confirmModal.show();\r\n  }\r\n\r\n  onStatusChangeConfirmed() {\r\n    if (!this.pendingStatusChange) return;\r\n\r\n    const { id, status } = this.pendingStatusChange;\r\n    const workflow = this.workflows.find(x => x.id === id);\r\n    if (!workflow) return;\r\n\r\n    workflow.isUpdating = true;\r\n    this.workflowService.changeStatus(id, status)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: () => {\r\n          workflow.status = status;\r\n          workflow.isUpdating = false;\r\n          this.alertService.success('Workflow status updated successfully');\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n          workflow.isUpdating = false;\r\n        }\r\n      });\r\n\r\n    this.pendingStatusChange = null;\r\n  }\r\n\r\n  deleteWorkflow(id: string) {\r\n    const workflow = this.workflows.find(x => x.id === id);\r\n    if (!workflow) return;\r\n\r\n    if (confirm('Are you sure you want to delete this workflow?')) {\r\n      workflow.isDeleting = true;\r\n      this.workflowService.delete(id)\r\n        .pipe(first())\r\n        .subscribe({\r\n          next: () => {\r\n            this.workflows = this.workflows.filter(x => x.id !== id);\r\n            this.alertService.success('Workflow deleted successfully');\r\n          },\r\n          error: error => {\r\n            this.alertService.error(error);\r\n            workflow.isDeleting = false;\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  isPendingOrReviewing(status: string): boolean {\r\n    return status === WorkflowStatus.Pending || status === WorkflowStatus.ForReviewing;\r\n  }\r\n\r\n  isCompletedOrApproved(status: string): boolean {\r\n    return status === WorkflowStatus.Completed || status === WorkflowStatus.Approved;\r\n  }\r\n\r\n  isRejected(status: string): boolean {\r\n    return status === WorkflowStatus.Rejected;\r\n  }\r\n\r\n  canChangeStatus(status: string): boolean {\r\n    return !(status === WorkflowStatus.Completed || status === WorkflowStatus.Rejected);\r\n  }\r\n\r\n  goBackToEmployees() {\r\n    this.router.navigate(['/admin/employees']);\r\n  }\r\n  goBackToAdminDashboard() {\r\n    this.router.navigate(['/admin']); // Or your main admin overview page\r\n  }\r\n\r\n  private formatError(error: HttpErrorResponse | Error, defaultMessage: string): string {\r\n    if (error instanceof HttpErrorResponse) {\r\n      return error.error?.message || error.message || defaultMessage;\r\n    }\r\n    return error.message || defaultMessage;\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}