{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nimport * as i3 from \"@angular/common\";\nfunction RequestListComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" for Employee \", ctx_r0.displayEmployeeId, \" \");\n  }\n}\nfunction RequestListComponent_tr_20_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const request_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", request_r2.userEmail, \" (\", request_r2.userRole === \"Admin\" ? \"Admin User\" : \"Normal User\", \") \");\n  }\n}\nfunction RequestListComponent_tr_20_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Unknown\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestListComponent_tr_20_li_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", item_r7.name, \" (x\", item_r7.quantity, \") \");\n  }\n}\nconst _c0 = function (a0, a1, a2) {\n  return {\n    \"bg-warning text-dark\": a0,\n    \"bg-success\": a1,\n    \"bg-danger\": a2\n  };\n};\nconst _c1 = function (a1) {\n  return [\"edit\", a1];\n};\nfunction RequestListComponent_tr_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtemplate(4, RequestListComponent_tr_20_span_4_Template, 2, 2, \"span\", 2);\n    i0.ɵɵtemplate(5, RequestListComponent_tr_20_span_5_Template, 2, 0, \"span\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\")(7, \"ul\", 8);\n    i0.ɵɵtemplate(8, RequestListComponent_tr_20_li_8_Template, 2, 2, \"li\", 6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"td\")(10, \"span\", 9);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"td\")(13, \"button\", 10);\n    i0.ɵɵtext(14, \"Edit\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const request_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(request_r2.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", request_r2.userEmail);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !request_r2.userEmail);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", request_r2.requestItems);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(7, _c0, request_r2.status === \"Pending\", request_r2.status === \"Approved\" || request_r2.status === \"Approve\", request_r2.status === \"Rejected\" || request_r2.status === \"Reject\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", request_r2.status, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(11, _c1, request_r2.id));\n  }\n}\nexport let RequestListComponent = /*#__PURE__*/(() => {\n  class RequestListComponent {\n    constructor(router, route, accountService, employeeService) {\n      this.router = router;\n      this.route = route;\n      this.accountService = accountService;\n      this.employeeService = employeeService;\n      this.requests = [];\n      this.account = this.accountService.accountValue;\n      this.employeeId = null;\n      this.displayEmployeeId = null;\n    }\n    ngOnInit() {\n      // Get the employeeId from the route query parameters\n      this.route.queryParams.subscribe(params => {\n        this.employeeId = params['employeeId'];\n        if (this.employeeId) {\n          // If we have an employeeId, get the employee details to show in the header\n          this.employeeService.getById(this.employeeId).pipe(first()).subscribe(employee => {\n            this.displayEmployeeId = employee.employeeId;\n            // Load requests filtered by this employee\n            this.loadRequestsByEmployeeId(this.employeeId);\n          });\n        } else {\n          // Otherwise load all requests\n          this.loadAllRequests();\n        }\n      });\n    }\n    loadAllRequests() {\n      this.accountService.getAllRequests().pipe(first()).subscribe(requests => this.requests = requests, error => console.error('Error loading requests:', error));\n    }\n    loadRequestsByEmployeeId(employeeId) {\n      // Get requests filtered by employee ID\n      this.accountService.getAllRequests().pipe(first()).subscribe(requests => {\n        // Filter requests to only show those for this employee\n        this.requests = requests.filter(r => r.employeeId.toString() === employeeId.toString());\n        console.log(`Loaded ${this.requests.length} requests for employee ID ${employeeId}`);\n      }, error => console.error('Error loading requests:', error));\n    }\n    add() {\n      const route = ['/requests/add'];\n      if (this.employeeId) {\n        this.router.navigate(route, {\n          queryParams: {\n            employeeId: this.employeeId\n          }\n        });\n      } else {\n        this.router.navigate(route);\n      }\n    }\n    edit(id) {\n      const route = ['/requests/edit', id];\n      if (this.employeeId) {\n        this.router.navigate(route, {\n          queryParams: {\n            employeeId: this.employeeId\n          }\n        });\n      } else {\n        this.router.navigate(route);\n      }\n    }\n    delete(id) {\n      if (confirm('Are you sure you want to delete this request?')) {\n        this.accountService.deleteRequest(id).pipe(first()).subscribe({\n          next: () => {\n            this.requests = this.requests.filter(x => x.id !== id);\n          },\n          error: error => {\n            console.error('Error deleting request:', error);\n          }\n        });\n      }\n    }\n  }\n  RequestListComponent.ɵfac = function RequestListComponent_Factory(t) {\n    return new (t || RequestListComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.AccountService), i0.ɵɵdirectiveInject(i2.EmployeeService));\n  };\n  RequestListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RequestListComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 23,\n    vars: 2,\n    consts: [[1, \"card\"], [1, \"card-header\"], [4, \"ngIf\"], [1, \"card-body\"], [1, \"table-responsive\"], [1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"], [\"routerLink\", \"add\", 1, \"btn\", \"btn-sm\", \"btn-success\"], [1, \"list-unstyled\", \"mb-0\"], [1, \"badge\", 3, \"ngClass\"], [1, \"btn\", \"btn-sm\", \"btn-primary\", \"me-1\", 3, \"routerLink\"]],\n    template: function RequestListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Requests \");\n        i0.ɵɵtemplate(3, RequestListComponent_ng_container_3_Template, 2, 1, \"ng-container\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\", 4)(6, \"table\", 5)(7, \"thead\")(8, \"tr\")(9, \"th\");\n        i0.ɵɵtext(10, \"Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"th\");\n        i0.ɵɵtext(12, \"Employee\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"th\");\n        i0.ɵɵtext(14, \"Items\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"th\");\n        i0.ɵɵtext(16, \"Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"th\");\n        i0.ɵɵtext(18, \"Actions\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(19, \"tbody\");\n        i0.ɵɵtemplate(20, RequestListComponent_tr_20_Template, 15, 13, \"tr\", 6);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(21, \"a\", 7);\n        i0.ɵɵtext(22, \"Add Request\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.employeeId && ctx.displayEmployeeId);\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngForOf\", ctx.requests);\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i1.RouterLink],\n    encapsulation: 2\n  });\n  return RequestListComponent;\n})();","map":{"version":3,"mappings":"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","names":["first","i0","RequestListComponent","constructor","router","route","accountService","employeeService","accountValue","ngOnInit","queryParams","subscribe","params","employeeId","getById","pipe","employee","displayEmployeeId","loadRequestsByEmployeeId","loadAllRequests","getAllRequests","requests","error","console","filter","r","toString","log","length","add","navigate","edit","id","delete","confirm","deleteRequest","next","x","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\requests\\list.component.ts","C:\\xampp\\htdocs\\groupB-fullstack-app\\frontend\\src\\app\\requests\\list.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { AccountService, EmployeeService } from '@app/_services';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n  templateUrl: 'list.component.html'\r\n})\r\nexport class RequestListComponent implements OnInit {\r\n  requests: any[] = [];\r\n  account = this.accountService.accountValue;\r\n  employeeId: string | null = null;\r\n  displayEmployeeId: string | null = null;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private accountService: AccountService,\r\n    private employeeService: EmployeeService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    // Get the employeeId from the route query parameters\r\n    this.route.queryParams.subscribe(params => {\r\n      this.employeeId = params['employeeId'];\r\n      \r\n      if (this.employeeId) {\r\n        // If we have an employeeId, get the employee details to show in the header\r\n        this.employeeService.getById(this.employeeId)\r\n          .pipe(first())\r\n          .subscribe(employee => {\r\n            this.displayEmployeeId = employee.employeeId;\r\n            // Load requests filtered by this employee\r\n            this.loadRequestsByEmployeeId(this.employeeId);\r\n          });\r\n      } else {\r\n        // Otherwise load all requests\r\n        this.loadAllRequests();\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadAllRequests() {\r\n    this.accountService.getAllRequests()\r\n      .pipe(first())\r\n      .subscribe(\r\n        requests => this.requests = requests,\r\n        error => console.error('Error loading requests:', error)\r\n      );\r\n  }\r\n\r\n  private loadRequestsByEmployeeId(employeeId: string) {\r\n    // Get requests filtered by employee ID\r\n    this.accountService.getAllRequests()\r\n      .pipe(first())\r\n      .subscribe(\r\n        requests => {\r\n          // Filter requests to only show those for this employee\r\n          this.requests = requests.filter(r => r.employeeId.toString() === employeeId.toString());\r\n          console.log(`Loaded ${this.requests.length} requests for employee ID ${employeeId}`);\r\n        },\r\n        error => console.error('Error loading requests:', error)\r\n      );\r\n  }\r\n\r\n  add() {\r\n    const route = ['/requests/add'];\r\n    if (this.employeeId) {\r\n      this.router.navigate(route, { queryParams: { employeeId: this.employeeId } });\r\n    } else {\r\n      this.router.navigate(route);\r\n    }\r\n  }\r\n\r\n  edit(id: string) {\r\n    const route = ['/requests/edit', id];\r\n    if (this.employeeId) {\r\n      this.router.navigate(route, { queryParams: { employeeId: this.employeeId } });\r\n    } else {\r\n      this.router.navigate(route);\r\n    }\r\n  }\r\n\r\n  delete(id: string) {\r\n    if (confirm('Are you sure you want to delete this request?')) {\r\n      this.accountService.deleteRequest(id)\r\n        .pipe(first())\r\n        .subscribe({\r\n          next: () => {\r\n            this.requests = this.requests.filter(x => x.id !== id);\r\n          },\r\n          error: error => {\r\n            console.error('Error deleting request:', error);\r\n          }\r\n        });\r\n    }\r\n  }\r\n}","<div class=\"card\">\n  <div class=\"card-header\">\n    Requests\n    <ng-container *ngIf=\"employeeId && displayEmployeeId\">\n      for Employee {{displayEmployeeId}}\n    </ng-container>\n  </div>\n  <div class=\"card-body\">\n    <div class=\"table-responsive\">\n      <table class=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Type</th>\n            <th>Employee</th>\n            <th>Items</th>\n            <th>Status</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let request of requests\">\n            <td>{{request.type}}</td>\n            <td>\n              <span *ngIf=\"request.userEmail\">\n                {{request.userEmail}} ({{request.userRole === 'Admin' ? 'Admin User' : 'Normal User'}})\n              </span>\n              <span *ngIf=\"!request.userEmail\">Unknown</span>\n            </td>\n            <td>\n              <ul class=\"list-unstyled mb-0\">\n                <li *ngFor=\"let item of request.requestItems\">\n                  {{item.name}} (x{{item.quantity}})\n                </li>\n              </ul>\n            </td>\n            <td>\n              <span class=\"badge\" [ngClass]=\"{\n                'bg-warning text-dark': request.status === 'Pending',\n                'bg-success': request.status === 'Approved' || request.status === 'Approve',\n                'bg-danger': request.status === 'Rejected' || request.status === 'Reject'\n              }\">\n                {{request.status}}\n              </span>\n            </td>\n            <td>\n              <button class=\"btn btn-sm btn-primary me-1\" [routerLink]=\"['edit', request.id]\">Edit</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <a routerLink=\"add\" class=\"btn btn-sm btn-success\">Add Request</a>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}